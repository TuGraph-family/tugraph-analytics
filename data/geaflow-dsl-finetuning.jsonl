{"prompt": " 请帮我查找与 person 点有关联的公司节点，并按规格分组返回。", "completion": "match(a:person)-[e:belong]-(b:company) return b.scale group by b.scale"}
{"prompt": " 找到何宏，沿着标签为提交的边走2到5度，到达一个软件点。", "completion": "match(a:person where a.name='何宏')-[e:commits]->{2,5}(b:software) return b"}
{"prompt": " 找到软件合作伙伴的合作伙伴。", "completion": "match(a:software)-[e:partner]->{1,2}(b) return b"}
{"prompt": " 哪两家公司存在雇佣关系？美团和Bilibili。", "completion": "match(a:company where a.name='美团')-[e:employee]->(b)<-[e2:employee]-(c:company where c.name='Bilibili') return b"}
{"prompt": " 查询109个软件，找到它们与Stratosphere和Hadoop的共同朋友。", "completion": "match(a:software where a.name='SprintBoot')-[e:friend]->(b)<-[e2:friend]-(c:software where c.name='Hadoop') return b limit 109"}
{"prompt": " 给定一个人作为源点，软件作为目标点，以及一个提交的边。", "completion": "match(a:person)-[e:commits]->(b:software) return e"}
{"prompt": " 查询马建国认识的人中，那些购买过软件的人，并返回这些人的购买记录。", "completion": "match(a where a.name = '马建国')-[e:knows]->(b:person)-[e2:buy]->(c:software) return c.value"}
{"prompt": " 找出同时与微软和滴滴有联系的每个人，并返回他们的年龄。", "completion": "match(a:company where a.name='微软')-[e]->(b:person)<-[e2]-(c:company where c.name='滴滴') return b.age"}
{"prompt": " 请问能否帮我找出与周国强有关联，且与Flink有使用的软件节点？需要返回这些软件的ID,周国强的姓名以及Flink的评分。", "completion": "match(a:person where a.name='周国强')-[e:buy]->(b:software)<-[e2:uses]-(c:software where c.name='Flink') return a.name,b.id,c.stars"}
{"prompt": " 返回同时满足以下条件的点：标签为person,与person有belong关系且所属公司，与这些公司有employee关系且购买软件。", "completion": "match(a:person)-[e:belong]->(b:company)-[e2:employee]->(c:person)-[e3:buy]->(d:software) return d"}
{"prompt": " 搜索腾讯公司。", "completion": "match(a:company where a.name = '腾讯') return a"}
{"prompt": " 请帮我找出所有person点，并按id降序排序。", "completion": "match(a:person) return a order by a.id desc"}
{"prompt": " 查询李若涵认识的人，返回他们购买的语言和明星软件。", "completion": "match(a:person where name = '李若涵')-[e:knows]->(b:person)-[e2:buy]->(c:software) return c.lang, c.stars"}
{"prompt": " 请帮我查找与软件相关的公司节点，并返回这些节点中scale为medium的点的value乘630的值，以及人数除以946的数量。", "completion": "match(a:software)-[e]->(b:company where b.scale = 'medium') return b.value * 630, COUNT(b.peopleNumber / 946)"}
{"prompt": " 徐科购买的软件被其他软件使用的数量。", "completion": "match(a:person where a.name='徐科')-[e:buy]->(b:software)<-[e2:uses]-(c:software) return COUNT(c)"}
{"prompt": " 找出与软件MySQL有使用关系的软件。", "completion": "match(a:software where a.name='Mysql')<-[e:uses]-(b:software) return b"}
{"prompt": " 请帮我查找与徐梅有购买关系的软件和Zookeeper使用的软件，并返回它们。", "completion": "match(a:person where a.name = '徐梅')-[e:buy]->(b:software),(c:software where c.name = 'Zookeeper')-[e2:uses]->(d:software) return a, b, c, d"}
{"prompt": " 查找与软件ID为55的公司的合作伙伴，再查找与该公司的合作伙伴有关系的公司。", "completion": "match(a:software where id = '55')-[e]-(b:company)-[e2:partner]->(c), (b:company)-[e3:partner]->(d) return a, b, c, d"}
{"prompt": " 返回与 person 点关联的评论节点，并按 id 分组。", "completion": "match(a:person)-[e:likes]-(b:comment) return b.id group by b.id"}
{"prompt": " 查询马思琪从起点出发，沿着类型为'creates'的边走3到5步，到达终点comment。", "completion": "match(a:person where a.name='马思琪')-[e:creates]->{3,5}(b:comment) return b"}
{"prompt": " 找电影伙伴，或伙伴的伙伴。", "completion": "match(a:film)-[e:partner]->{1,2}(b) return b"}
{"prompt": " 查询何若涵和郑思琪之间共同存在的创建关系。", "completion": "match(a:person where a.name='何若涵')-[e:creates]->(b)<-[e2:creates]-(c:person where c.name='郑思琪') return b"}
{"prompt": " 查询李月和郑思琪共同的友人。", "completion": "match(a:person where a.name='李月')-[e:friend]->(b)<-[e2:friend]-(c:person where c.name='郑思琪') return b limit 24"}
{"prompt": " 在电影院和上映的电影之间查找边。", "completion": "match(a:cinema)-[e:releases]->(b:film) return e"}
{"prompt": " 返回与好视影院有上映关系的电影，并返回电影标签中拥有的名字。", "completion": "match(a where a.name = '好视影院')-[e:releases]->(b:film)-[e2:has]->(c:tag) return c.name"}
{"prompt": " 找出与电影我不是药神有关且与评论Comment_145有关的电影节点，并返回它们的类别。", "completion": "match(a:film where a.name='我不是药神')-[e]->(b:film)<-[e2]-(c:comment where c.name='Comment_145') return b.category"}
{"prompt": " 给定与电影院好视影院存在上映关系，且标签为'古代'的电影节点，返回这些电影的名字、类别、电影院好视影院的ID以及标签古代的价值。", "completion": "match(a:cinema where a.name='好视影院')-[e:releases]->(b:film)<-[e2:has]-(c:tag where c.name='古代') return a.id,b.name, b.category,c.value"}
{"prompt": " 请帮我查找标签等于person的comment,这些comment创建了对电影belong的影片，并且这些影片拥有标签has。", "completion": "match(a:person)-[e:creates]->(b:comment)-[e2:belong]->(c:film)-[e3:has]->(d:tag) return d"}
{"prompt": " 找出悬疑标签。", "completion": "match(a:tag where a.name = '悬疑') return a"}
{"prompt": " 找出标签为tag的点，按value升序排序。", "completion": "match(a:tag) return a order by a.value asc"}
{"prompt": " 查询孙伟观看过的电影，并返回这些电影标签的价值。", "completion": "match(a:person where name = '孙伟')-[e:watch]->(b:film)-[e2:has]->(c:tag) return c.value"}
{"prompt": " 找出所有与cinema节点有关系的节点，且节点ID不等于66,并返回这些节点的ID对55取余的值和ID乘40的值。", "completion": "match(a:cinema)-[e]->(b:cinema where b.id <> 66) return b.id % 55, b.id * 40"}
{"prompt": " 在大众电影院观看电影的人数", "completion": "match(a:cinema where a.name='大众影院')-[e:releases]->(b:film)<-[e2:watch]-(c:person) return COUNT(c)"}
{"prompt": " 找出与电影功夫有发行关系的电影院。", "completion": "match(a:film where a.name='功夫')<-[e:releases]-(b:cinema) return b"}
{"prompt": " 请帮我查找与李建国和Alan有关的评论。", "completion": "match(a:person where a.name = '李建国')-[e:creates]->(b:comment),(c:person where c.name = 'Alan')-[e2:creates]->(d:comment) return a, b, c, d"}
{"prompt": " 给出与ID为170的标签相关的评论的关联，再给出与评论有关系的合作伙伴。", "completion": "match(a:tag where id = '170')-[e]-(b:comment)-[e2:relation]->(c), (b:comment)-[e3:partner]->(d) return a, b, c, d"}
{"prompt": " 找出与 author 节点关联的 author 节点，按其 salary、gender、age 分组，并返回这些信息。", "completion": "match(a:author)-[e:knows]-(b:author) return b.salary, b.gender, b.age group by b.salary, b.gender, b.age"}
{"prompt": " 请问，从《罪与罚》出发，经过'引用'标签的边，然后走2度或3度到达哪本书？", "completion": "match(a:book where a.name='罪与罚')-[e:refers]->{2,3}(b:book) return b"}
{"prompt": " 找出所有作家的伙伴，或他们伙伴的伙伴。", "completion": "match(a:author)-[e:partner]->{1,2}(b) return b"}
{"prompt": " 返回与编辑韩轩和王月都发布过内容。", "completion": "match(a:publisher where a.name='韩轩')-[e:publish]->(b)<-[e2:publish]-(c:publisher where c.name='王月') return b"}
{"prompt": " 找到45个杜宏和孙梅的共同作家朋友。", "completion": "match(a:author where a.name='杜宏')-[e:relation]->(b)<-[e2:relation]-(c:author where c.name='孙梅') return b limit 45"}
{"prompt": " 找出所有读者和书之间的喜欢边。", "completion": "match(a:reader)-[e:likes]->(b:book) return e"}
{"prompt": " 找出所有与《百年孤独》存在引用关系的书籍，并返回这些引用关系的创建时间。", "completion": "match(a where a.name = '百年孤独')-[e:refers]->(b:book)-[e2:refers]->(c:book) return c.createTime"}
{"prompt": " 返回publisher节点中，与book呐喊存在关系且与杜建国存在关系的publisher的id、name和gender。", "completion": "match(a:book where a.name='呐喊')-[e]->(b:publisher)<-[e2]-(c:publisher where c.name='杜建国') return b.id, b.name, b.gender"}
{"prompt": " 返回与编辑郑强有发布关系且与书孤城有引用关系的书籍节点，并返回这些书籍的名称、ID、编辑郑强的身高和书孤城的ID。", "completion": "match(a:publisher where a.name='郑强')-[e:publish]->(b:book)<-[e2:refers]-(c:book where c.name='孤城') return a.height,b.name, b.id,c.id"}
{"prompt": " 请帮我查找与作家类型相关的书籍，并找出与这些书籍有引用关系的其他书籍。", "completion": "match(a:author)-[e:write]->(b:book)-[e2:refers]->(c:book)-[e3:refers]->(d:book) return d"}
{"prompt": " 给我一本叫做计算机网络的书。", "completion": "match(a:book where a.name = '计算机网络') return a"}
{"prompt": " 找出标签为'book'的所有点，按名称降序排序。", "completion": "match(a:book) return a order by a.name desc"}
{"prompt": " 查找孙建国写的书，返回书名、创建时间和ID。", "completion": "match(a:author where name = '孙建国')-[e:write]->(b:book)-[e2:relates]->(c:book) return c.name, c.createTime, c.id"}
{"prompt": " 查询与书有关联的书节点，过滤掉名字为'三体'的节点，并统计这些节点ID的余数对58取余加53的个数，以及ID减77对40取余的最大值。", "completion": "match(a:book)-[e]->(b:book where b.name <> '三体') return COUNT(AVG(b.id) % 58 + 53), MAX(b.id - 77 % 40)"}
{"prompt": " 请帮我查询黄建国喜欢哪些书，以及它们被其他哪些书所知道。", "completion": "match(a:reader where a.name='黄建国')-[e:likes]->(b:book)<-[e2:knows]-(c:book) return COUNT(c)"}
{"prompt": " 查找与黄宏有knows关系的作者。", "completion": "match(a:author where a.name='黄宏')<-[e:knows]-(b:author) return b"}
{"prompt": " 请帮我找出郑宏喜欢的书，以及孙伟写的书，一并返回。", "completion": "match(a:reader where a.name = '郑宏')-[e:likes]->(b:book),(c:author where c.name = '孙伟')-[e2:write]->(d:book) return a, b, c, d"}
{"prompt": " 先查找与书籍ID为74的作者的关联，再查找该作者的朋友。", "completion": "match(a:book where id = '74')-[e]-(b:author)-[e2:relation]->(c), (b:author)-[e3:friend]->(d) return a, b, c, d"}
{"prompt": " 查询与公司相关的城市节点，按其value、name、area分组，返回它们的value、name和area。", "completion": "match(a:company)-[e:belong]-(b:city) return b.value, b.name, b.area group by b.value, b.name, b.area"}
{"prompt": " 从上海出发，沿着属于边的方向走3-5度，可以到达哪个国家？", "completion": "match(a:city where a.name='上海')-[e:belong]->{3,5}(b:country) return b"}
{"prompt": " 请帮我找出university的朋友，或者是朋友的朋友。", "completion": "match(a:university)-[e:friend]->{1,2}(b) return b"}
{"prompt": " 滴滴和美团之间有什么关系？", "completion": "match(a:company where a.name='滴滴')-[e:belong]->(b)<-[e2:belong]-(c:company where c.name='美团') return b"}
{"prompt": " 请问美国和日本这两个国家之间有什么共同点吗？", "completion": "match(a:country where a.name='美国')-[e:relation]->(b)<-[e2:relation]-(c:country where c.name='日本') return b limit 132"}
{"prompt": " 找出所有从大学到公司的、合作关系标签为cooperate的边。", "completion": "match(a:university)-[e:cooperate]->(b:company) return e"}
{"prompt": " 找出与四川大学有隶属关系的城市，再找出这些城市与国家的关系，返回这些关系的值。", "completion": "match(a where a.name = '四川大学')-[e:belong]->(b:city)-[e2:belong]->(c:country) return c.value"}
{"prompt": " 找出与韩国有关且与字节有关系的城市节点，并返回它们的人数。", "completion": "match(a:country where a.name='韩国')-[e]->(b:city)<-[e2]-(c:company where c.name='字节') return b.peopleNumber"}
{"prompt": " 查询与纽约有包含关系、与深圳有属于关系的公司节点，返回这些公司的规格、ID、人数，以及纽约的面积和深圳的ID。", "completion": "match(a:city where a.name='纽约')-[e:contain]->(b:company)<-[e2:belong]-(c:city where c.name='深圳') return a.area,b.scale, b.id, b.peopleNumber,c.id"}
{"prompt": " 找出与标签为'大学'的点有合作关系的公司，并进一步找到与这些公司有隶属关系的城市，最后找到与这些城市有隶属关系的国家。", "completion": "match(a:university)-[e:cooperate]->(b:company)-[e2:belong]->(c:city)-[e3:belong]->(d:country) return d"}
{"prompt": " 返回滴滴公司。", "completion": "match(a:company where a.name = '滴滴') return a"}
{"prompt": " 列出所有公司，按名称从大到小排序。", "completion": "match(a:company) return a order by a.name desc"}
{"prompt": " 返回天津城市中包含公司的信息，包括公司所属的城市的ID、面积和人口数量。", "completion": "match(a:city where name = '天津')-[e:contain]->(b:company)-[e2:belong]->(c:city) return c.id, c.area, c.peopleNumber"}
{"prompt": " 找出所有ID大于等于60且与国家相关的城市节点，并返回这些点中ID乘ID的最大值和ID除以66的值。", "completion": "match(a:country)-[e]->(b:city where b.id >= 60) return MAX(b.id * b.id), b.id / 66"}
{"prompt": " 查询Bilibili属于哪个城市，其他大学属于的数量。", "completion": "match(a:company where a.name='Bilibili')-[e:belong]->(b:city)<-[e2:belong]-(c:university) return COUNT(c)"}
{"prompt": " 列出与中国有隶属关系的城市。", "completion": "match(a:country where a.name='中国')<-[e:belong]-(b:city) return b"}
{"prompt": " 查找与纽约有关的公司和与澳大利亚有关的城市，并返回它们。", "completion": "match(a:city where a.name = '纽约')-[e:contain]->(b:company),(c:country where c.name = '澳大利亚')-[e2:contain]->(d:city) return a, b, c, d"}
{"prompt": " 先查询与公司ID为31的大学的关联，再查询与大学有关的朋友。", "completion": "match(a:company where id = '31')-[e]-(b:university)-[e2:relation]->(c), (b:university)-[e3:friend]->(d) return a, b, c, d"}
{"prompt": " 查询与买家相关的卖家节点，按名称分组并返回。", "completion": "match(a:buyer)-[e:consult]-(b:seller) return b.name group by b.name"}
{"prompt": " 请问从王月卖家出发，沿着拥有类型的边界走2到5度，可以到达哪个商品点？", "completion": "match(a:seller where a.name='王月')-[e:has]->{2,5}(b:goods) return b"}
{"prompt": " 请帮我找出与买家相关的人，或者相关者的相关者。", "completion": "match(a:buyer)-[e:relation]->{1,2}(b) return b"}
{"prompt": " 马思思和郑国强之间存在什么联系？", "completion": "match(a:buyer where a.name='马思思')-[e:look]->(b)<-[e2:look]-(c:buyer where c.name='郑国强') return b"}
{"prompt": " 陈强和郑建国有两个共同朋友，他们都是96号买家。", "completion": "match(a:buyer where a.name='陈强')-[e:friend]->(b)<-[e2:friend]-(c:buyer where c.name='郑建国') return b limit 96"}
{"prompt": " 卖家和买家之间建立的订单是一种创造性的关系。", "completion": "match(a:buyer)-[e:creates]->(b:orders) return e"}
{"prompt": " 找出与黄科有咨询关系的卖家，以及它们所拥有的商品，并返回这些点的ID。", "completion": "match(a where a.name = '黄科')-[e:consult]->(b:seller)-[e2:has]->(c:goods) return c.id"}
{"prompt": " 返回同时与卖家何科和何若涵存在关系的买家节点所对应的名字。", "completion": "match(a:seller where a.name='何科')-[e]->(b:buyer)<-[e2]-(c:seller where c.name='何若涵') return b.name"}
{"prompt": " 请帮我查询与买家黄轩存在取消关系，且商品短袖包含的订单，返回订单价值、名称、买家黄轩ID和商品短袖价值。", "completion": "match(a:buyer where a.name='黄轩')-[e:cancel]->(b:orders)<-[e2:contain]-(c:goods where c.name='短袖') return a.id,b.value, b.name,c.value"}
{"prompt": " 找出非家庭买家的卖家名称和他们出售的商品名称。", "completion": "match(a:buyer where a.gender <> 'famale')-[e:consult]->(b:seller)-[e2:has]->(c:goods) return b.name as b_name, c.name as c_name"}
{"prompt": " 找出label为goods且名称为矿泉水的点，并返回这些点的sellerNumber和name。", "completion": "match(a:goods where a.name = '矿泉水') return a.sellerNumber, a.name"}
{"prompt": " 按照身高从大到小排列，找出23个薪水为4491的买家。", "completion": "match(a:buyer where a.salary = 4491) return a order by a.height desc limit 23"}
{"prompt": " 查询卖家源点类型为seller,边类型为has的边，返回这些边的目标ID对9取余的值和weight的个数乘以138.74除以803的值。", "completion": "match(a:seller)-[e:has]->(b) return e.targetId % 9, COUNT(e.weight) * 138.74 / 803"}
{"prompt": " 查询的卖家以及与这些卖家有咨询关系的其他买家。", "completion": "match(a:seller where a.id = '73')-[e]-(b:seller)<-[e2:consult]-(c:buyer) return b,c"}
{"prompt": " 陈国强卖什么货物？", "completion": "match(a:goods)<-[e:has]-(b:seller where b.name='陈国强') return a, b"}
{"prompt": " 找出郑科店铺中所有商品，并找出向郑科咨询的买家，然后将两者一起返回。", "completion": "match(a where a.name = '郑科')-[e:has]->(b:goods),(a where a.name = '郑科')<-[e2:consult]-(c:buyer) return a, b, c"}
{"prompt": " 查找与黄宏有顾问关系的卖家，然后查找与黄宏的订单有创建关系的卖家。", "completion": "match(a:buyer where a.name = '黄宏')-[e:consult]->(b:seller),(a:buyer where a.name = '黄宏')<-[e2:creates]-(c:orders) return a, b, c"}
{"prompt": " 返回与贷款点相关的账户节点，并按创建时间对其进行分组。", "completion": "match(a:loan)-[e:deposit]-(b:account) return b.createTime group by b.createTime"}
{"prompt": " Alan从起点出发，沿着类型为apply的边走1度，到达终点loan。", "completion": "match(a:person where a.name='Alan')-[e:apply]->{1,1}(b:loan) return b"}
{"prompt": " 请帮我找出这个人所有的朋友，以及他们朋友的朋友。", "completion": "match(a:person)-[e:friend]->{1,2}(b) return b"}
{"prompt": " 查询与账户XXD和Zeus存在返利关系的点。", "completion": "match(a:account where a.name='XXD')-[e:repay]->(b)<-[e2:repay]-(c:account where c.name='Zeus') return b"}
{"prompt": " LX001和Geaflow123有84个共同朋友。", "completion": "match(a:account where a.name='LX001')-[e:friend]->(b)<-[e2:friend]-(c:account where c.name='Geaflow123') return b limit 84"}
{"prompt": " 查询所有从'loan'源点流向'account'目标点且标签为'deposit'的边。", "completion": "match(a:loan)-[e:deposit]->(b:account) return e"}
{"prompt": " 找出与王思琪有关联且申请贷款的公司，并返回它们的权重。", "completion": "match(a where a.name = '王思琪')-[e:invest]->(b:company)-[e2:apply]->(c:loan) return c.weight"}
{"prompt": " 请帮我查找与徐轩和黄建聪有关联的公司的节点，并返回它们的ID和人数。", "completion": "match(a:person where a.name='徐轩')-[e]->(b:company)<-[e2]-(c:person where c.name='黄建聪') return b.id, b.peopleNumber"}
{"prompt": " 查询与孙红有关联的公司，并同时申请贷款和存在投资关系，返回这些公司的名称、孙红的ID以及贷款的金额。", "completion": "match(a:person where a.name='孙红')-[e:invest]->(b:company)<-[e2:apply]-(c:loan where c.name='defaultName') return a.id,b.name,c.amount"}
{"prompt": " 给出与类型为person的实体拥有关系的账号，以及这些账号的还款和存款关系。", "completion": "match(a:person)-[e:own]->(b:account)-[e2:repay]->(c:loan)-[e3:deposit]->(d:account) return d"}
{"prompt": " 帮我找找这个贷款，它叫做defaultName。", "completion": "match(a:loan where a.name = 'defaultName') return a"}
{"prompt": " 找出所有标签为'账号'的点，然后按照创建时间排序。", "completion": "match(a:account) return a order by a.createTime asc"}
{"prompt": " 找出李宏的账号，返回他欠款的贷款金额和相应的权重。", "completion": "match(a:person where name = '李宏')-[e:own]->(b:account)-[e2:repay]->(c:loan) return c.amount, c.weight"}
{"prompt": " 请帮我找出与特定人物相关的公司，并筛选出名称不是微软的公司。然后，计算这些公司中每个人员数量与601的乘积，并找到这些公司中值的最小乘积，即888。", "completion": "match(a:person)-[e]->(b:company where b.name <> '微软') return COUNT(b.peopleNumber * 601), MIN(SUM(b.value) * 888)"}
{"prompt": " 找出从account LX001转账的账户以及转账数量。", "completion": "match(a:account where a.name='LX001')-[e:transfer]->(b:account)<-[e2:transfer]-(c:account) return COUNT(c)"}
{"prompt": " 找出与账户Faker有转移关系的账户。", "completion": "match(a:account where a.name='Faker')<-[e:transfer]-(b:account) return b"}
{"prompt": " 返回与账号XXD有转账关系的账号，以及与账号LX001有还款关系的贷款。", "completion": "match(a:account where a.name = 'XXD')-[e:transfer]->(b:account),(c:account where c.name = 'LX001')-[e2:repay]->(d:loan) return a, b, c, d"}
{"prompt": " 查询与公司ID为139的账户有合作的伙伴，再查询与账户有关系的联系人。", "completion": "match(a:company where id = '139')-[e]-(b:account)-[e2:partner]->(c), (b:account)-[e3:friend]->(d) return a, b, c, d"}
{"prompt": " 请帮我查询和医生相关的处方节点，并按重量分组，返回重量。", "completion": "match(a:doctor)-[e:creates]-(b:prescription) return b.weight group by b.weight"}
{"prompt": " 从医生徐若涵出发，经过属于类型的边，走1到3度到达部门点。", "completion": "match(a:doctor where a.name='徐若涵')-[e:belong]->{1,3}(b:department) return b"}
{"prompt": " 帮我找找我有处方的朋友，或者朋友的朋友。", "completion": "match(a:prescription)-[e:friend]->{1,2}(b) return b"}
{"prompt": " 查询郑建国和Amy之间存在的共同点。", "completion": "match(a:doctor where a.name='郑建国')-[e:belong]->(b)<-[e2:belong]-(c:doctor where c.name='Amily') return b"}
{"prompt": " 请帮我查找放射科和眼科共同合作的148个部门。", "completion": "match(a:department where a.name='放射科')-[e:partner]->(b)<-[e2:partner]-(c:department where c.name='眼科') return b limit 148"}
{"prompt": " 找出所有医生到患者，类型为诊断的边。", "completion": "match(a:doctor)-[e:diagnose]->(b:patient) return e"}
{"prompt": " 找出杜强所属的部门，再找出部门与医生之间的关系，返回相关点的ID。", "completion": "match(a where a.name = '杜强')-[e:belong]->(b:department)-[e2:has]->(c:doctor) return c.id"}
{"prompt": " 查询与外科有联系且与李伟有关联的部门节点，并返回它们的ID、地址和名称。", "completion": "match(a:department where a.name='外科')-[e]->(b:department)<-[e2]-(c:patient where c.name='李伟') return b.id, b.address, b.name"}
{"prompt": " 返回与医生马建聪存在诊断关系且与处方Prescription_227存在接受关系的病人节点，并给出这些病人的ID,医生马建聪的身高和处方Prescription_227的ID。", "completion": "match(a:doctor where a.name='马建聪')-[e:diagnose]->(b:patient)<-[e2:accept]-(c:prescription where c.name='Prescription_227') return a.height,b.id,c.id"}
{"prompt": " 返回同时满足以下条件的点：标签为医生，属于某个部门，该部门拥有医生，医生对病人进行了诊断。", "completion": "match(a:doctor)-[e:belong]->(b:department)-[e2:has]->(c:doctor)-[e3:diagnose]->(d:patient) return d"}
{"prompt": " 请问外科在哪里？", "completion": "match(a:department where a.name = '外科') return a"}
{"prompt": " 筛选出标签为'patient'的点，然后按照'gender'属性进行升序排序。", "completion": "match(a:patient) return a order by a.gender asc"}
{"prompt": " 返回呼吸科拥有的医生姓名、权重、创建时间以及他们创建的处方。", "completion": "match(a:department where name = '呼吸科')-[e:has]->(b:doctor)-[e2:creates]->(c:prescription) return c.weight, c.name, c.createTime"}
{"prompt": " 请帮我查询与医生相关的非枇杷糖浆药品节点，并返回这些节点中price的最小值对167取余的最大值，以及它们的权重除以68乘22的值。", "completion": "match(a:doctor)-[e]->(b:medicine where b.name <> '枇杷糖浆') return MAX(MIN(b.price) % 167), b.weight / 68 * 22"}
{"prompt": " 返回耳鼻喉科医生数量，其他部门也有拥有。", "completion": "match(a:department where a.name='耳鼻喉科')-[e:has]->(b:doctor)<-[e2:has]-(c:department) return COUNT(c)"}
{"prompt": " 查询药品医疗酒精处方的包含关系。", "completion": "match(a:medicine where a.name='医疗酒精')<-[e:contain]-(b:prescription) return b"}
{"prompt": " 请帮我查找与Prescription_477有包含关系的药品，以及与Prescription_341有包含关系的药品，并返回它们。", "completion": "match(a:prescription where a.name = 'Prescription_477')-[e:contain]->(b:medicine),(c:prescription where c.name = 'Prescription_341')-[e2:contain]->(d:medicine) return a, b, c, d"}
{"prompt": " 找出与处方ID为93的医生有伙伴关系的相关者。", "completion": "match(a:prescription where id = '93')-[e]-(b:doctor)-[e2:partner]->(c), (b:doctor)-[e3:relation]->(d) return a, b, c, d"}
{"prompt": " 找出与person节点有关联的person节点，并按年龄分组返回。", "completion": "match(a:person)-[e:pay]-(b:person) return b.age group by b.age"}
{"prompt": " 请问从孙建聪开始，经过一条知道边，跳1下后到达的是哪个点？", "completion": "match(a:person where a.name='孙建聪')-[e:knows]->{1,1}(b:person) return b"}
{"prompt": " 返回两个人的共同伴侣。", "completion": "match(a:person)-[e:partner]->{1,2}(b) return b"}
{"prompt": " 查找张建国和杜建聪共同认识的人。", "completion": "match(a:person where a.name='张建国')-[e:knows]->(b)<-[e2:knows]-(c:person where c.name='杜建聪') return b"}
{"prompt": " 查询杜强和韩雪共同的朋友，共有159个。", "completion": "match(a:person where a.name='杜强')-[e:friend]->(b)<-[e2:friend]-(c:person where c.name='韩雪') return b limit 159"}
{"prompt": " 找所有起点和终点都是人的标记为'喜欢'的边。", "completion": "match(a:person)-[e:likes]->(b:person) return e"}
{"prompt": " 查找与郑月有关联的人，并计算他们之间的年龄关系。", "completion": "match(a where a.name = '郑月')-[e:likes]->(b:person)-[e2:likes]->(c:person) return c.age"}
{"prompt": " 返回同时与person张梅和person王雪有关联的人，并返回这些人的性别，身高和姓名。", "completion": "match(a:person where a.name='张梅')-[e]->(b:person)<-[e2]-(c:person where c.name='王雪') return b.gender, b.height, b.name"}
{"prompt": " 找出与赵梅有薪资关系且与张强有关注关系的个人节点，返回他们的身高、性别、赵梅的薪资和张国强的身高。", "completion": "match(a:person where a.name='赵梅')-[e:pay]->(b:person)<-[e2:likes]-(c:person where c.name='张国强') return a.salary,b.height, b.gender,c.height"}
{"prompt": " 查询与'person'类型节点有关联的'person'节点，并进一步查询这些节点之间的关联关系。", "completion": "match(a:person)-[e:pay]->(b:person)-[e2:pay]->(c:person)-[e3:knows]->(d:person) return d"}
{"prompt": " 介绍一下名叫黄雪的人。", "completion": "match(a:person where a.name = '黄雪') return a"}
{"prompt": " 请帮我查询带有标签'person'的点，并按姓名从大到小排序。", "completion": "match(a:person) return a order by a.name desc"}
{"prompt": " 查询韩伟支付的人的薪资和性别。", "completion": "match(a:person where name = '韩伟')-[e:pay]->(b:person)-[e2:knows]->(c:person) return c.salary, c.gender"}
{"prompt": " 请帮我查询与名字不是'郑月'的所有person节点，并返回这些节点中id对52取余的最大值，以及salary的最小值减去薪资乘162的最小值。", "completion": "match(a:person)-[e]->(b:person where b.name <> '郑月') return MAX(b.id % 52), MIN((MIN(b.salary) - b.salary) * 162)"}
{"prompt": " 请帮我查询陈梅喜欢的人数，以及他们之间的朋友关系。", "completion": "match(a:person where a.name='陈梅')-[e:likes]->(b:person)<-[e2:knows]-(c:person) return COUNT(c)"}
{"prompt": " 请找出与李思琪有支付关联的人。", "completion": "match(a:person where a.name='李思琪')<-[e:pay]-(b:person) return b"}
{"prompt": " 找出与赵月有支付关系的人和与吴宏有支付关系的人，然后将它们都返回。", "completion": "match(a:person where a.name = '赵月')-[e:pay]->(b:person),(c:person where c.name = '吴宏')-[e2:pay]->(d:person) return a, b, c, d"}
{"prompt": " 查找与ID为34的人有关的人（如配偶）,再查找与这些人有关的任何关系（如婚姻关系）。", "completion": "match(a:person where id = '34')-[e]-(b:person)-[e2:partner]->(c), (b:person)-[e3:relation]->(d) return a, b, c, d"}
{"prompt": " 按照createTime和weight分组，然后按名称从大到小排序。", "completion": "match(a:prescription) return a.name group by a.createTime, a.weight order by a.name desc"}
{"prompt": " 查询黄思思和杜雪之间共同存在的创造关系。", "completion": "match(a:user where a.name='黄思思')-[e:creates]->(b)<-[e2:creates]-(c:user where c.name='杜雪') return b"}
{"prompt": " 帮我找出马宏和陈雪的共同朋友。", "completion": "match(a:user where a.name='马宏')-[e:friend]->(b)<-[e2:friend]-(c:user where c.name='陈雪') return b limit 179"}
{"prompt": " 返回同时与 Prescription_255 和 Prescription_497 存在关系的 prescription 节点的 name 和 weight。", "completion": "match(a:prescription where a.name='Prescription_255')-[e]->(b:prescription)<-[e2]-(c:prescription where c.name='Prescription_497') return b.name, b.weight"}
{"prompt": " 查询名叫周轩的用户。", "completion": "match(a:user where a.name = '周轩') return a"}
{"prompt": " 请帮我找出所有处方，并按重要性排序。", "completion": "match(a:prescription) return a order by a.weight desc"}
{"prompt": " 返回用户源点标签为user,边标签为likes的边，并返回这些边的f0除以730的值，以及它们与srcId取模170后的余数数量。", "completion": "match(a:user)-[e:likes]->(b) return e.f0 / 730, COUNT(SUM(e.srcId) % 170)"}
{"prompt": " 查找与处方ID为38的用户相关的所有人员，包括用户和与用户有关的人员。", "completion": "match(a:prescription where id = '38')-[e]-(b:user)-[e2:relation]->(c), (b:user)-[e3:relation]->(d) return a, b, c, d"}
{"prompt": " 给出按年龄和工资分组的人的工资，并按升序排序。", "completion": "match(a:person) return a.salary group by a.id, a.age, a.salary order by a.salary asc"}
{"prompt": " 查询与名为徐宏的人有同事关系或同事同事关系的所有人。", "completion": "match(a:person where n.name=徐宏)-[e:colleague]->{1,2}(b:person) return b"}
{"prompt": " 请帮我找出共同关联的person节点，名称为何建国和黄建聪。", "completion": "match(a where a.name = '何建国')-[e:relates]->(b:person)<-[e2:relates]-(c where c.name = '黄建聪') return b"}
{"prompt": " 查询名为郑轩和陈科的，标签为'person'的共同爱人节点列表。", "completion": "match(a:person where a.name='郑轩')-[e:lover]->(b)<-[e2:lover]-(c:person where c.name='陈科') return b.name"}
{"prompt": " 查询83个同时与张建聪和黄强有关系的个人节点。", "completion": "match(a where a.name='张建聪')-[e]->(b:person)<-[e2]-(c where c.name='黄强') return b limit 83"}
{"prompt": " 请帮我找出58个与'person'类型的朋友有关系的个人，以及与这些个人有同事关系的个人。", "completion": "match(a:person)-[e:friend]->(b:person)-[e2:colleague]->(c:person) return c limit 58"}
{"prompt": " 马雪认识的人。", "completion": "match(a:person where a.name = '马雪')-[e:relates]->(b:person)-[e2:knows]->(c:person) return c"}
{"prompt": " 查询同时与孙若涵和王若涵有关的人。", "completion": "match(a:person where a.name='孙若涵')-[e:colleague]-(b:person)-[e2:friend]-(c:person where c.name='王若涵') return b"}
{"prompt": " 请帮我查找李宏的父母的家庭背景。", "completion": "match(a:person where a.name='李宏')-[e:parent]->(b)-[e2:family]->(c)-[e3:parent]->(d) return d"}
{"prompt": " 一个女性，性别不是男性，知道一个人的名字，以及这个人认识的人的姓名。", "completion": "match(a:person where a.gender = 'famale' and a.gender <> 'male')-[e:knows]->(b:person)-[e2:knows]->(c:person) return b.name as b_name, c.name as c_name"}
{"prompt": " 找人月薪资，标签为person的点，返回结果。", "completion": "match(a:person where a.name = '何月') return a.salary"}
{"prompt": " 找出韩月认识的所有人和韩月有关系的人，一起列出来。", "completion": "match(a where a.name = '韩月')-[e:knows]->(b:person),(a where a.name = '韩月')<-[e2:relates]-(c:person) return a, b, c"}
{"prompt": " 查询与黄伟有家人关系且与他是同事的人。", "completion": "match(a:person where a.name = '黄伟')-[e:family]->(b:person),(a:person where a.name = '黄伟')<-[e2:colleague]-(c:person) return a, b, c"}
{"prompt": " 找出陈伟的关联人，再找出陈伟父母的其他关联人。", "completion": "match(a:person where a.name = '陈伟')-[e]-(b:person), (a:person)-[e2:parent]->(c:person) return a, b, c"}
{"prompt": " 请问能否帮我按照论坛创建时间、人数、以及按名字分组的人数进行排序，并按照人数从大到小排列呢？", "completion": "match(a:forum) return a.peopleNumber group by a.createTime, a.peopleNumber, a.name order by a.peopleNumber desc"}
{"prompt": " 请帮我查找所有和中国诗词论坛有联系的人，或者与这些人有关联的人。", "completion": "match(a:forum where n.name=中国诗词论坛)-[e:relation]->{1,2}(b:person) return b"}
{"prompt": " 找出共同拥有名称为Post_320和Post_336的点，且标签为label的节点。", "completion": "match(a where a.name = 'Post_320')-[e:has]->(b:tag)<-[e2:has]-(c where c.name = 'Post_336') return b"}
{"prompt": " 找出百度贴吧和知乎中，共同以'forum'节点标签标记的'friend'节点列表。", "completion": "match(a:forum where a.name='百度贴吧')-[e:friend]->(b)<-[e2:friend]-(c:forum where c.name='知乎') return b.name"}
{"prompt": " 找出54个与Post_495和Post_103有联系的论坛节点。", "completion": "match(a where a.name='Post_495')-[e]->(b:forum)<-[e2]-(c where c.name='Post_103') return b limit 54"}
{"prompt": " 请帮我查找32个与类型为'论坛'的地点有包含关系的帖子，并且这些帖子与包含它们的地点有'拥有'关系（即有标签）。", "completion": "match(a:forum)-[e:contain]->(b:post)-[e2:has]->(c:tag) return c limit 32"}
{"prompt": " 请问天涯论坛的帖子节点有哪些标签？", "completion": "match(a:forum where a.name = '天涯论坛')-[e:contain]->(b:post)-[e2:has]->(c:tag) return c"}
{"prompt": " 找出天涯论坛中跟历史标签有关的帖子。", "completion": "match(a:forum where a.name='天涯论坛')-[e:contain]-(b:post)-[e2:has]-(c:tag where c.name='历史') return b"}
{"prompt": " 请问黄建聪的合作伙伴是谁？", "completion": "match(a:user where a.name='黄建聪')-[e:partner]->(b)-[e2:partner]->(c)-[e3:partner]->(d) return d"}
{"prompt": " 找知网论坛", "completion": "match(a:forum where a.name = '知网') return a"}
{"prompt": " 返回标签为标签的所有点，按降序排列价值。", "completion": "match(a:tag) return a order by a.value desc"}
{"prompt": " 找李伟发的帖子，然后计算标签的价值。", "completion": "match(a:user where name = '李伟')-[e:publish]->(b:post)-[e2:has]->(c:tag) return c.value"}
{"prompt": " 找出小于16的与person有关系的用户节点，并返回这些节点薪资除以5699的值，以及salary的求和值对6347取余的值。", "completion": "match(a:person)-[e]->(b:user where b.id < 16) return b.salary / 5699, SUM(b.salary) % 6347"}
{"prompt": " 查询黄建聪发布的帖子，其他用户喜欢数量的信息。", "completion": "match(a:user where a.name='黄建聪')-[e:publish]->(b:post)<-[e2:likes]-(c:user) return COUNT(c)"}
{"prompt": " 找出喜欢Post_232的用户。", "completion": "match(a:post where a.name='Post_232')<-[e:likes]-(b:user) return b"}
{"prompt": " 查找与Post_224有拥有关系的标签，再查找关联了Post_224的拥有关系的标签。", "completion": "match(a:post where a.name = 'Post_224')-[e:has]->(b:tag),(a:post where a.name = 'Post_224')<-[e2:has]-(c:tag) return a, b, c"}
{"prompt": " 查询与知乎有关的用户，再查询包含知乎的其他人物，返回它们。", "completion": "match(a:forum where a.name = '知乎')-[e]-(b:user), (a:forum)-[e2:contain]->(c:person) return a, b, c"}
{"prompt": " 请帮我找出所有以name和value对分组course的id,并按升序排序。", "completion": "match(a:course) return a.id group by a.name, a.value order by a.id asc"}
{"prompt": " 请问文学院有哪些教师与您有亲友关系？", "completion": "match(a:department where n.name=文学院)-[e:friend]->{1,2}(b:teacher) return b"}
{"prompt": " 请问华中科技大学和重庆大学共同拥有的部门节点是什么？", "completion": "match(a where a.name = '华中科技大学')-[e:has]->(b:department)<-[e2:has]-(c where c.name = '重庆大学') return b"}
{"prompt": " 查询物理学院和计算机学院中，共同拥有标签为'department'的节点。", "completion": "match(a:department where a.name='物理学院')-[e:relation]->(b)<-[e2:relation]-(c:department where c.name='计算机学院') return b.name"}
{"prompt": " 请帮我找出与孙建国和吴建聪有关系的34位教师。", "completion": "match(a where a.name='孙建国')-[e]->(b:teacher)<-[e2]-(c where c.name='吴建聪') return b limit 34"}
{"prompt": " 请问能否帮我查询一个与标签为'大学'的点有has关系的部门，以及与这些部门有has关系的学生？", "completion": "match(a:university)-[e:has]->(b:department)-[e2:has]->(c:student) return c limit 1"}
{"prompt": " 请问能否帮我找出 'university重庆大学' 节点下的 'department' 节点下的 'student'?", "completion": "match(a:university where a.name = '重庆大学')-[e:has]->(b:department)-[e2:has]->(c:student) return c"}
{"prompt": " 与赵轩有关的电子科技大学部门", "completion": "match(a:university where a.name='电子科技大学')-[e:has]-(b:department)-[e2:has]-(c:student where c.name='赵轩') return b"}
{"prompt": " 返回物理学院相关者的相关者。", "completion": "match(a:department where a.name='物理学院')-[e:relation]->(b)-[e2:relation]->(c)-[e3:relation]->(d) return d"}
{"prompt": " 查找44到69之间大学中ID大于15的部门以及它们的教师名称。", "completion": "match(a:university where a.id > 15 and (a.id BETWEEN 44 AND 69))-[e:has]->(b:department)-[e2:has]->(c:teacher) return b.name as b_name, c.name as c_name"}
{"prompt": " 返回计算机学院标签的点的大小和价值。", "completion": "match(a:department where a.name = '计算机学院') return a.size, a.value"}
{"prompt": " 查询年龄小于等于86且ID大于等于6758或名字为何科的学生，按身高从小到大排列。", "completion": "match(a:student where (a.age <= 86 and COUNT(a.id) >= 6758) or a.name = '何科') return a order by a.height asc limit 94"}
{"prompt": " 找所有学生源点标签为student,边标签为selects的边，返回这些边targetId对101取余的和，以及weight除以115.22的值。", "completion": "match(a:student)-[e:selects]->(b) return SUM(e.targetId % 101), e.weight / 115.22"}
{"prompt": " 请帮我查询与某个大学相关的所有课程，以及这些课程的其他授课教师。", "completion": "match(a:university where a.id = '79')-[e]-(b:course)<-[e2:teach]-(c:teacher) return b,c"}
{"prompt": " 物理学院的学生被department。", "completion": "match(a:student)<-[e:has]-(b:department where b.name='物理学院') return a, b"}
{"prompt": " 返回孙伟选择的课程和他所属的部门。", "completion": "match(a where a.name = '孙伟')-[e:selects]->(b:course),(a where a.name = '孙伟')<-[e2:has]-(c:department) return a, b, c"}
{"prompt": " 返回物理学院中具有has关系的教师，再返回与物理学院具有has关系的教师。", "completion": "match(a:department where a.name = '物理学院')-[e:has]->(b:teacher),(a:department where a.name = '物理学院')<-[e2:has]-(c:teacher) return a, b, c"}
{"prompt": " 返回与土木学院相关的大学，再返回土木学院的其他教师。", "completion": "match(a:department where a.name = '土木学院')-[e]-(b:university), (a:department)-[e2:has]->(c:teacher) return a, b, c"}
{"prompt": "请帮我查找和person孙思思有1跳或2跳关系的person", "completion": "match(a:person where a.name='孙思思')-[e]->{1,2}(b:person) return b"}
{"prompt": "查找从person李宏出发,经过类型为colleague的边,走1到4跳到达的person点", "completion": "match(a:person where a.name='李宏')-[e:colleague]->{1,4}(b:person) return b"}
{"prompt": "找出所有和名为徐国强的person有恋人关系,或有恋人的恋人关系的person", "completion": "match(a:person where n.name=徐国强)-[e:lover]->{1,2}(b:person) return b"}
{"prompt": "返回所有person的家人,或其家人的家人", "completion": "match(a:person)-[e:family]->{1,2}(b) return b"}
{"prompt": "找出person的1跳的环", "completion": "match(a:person)->{0,0}(b)->(a) return a.id, b.id as b_id"}
{"prompt": "查询与person吴梅有家人关系的2度以内的环", "completion": "match(a:person where name = '吴梅')-[e:family]->{0,1}(b)->(a) return a.id, b.id as b_id"}
{"prompt": "查询person的三角的环,边标签为朋友, 并返回这些点的id", "completion": "match(a:person)-[e:friend]->(b)-[e2:friend]-(c)->(a) return a,b.id as b_id,c.id as c_id"}
{"prompt": "查找和company华为有3到5跳关系的person", "completion": "match(a:company where a.name='华为')-[e]->{3,5}(b:person) return b"}
{"prompt": "返回从person徐建国出发,经过label为购买的边,走2跳或3跳到达的软件点", "completion": "match(a:person where a.name='徐建国')-[e:buy]->{2,3}(b:software) return b"}
{"prompt": "请帮我找出所有和名为Hive的software有partner关系,或有partner的partner关系的software", "completion": "match(a:software where n.name=Hive)-[e:partner]->{1,2}(b:software) return b"}
{"prompt": "找出所有公司的伙伴,或其伙伴的伙伴", "completion": "match(a:company)-[e:partner]->{1,2}(b) return b"}
{"prompt": "帮我查询公司的3跳的环", "completion": "match(a:company)->{2,2}(b)->(a) return a.id, b.id as b_id"}
{"prompt": "查找与software Spark有uses关系的3跳以内的环", "completion": "match(a:software where name = 'Spark')-[e:uses]->{0,2}(b)->(a) return a.id, b.id as b_id"}
{"prompt": "返回person的三角的环,边类型为属于, 并返回这些点的id", "completion": "match(a:person)-[e:belong]->(b)-[e2:belong]-(c)->(a) return a,b.id as b_id,c.id as c_id"}
{"prompt": "返回所有和药品枇杷糖浆有3到5跳关系的药品", "completion": "match(a:medicine where a.name='枇杷糖浆')-[e]->{3,5}(b:medicine) return b"}
{"prompt": "找出从病人陈雪出发,经过标签等于接受的边,走3到5跳到达的处方点", "completion": "match(a:patient where a.name='陈雪')-[e:accept]->{3,5}(b:prescription) return b"}
{"prompt": "请帮我找出和名为皮肤科的部门有伙伴关系,或有伙伴的伙伴关系的医生", "completion": "match(a:department where n.name=皮肤科)-[e:partner]->{1,2}(b:doctor) return b"}
{"prompt": "帮我查询patient的relation,或其relation的relation", "completion": "match(a:patient)-[e:relation]->{1,2}(b) return b"}
{"prompt": "找出部门的1度以内的环", "completion": "match(a:department)->{0,0}(b)->(a) return a.id, b.id as b_id"}
{"prompt": "找出与doctor黄思琪有belong关系的1度以内的环", "completion": "match(a:doctor where name = '黄思琪')-[e:belong]->{0,0}(b)->(a) return a.id, b.id as b_id"}
{"prompt": "请帮我查找处方的三角的环,边类型是包含, 并返回这些点的id", "completion": "match(a:prescription)-[e:contain]->(b)-[e2:contain]-(c)->(a) return a,b.id as b_id,c.id as c_id"}
{"prompt": "给出全部和部门法学院有1度关系的部门", "completion": "match(a:department where a.name='法学院')-[e]->{1,1}(b:department) return b"}
{"prompt": "请帮我查找从teacher郑建国出发,经过label为teach的边,走3到6跳到达的course点", "completion": "match(a:teacher where a.name='郑建国')-[e:teach]->{3,6}(b:course) return b"}
{"prompt": "返回和名为王强的学生有朋友关系,或有朋友的朋友关系的课程", "completion": "match(a:student where n.name=王强)-[e:friend]->{1,2}(b:course) return b"}
{"prompt": "请帮我查找全部教师的相关者,或其相关者的相关者", "completion": "match(a:teacher)-[e:relation]->{1,2}(b) return b"}
{"prompt": "查找教师的3跳以内的环", "completion": "match(a:teacher)->{0,2}(b)->(a) return a.id, b.id as b_id"}
{"prompt": "查询与教师黄红有教关系的1度的环", "completion": "match(a:teacher where name = '黄红')-[e:teach]->{0,0}(b)->(a) return a.id, b.id as b_id"}
{"prompt": "返回部门的三角的环,边类型为拥有, 并返回这些点的id", "completion": "match(a:department)-[e:has]->(b)-[e2:has]-(c)->(a) return a,b.id as b_id,c.id as c_id"}
{"prompt": "查找所有和city武汉有2跳关系的university", "completion": "match(a:city where a.name='武汉')-[e]->{2,2}(b:university) return b"}
{"prompt": "查找从公司美团出发,经过标签为属于的边,走3跳或4跳到达的城市点", "completion": "match(a:company where a.name='美团')-[e:belong]->{3,4}(b:city) return b"}
{"prompt": "找出和名为北京大学的大学有朋友关系,或有朋友的朋友关系的公司", "completion": "match(a:university where n.name=北京大学)-[e:friend]->{1,2}(b:company) return b"}
{"prompt": "查找城市的朋友,或其朋友的朋友", "completion": "match(a:city)-[e:friend]->{1,2}(b) return b"}
{"prompt": "返回city的3跳以内的环", "completion": "match(a:city)->{0,2}(b)->(a) return a.id, b.id as b_id"}
{"prompt": "帮我查询与城市伦敦有属于关系的3度以内的环", "completion": "match(a:city where name = '伦敦')-[e:belong]->{0,2}(b)->(a) return a.id, b.id as b_id"}
{"prompt": "请帮我找出城市的三角的环,边类型为包含, 并返回这些点的id", "completion": "match(a:city)-[e:contain]->(b)-[e2:contain]-(c)->(a) return a,b.id as b_id,c.id as c_id"}
{"prompt": "请帮我查找和评论Comment_323有2到5度关系的标签", "completion": "match(a:comment where a.name='Comment_323')-[e]->{2,5}(b:tag) return b"}
{"prompt": "找出从person赵若涵出发,经过类型为观看的边,走3到5跳到达的电影点", "completion": "match(a:person where a.name='赵若涵')-[e:watch]->{3,5}(b:film) return b"}
{"prompt": "找出所有和名为好视影院的cinema有partner关系,或有partner的partner关系的film", "completion": "match(a:cinema where n.name=好视影院)-[e:partner]->{1,2}(b:film) return b"}
{"prompt": "找出所有person的朋友,或其朋友的朋友", "completion": "match(a:person)-[e:friend]->{1,2}(b) return b"}
{"prompt": "返回film的2跳以内的环", "completion": "match(a:film)->{0,1}(b)->(a) return a.id, b.id as b_id"}
{"prompt": "给出与cinema好视影院有releases关系的3跳的环", "completion": "match(a:cinema where name = '好视影院')-[e:releases]->{2,2}(b)->(a) return a.id, b.id as b_id"}
{"prompt": "查询电影的三角的环,边类型为拥有, 并返回这些点的id", "completion": "match(a:film)-[e:has]->(b)-[e2:has]-(c)->(a) return a,b.id as b_id,c.id as c_id"}
{"prompt": "给出全部和person徐红有2度或3度关系的person", "completion": "match(a:person where a.name='徐红')-[e]->{2,3}(b:person) return b"}
{"prompt": "给出从person王思琪出发,经过类型为认识的边,走1度到达的person点", "completion": "match(a:person where a.name='王思琪')-[e:knows]->{1,1}(b:person) return b"}
{"prompt": "找出全部和名为陈月的person有relation关系,或有relation的relation关系的person", "completion": "match(a:person where n.name=陈月)-[e:relation]->{1,2}(b:person) return b"}
{"prompt": "查询所有person的伙伴,或其伙伴的伙伴", "completion": "match(a:person)-[e:partner]->{1,2}(b) return b"}
{"prompt": "给出person的3跳的环", "completion": "match(a:person)->{2,2}(b)->(a) return a.id, b.id as b_id"}
{"prompt": "请帮我找出与person郑国强有认识关系的2跳的环", "completion": "match(a:person where name = '郑国强')-[e:knows]->{1,1}(b)->(a) return a.id, b.id as b_id"}
{"prompt": "帮我查询person的三角的环,边标签等于knows, 并返回这些点的id", "completion": "match(a:person)-[e:knows]->(b)-[e2:knows]-(c)->(a) return a,b.id as b_id,c.id as c_id"}
{"prompt": "找出全部和post Post_351有1跳关系的tag", "completion": "match(a:post where a.name='Post_351')-[e]->{1,1}(b:tag) return b"}
{"prompt": "给出从post Post_453出发,经过label为has的边,走1跳到达的tag点", "completion": "match(a:post where a.name='Post_453')-[e:has]->{1,1}(b:tag) return b"}
{"prompt": "找出和名为Post_397的帖子有相关者关系,或有相关者的相关者关系的标签", "completion": "match(a:post where n.name=Post_397)-[e:relation]->{1,2}(b:tag) return b"}
{"prompt": "请帮我查找论坛的朋友,或其朋友的朋友", "completion": "match(a:forum)-[e:friend]->{1,2}(b) return b"}
{"prompt": "请帮我找出用户的2度以内的环", "completion": "match(a:user)->{0,1}(b)->(a) return a.id, b.id as b_id"}
{"prompt": "给出与用户陈伟有发布关系的1跳以内的环", "completion": "match(a:user where name = '陈伟')-[e:publish]->{0,0}(b)->(a) return a.id, b.id as b_id"}
{"prompt": "返回论坛的三角的环,边标签等于包含, 并返回这些点的id", "completion": "match(a:forum)-[e:contain]->(b)-[e2:contain]-(c)->(a) return a,b.id as b_id,c.id as c_id"}
{"prompt": "请帮我查找和读者赵思琪有1到3跳关系的读者", "completion": "match(a:reader where a.name='赵思琪')-[e]->{1,3}(b:reader) return b"}
{"prompt": "查询从编辑黄科出发,经过label为发布的边,走2跳到达的书点", "completion": "match(a:publisher where a.name='黄科')-[e:publish]->{2,2}(b:book) return b"}
{"prompt": "查询全部和名为郑若涵的作家有相关者关系,或有相关者的相关者关系的作家", "completion": "match(a:author where n.name=郑若涵)-[e:relation]->{1,2}(b:author) return b"}
{"prompt": "请帮我找出作家的朋友,或其朋友的朋友", "completion": "match(a:author)-[e:friend]->{1,2}(b) return b"}
{"prompt": "查询编辑的1跳以内的环", "completion": "match(a:publisher)->{0,0}(b)->(a) return a.id, b.id as b_id"}
{"prompt": "帮我查询与书百年孤独有引用关系的3跳的环", "completion": "match(a:book where name = '百年孤独')-[e:refers]->{2,2}(b)->(a) return a.id, b.id as b_id"}
{"prompt": "找出作家的三角的环,边标签等于撰写, 并返回这些点的id", "completion": "match(a:author)-[e:write]->(b)-[e2:write]-(c)->(a) return a,b.id as b_id,c.id as c_id"}
{"prompt": "请帮我查找和贷款loan_58有1到3度关系的公司", "completion": "match(a:loan where a.name='loan_58')-[e]->{1,3}(b:company) return b"}
{"prompt": "查找从account XXD出发,经过标签为transfer的边,走2到4度到达的account点", "completion": "match(a:account where a.name='XXD')-[e:transfer]->{2,4}(b:account) return b"}
{"prompt": "请帮我查找和名为王红的person有朋友关系,或有朋友的朋友关系的贷款", "completion": "match(a:person where n.name=王红)-[e:friend]->{1,2}(b:loan) return b"}
{"prompt": "给出loan的relation,或其relation的relation", "completion": "match(a:loan)-[e:relation]->{1,2}(b) return b"}
{"prompt": "帮我查询公司的2跳的环", "completion": "match(a:company)->{1,1}(b)->(a) return a.id, b.id as b_id"}
{"prompt": "帮我查询与loan loan_52有deposit关系的1度的环", "completion": "match(a:loan where name = 'loan_52')-[e:deposit]->{0,0}(b)->(a) return a.id, b.id as b_id"}
{"prompt": "查询person的三角的环,边label为申请, 并返回这些点的id", "completion": "match(a:person)-[e:apply]->(b)-[e2:apply]-(c)->(a) return a,b.id as b_id,c.id as c_id"}
{"prompt": "找出和pullRequest PR-153有1度或2度关系的user", "completion": "match(a:pullRequest where a.name='PR-153')-[e]->{1,2}(b:user) return b"}
{"prompt": "给出从pullRequest PR-128出发,经过标签为belong的边,走3到6跳到达的repository点", "completion": "match(a:pullRequest where a.name='PR-128')-[e:belong]->{3,6}(b:repository) return b"}
{"prompt": "查找所有和名为PR-153的合并请求有相关者关系,或有相关者的相关者关系的仓库", "completion": "match(a:pullRequest where n.name=PR-153)-[e:relation]->{1,2}(b:repository) return b"}
{"prompt": "请帮我查找repository的partner,或其partner的partner", "completion": "match(a:repository)-[e:partner]->{1,2}(b) return b"}
{"prompt": "查找合并请求的3度以内的环", "completion": "match(a:pullRequest)->{0,2}(b)->(a) return a.id, b.id as b_id"}
{"prompt": "请帮我找出与用户何伟有创造关系的3度的环", "completion": "match(a:user where name = '何伟')-[e:creates]->{2,2}(b)->(a) return a.id, b.id as b_id"}
{"prompt": "查询合并请求的三角的环,边标签为属于, 并返回这些点的id", "completion": "match(a:pullRequest)-[e:belong]->(b)-[e2:belong]-(c)->(a) return a,b.id as b_id,c.id as c_id"}
{"prompt": "请帮我查找全部和商品键盘有1跳关系的卖家", "completion": "match(a:goods where a.name='键盘')-[e]->{1,1}(b:seller) return b"}
{"prompt": "给出从买家陈伟出发,经过标签等于咨询的边,走1到3度到达的卖家点", "completion": "match(a:buyer where a.name='陈伟')-[e:consult]->{1,3}(b:seller) return b"}
{"prompt": "查询所有和名为周建国的seller有friend关系,或有friend的friend关系的goods", "completion": "match(a:seller where n.name=周建国)-[e:friend]->{1,2}(b:goods) return b"}
{"prompt": "查找全部卖家的相关者,或其相关者的相关者", "completion": "match(a:seller)-[e:relation]->{1,2}(b) return b"}
{"prompt": "查找goods的1度的环", "completion": "match(a:goods)->{0,0}(b)->(a) return a.id, b.id as b_id"}
{"prompt": "帮我查询与买家孙科有取消关系的1跳以内的环", "completion": "match(a:buyer where name = '孙科')-[e:cancel]->{0,0}(b)->(a) return a.id, b.id as b_id"}
{"prompt": "请帮我查找buyer的三角的环,边标签为consult, 并返回这些点的id", "completion": "match(a:buyer)-[e:consult]->(b)-[e2:consult]-(c)->(a) return a,b.id as b_id,c.id as c_id"}
{"prompt": "查找所有标签等于person的点", "completion": "match(a:person) return a"}
{"prompt": "请帮我查找标签等于person的点,返回39个", "completion": "match(a:person) return a limit 39"}
{"prompt": "查找满足条件gender是male的节点", "completion": "match(a where a.gender = 'male') return a"}
{"prompt": "帮我查询前58个salary不为空的person", "completion": "match(a:person where (a.salary is not null)) return a limit 58"}
{"prompt": "返回类型是person,名为杜轩的点,返回这些点的height,salary,gender", "completion": "match(a:person where a.name = '杜轩') return a.height, a.salary, a.gender"}
{"prompt": "请帮我找出id为103的点的薪资", "completion": "match(a where a.id = 103) return a.salary"}
{"prompt": "请帮我找出类型为person或company或software的点", "completion": "match(a:person | company | software) return a"}
{"prompt": "查询类型为software的点,返回191个", "completion": "match(a:software) return a limit 191"}
{"prompt": "请帮我查找满足条件价值为空或人数不是677或人数大于895的节点", "completion": "match(a where (a.value is null) or a.peopleNumber <> 677 or a.peopleNumber > 895) return a"}
{"prompt": "请帮我找出前195个gender不是male且age小于83的person", "completion": "match(a:person where a.gender <> 'male' and a.age < 83) return a limit 195"}
{"prompt": "查询标签为公司,名为谷歌的点,返回这些点的规格,价值", "completion": "match(a:company where a.name = '谷歌') return a.scale, a.value"}
{"prompt": "查找id为105的点的stars,name,value", "completion": "match(a where a.id = 105) return a.stars, a.name, a.value"}
{"prompt": "请帮我查找全部label为医生或部门或药品的点", "completion": "match(a:doctor | department | medicine) return a"}
{"prompt": "查询label为病人的点,返回186个", "completion": "match(a:patient) return a limit 186"}
{"prompt": "查询名字等于Prescription_322,名字不等于Prescription_496,或权重等于597的节点", "completion": "match(a where (a.name = 'Prescription_322' and a.name <> 'Prescription_496') or a.weight = 597) return a"}
{"prompt": "查找前192个满足条件id在75到86之间,id大于等于8,id不为空的prescription", "completion": "match(a:prescription where (a.id BETWEEN 75 AND 86) and a.id >= 8 and (a.id is not null)) return a limit 192"}
{"prompt": "查找label为部门,名为外科的点,返回这些点的名字,地址", "completion": "match(a:department where a.name = '外科') return a.name, a.address"}
{"prompt": "找出id为196的点的名字,创建时间,权重", "completion": "match(a where a.id = 196) return a.name, a.createTime, a.weight"}
{"prompt": "返回标签等于teacher的点", "completion": "match(a:teacher) return a"}
{"prompt": "查找标签为部门的点,返回6个", "completion": "match(a:department) return a limit 6"}
{"prompt": "请帮我查找id的个数大于6473且名字不等于赵红的节点", "completion": "match(a where COUNT(a.id) > 6473 and a.name <> '赵红') return a"}
{"prompt": "找出前172个id大于等于32,id的数量大于等于9150,或id为空的学生", "completion": "match(a:student where (a.id >= 32 and COUNT(a.id) >= 9150) or (a.id is null)) return a limit 172"}
{"prompt": "返回标签等于部门,名为艺术学院的点,返回这些点的名字,价值", "completion": "match(a:department where a.name = '艺术学院') return a.name, a.value"}
{"prompt": "返回id为125的点的身高,名字", "completion": "match(a where a.id = 125) return a.height, a.name"}
{"prompt": "给出所有类型为company的点", "completion": "match(a:company) return a"}
{"prompt": "请帮我找出类型是公司的点,返回49个", "completion": "match(a:company) return a limit 49"}
{"prompt": "请帮我找出满足条件value大于736且peopleNumber为空,或id的个数乘7小于等于95的节点", "completion": "match(a where (a.value > 736 and (a.peopleNumber is null)) or COUNT(a.id) * 7 <= 95) return a"}
{"prompt": "请帮我找出前114个等级大于1或名字等于清华大学或价值除704大于等于24的大学", "completion": "match(a:university where a.level > 1 or a.name = '清华大学' or a.value / 704 >= 24) return a limit 114"}
{"prompt": "查询类型为城市,名为东京的点,返回这些点的id,名字", "completion": "match(a:city where a.name = '东京') return a.id, a.name"}
{"prompt": "查询id为82的点的名字", "completion": "match(a where a.id = 82) return a.name"}
{"prompt": "查询全部标签为电影的点", "completion": "match(a:film) return a"}
{"prompt": "帮我查询类型是comment的点,返回115个", "completion": "match(a:comment) return a limit 115"}
{"prompt": "请帮我找出满足条件id小于等于86或id大于35或id不为空的节点", "completion": "match(a where a.id <= 86 or a.id > 35 or (a.id is not null)) return a"}
{"prompt": "帮我查询前144个满足条件size小于等于471的cinema", "completion": "match(a:cinema where a.size <= 471) return a limit 144"}
{"prompt": "请帮我查找类型是person,名为吴强的点,返回这些点的性别,身高", "completion": "match(a:person where a.name = '吴强') return a.gender, a.height"}
{"prompt": "查询id为171的点的创建时间,名字,id", "completion": "match(a where a.id = 171) return a.createTime, a.name, a.id"}
{"prompt": "查找所有类型是person的点", "completion": "match(a:person) return a"}
{"prompt": "请帮我找出类型是person的点,返回145个", "completion": "match(a:person) return a limit 145"}
{"prompt": "找出满足条件薪资在1481到4376之间的节点", "completion": "match(a where (a.salary BETWEEN 1481 AND 4376)) return a"}
{"prompt": "找出前193个满足条件name是黄宏的person", "completion": "match(a:person where a.name = '黄宏') return a limit 193"}
{"prompt": "找出类型是person,名为杜思琪的点,返回这些点的age,name", "completion": "match(a:person where a.name = '杜思琪') return a.age, a.name"}
{"prompt": "找出id为123的点的名字", "completion": "match(a where a.id = 123) return a.name"}
{"prompt": "请帮我查找所有label为标签或用户的点", "completion": "match(a:tag | user) return a"}
{"prompt": "请帮我找出标签等于帖子的点,返回8个", "completion": "match(a:post) return a limit 8"}
{"prompt": "查询满足条件value大于等于320的节点", "completion": "match(a where a.value >= 320) return a"}
{"prompt": "查找前132个名字不是历史或id小于28的标签", "completion": "match(a:tag where a.name <> '历史' or a.id < 28) return a limit 132"}
{"prompt": "帮我查询类型为用户,名为李建聪的点,返回这些点的薪资,名字,id", "completion": "match(a:user where a.name = '李建聪') return a.salary, a.name, a.id"}
{"prompt": "请帮我找出id为72的点的名字,字数", "completion": "match(a where a.id = 72) return a.name, a.wordCount"}
{"prompt": "返回全部类型是编辑或作家的点", "completion": "match(a:publisher | author) return a"}
{"prompt": "请帮我找出标签等于作家的点,返回97个", "completion": "match(a:author) return a limit 97"}
{"prompt": "给出id大于30且身高不为空的节点", "completion": "match(a where a.id > 30 and (a.height is not null)) return a"}
{"prompt": "查询前52个薪资的最小值大于178或id小于99的读者", "completion": "match(a:reader where MIN(a.salary) > 178 or a.id < 99) return a limit 52"}
{"prompt": "请帮我找出类型是读者,名为赵轩的点,返回这些点的名字,薪资", "completion": "match(a:reader where a.name = '赵轩') return a.name, a.salary"}
{"prompt": "找出id为33的点的id,身高", "completion": "match(a where a.id = 33) return a.id, a.height"}
{"prompt": "请帮我查找全部类型是person或公司的点", "completion": "match(a:person | company) return a"}
{"prompt": "帮我查询类型是账号的点,返回18个", "completion": "match(a:account) return a limit 18"}
{"prompt": "给出规格为small的节点", "completion": "match(a where a.scale = 'small') return a"}
{"prompt": "返回前21个id不是66的贷款", "completion": "match(a:loan where a.id <> 66) return a limit 21"}
{"prompt": "请帮我找出label为贷款,名为loan_32的点,返回这些点的id,金额,权重", "completion": "match(a:loan where a.name = 'loan_32') return a.id, a.amount, a.weight"}
{"prompt": "帮我查询id为63的点的身高,年龄", "completion": "match(a where a.id = 63) return a.height, a.age"}
{"prompt": "请帮我查找全部类型是pullRequest的点", "completion": "match(a:pullRequest) return a"}
{"prompt": "请帮我查找类型是事项的点,返回178个", "completion": "match(a:issue) return a limit 178"}
{"prompt": "查找满足条件变更文件数在135到946之间或变更文件数大于等于10或变更文件数大于等于395的节点", "completion": "match(a where (a.changeFileNumber BETWEEN 135 AND 946) or a.changeFileNumber >= 10 or a.changeFileNumber >= 395) return a"}
{"prompt": "返回前183个满足条件创建时间不等于2001年03月26日或名字为PR-379或id为空的合并请求", "completion": "match(a:pullRequest where a.createTime <> '2001-03-26' or a.name = 'PR-379' or (a.id is null)) return a limit 183"}
{"prompt": "给出类型为仓库,名为Tugraph的点,返回这些点的语言,权重", "completion": "match(a:repository where a.name = 'Tugraph') return a.lang, a.weight"}
{"prompt": "请帮我查找id为72的点的身高,性别", "completion": "match(a where a.id = 72) return a.height, a.gender"}
{"prompt": "给出所有类型为goods的点", "completion": "match(a:goods) return a"}
{"prompt": "给出标签等于商品的点,返回168个", "completion": "match(a:goods) return a limit 168"}
{"prompt": "找出价值小于等于644的节点", "completion": "match(a where a.value <= 644) return a"}
{"prompt": "请帮我找出前42个名字是Order_494的订单", "completion": "match(a:orders where a.name = 'Order_494') return a limit 42"}
{"prompt": "返回标签为seller,名为陈雪的点,返回这些点的height", "completion": "match(a:seller where a.name = '陈雪') return a.height"}
{"prompt": "请帮我找出id为167的点的id,名字,价值", "completion": "match(a where a.id = 167) return a.id, a.name, a.value"}
{"prompt": "请帮我找出前193个类型为朋友的边", "completion": "match(a)-[e:friend]->(b) return e limit 193"}
{"prompt": "查询label为父母,且满足条件权重为空或权重在122.59到167.02之间,且f1不等于false的边", "completion": "match(a)-[e:parent where ((e.weight is null) or (e.weight BETWEEN 122.59 AND 167.02)) and e.f1 <> false]->(b) return e"}
{"prompt": "找出所有源点label为person,目标点label为person,label为person的边", "completion": "match(a:person)-[e:person]->(b:person) return e"}
{"prompt": "查询源点名字不是周雪,年龄在15到33之间,目标点年龄小于30,年龄小于3,且类型是家人的边", "completion": "match(a where a.name <> '周雪' and (a.age BETWEEN 15 AND 33))-[e:family]->(b where b.age < 30 and b.age < 3) return e"}
{"prompt": "帮我查询全部源点类型是person,边类型是父母,并且满足条件权重等于139.97且源点id大于等于151且源点id不是123的边", "completion": "match(a:person)-[e:parent where e.weight = 139.97 and e.srcId >= 151 and e.srcId <> 123]->(b) return e"}
{"prompt": "查询源点name等于何宏,边label为colleague,且srcId大于等于110且f0的最小值不等于188的边,返回这些边的weight的最大值除151.86的值", "completion": "match(a where a.name = '何宏')-[e:colleague where e.srcId >= 110 and MIN(e.f0) <> 188]->(b) return MAX(e.weight) / 151.86"}
{"prompt": "查找前70个标签为employee的边", "completion": "match(a)-[e:employee]->(b) return e limit 70"}
{"prompt": "找出类型为使用,并且满足条件f0的最大值减923加141.42对源点id取余不是35且f1是true,f0不为空的边", "completion": "match(a)-[e:uses where MAX(e.f0) - 923 + 141.42 % e.srcId <> 35 and e.f1 = true and (e.f0 is not null)]->(b) return e"}
{"prompt": "找出全部源点类型为软件,目标点类型为软件,类型为person或公司或软件的边", "completion": "match(a:software)-[e:person | company | software]->(b:software) return e"}
{"prompt": "查询源点满足条件id不是48,目标点满足条件id大于66或id小于等于83或stars为空,且类型是uses的边", "completion": "match(a where a.id <> 48)-[e:uses]->(b where b.id > 66 or b.id <= 83 or (b.stars is null)) return e"}
{"prompt": "查找所有源点标签等于软件,边标签等于使用,以及满足条件源点id对源点id取余加f0小于等于119或f0大于等于824,且f0不为空的边", "completion": "match(a:software)-[e:uses where (e.srcId % e.srcId + e.f0 <= 119 or e.f0 >= 824) and (e.f0 is not null)]->(b) return e"}
{"prompt": "查询源点年龄为空,边标签为购买,且满足条件f1不等于true的边,返回这些边的f0除502的值", "completion": "match(a where (a.age is null))-[e:buy where e.f1 <> true]->(b) return e.f0 / 502"}
{"prompt": "给出前72个类型为belong的边", "completion": "match(a)-[e:belong]->(b) return e limit 72"}
{"prompt": "请帮我查找类型为belong,且满足条件f0在910到980之间的边", "completion": "match(a)-[e:belong where (e.f0 BETWEEN 910 AND 980)]->(b) return e"}
{"prompt": "帮我查询源点标签等于医生,目标点标签等于处方,标签等于部门或病人的边", "completion": "match(a:doctor)-[e:department | patient]->(b:prescription) return e"}
{"prompt": "查找所有源点权重为空,权重小于等于511,或权重小于等于665,目标点id在80到93之间,且标签为包含的边", "completion": "match(a where ((a.weight is null) and a.weight <= 511) or a.weight <= 665)-[e:contain]->(b where (b.id BETWEEN 80 AND 93)) return e"}
{"prompt": "请帮我查找全部源点标签等于医生,边标签等于创造,以及f0不是109.06或f0在771到813之间,且权重小于180.81的边", "completion": "match(a:doctor)-[e:creates where (e.f0 <> 109.06 or (e.f0 BETWEEN 771 AND 813)) and e.weight < 180.81]->(b) return e"}
{"prompt": "帮我查询源点创建时间是2006年10月29日,创建时间不是2029年07月05日,边类型为包含,且满足条件权重为空或目标点id不为空或f0为空的边,返回这些边的权重除165.88的最大值", "completion": "match(a where a.createTime = '2006-10-29' and a.createTime <> '2029-07-05')-[e:contain where (e.weight is null) or (e.targetId is not null) or (e.f0 is null)]->(b) return MAX(e.weight / 165.88)"}
{"prompt": "给出前2个类型是拥有的边", "completion": "match(a)-[e:has]->(b) return e limit 2"}
{"prompt": "请帮我找出类型为belong,并且满足条件weight大于138.31的边", "completion": "match(a)-[e:belong where e.weight > 138.31]->(b) return e"}
{"prompt": "请帮我找出全部源点标签为课程,目标点标签为部门,标签为大学或课程或部门的边", "completion": "match(a:course)-[e:university | course | department]->(b:department) return e"}
{"prompt": "返回所有源点满足条件age不是38,height大于等于158,id小于等于1200,目标点满足条件courseHour是22,且标签为teach的边", "completion": "match(a where a.age <> 38 and a.height >= 158 and a.id <= 1200)-[e:teach]->(b where b.courseHour = 22) return e"}
{"prompt": "给出所有源点类型是课程,边类型是属于,并且权重为空,目标点id大于101且权重大于等于124.76的边", "completion": "match(a:course)-[e:belong where (e.weight is null) and e.targetId > 101 and e.weight >= 124.76]->(b) return e"}
{"prompt": "返回源点id在20到38之间或id不为空,且大小在52到81之间,边类型是拥有,且权重小于等于193.92的边,返回这些边的f0加524的值", "completion": "match(a where ((a.id BETWEEN 20 AND 38) or (a.id is not null)) and (a.size BETWEEN 52 AND 81))-[e:has where e.weight <= 193.92]->(b) return e.f0 + 524"}
{"prompt": "查询前20个标签为属于的边", "completion": "match(a)-[e:belong]->(b) return e limit 20"}
{"prompt": "给出label为belong,并且f0为空的边", "completion": "match(a)-[e:belong where (e.f0 is null)]->(b) return e"}
{"prompt": "请帮我查找全部源点类型为城市,目标点类型为大学,类型为城市或国家或公司的边", "completion": "match(a:city)-[e:city | country | company]->(b:university) return e"}
{"prompt": "帮我查询全部源点满足条件peopleNumber等于2164且area在46266到91524之间,目标点满足条件value不为空,peopleNumber不等于84061,或id不是99555,且类型是belong的边", "completion": "match(a where a.peopleNumber = 2164 and (a.area BETWEEN 46266 AND 91524))-[e:belong]->(b where ((b.value is not null) and b.peopleNumber <> 84061) or b.id <> 99555) return e"}
{"prompt": "帮我查询源点label为university,边label为belong,且f1不等于true且f0大于等于950的边", "completion": "match(a:university)-[e:belong where e.f1 <> true and e.f0 >= 950]->(b) return e"}
{"prompt": "查找源点name不是北京,name为武汉,或value是267,边标签为contain,且srcId大于93的边,返回这些边的srcId的个数乘srcId的个数", "completion": "match(a where (a.name <> '北京' and a.name = '武汉') or a.value = 267)-[e:contain where e.srcId > 93]->(b) return COUNT(COUNT(e.srcId) * e.srcId)"}
{"prompt": "请帮我查找前156个标签等于创造的边", "completion": "match(a)-[e:creates]->(b) return e limit 156"}
{"prompt": "返回label为拥有,以及满足条件f0小于851或f0大于等于834的边", "completion": "match(a)-[e:has where e.f0 < 851 or e.f0 >= 834]->(b) return e"}
{"prompt": "请帮我查找全部源点标签为person,目标点标签为film,标签为person或tag或comment的边", "completion": "match(a:person)-[e:person | tag | comment]->(b:film) return e"}
{"prompt": "请帮我查找源点薪资在4275到5919之间,目标点id小于等于39,创建时间为2017年06月04日,或字数大于等于756,且标签为喜欢的边", "completion": "match(a where (a.salary BETWEEN 4275 AND 5919))-[e:likes]->(b where (b.id <= 39 and b.createTime = '2017-06-04') or b.wordCount >= 756) return e"}
{"prompt": "查询源点标签等于person,边标签等于喜欢,且满足条件源点id大于等于82或f1不等于true或f0不是866的边", "completion": "match(a:person)-[e:likes where e.srcId >= 82 or e.f1 <> true or e.f0 <> 866]->(b) return e"}
{"prompt": "请帮我找出源点name为绿巨人,边标签等于has,且满足条件weight大于等于148.17,weight不是134.19的边,返回这些边的srcId减194加54乘194.63的个数", "completion": "match(a where a.name = '绿巨人')-[e:has where e.weight >= 148.17 and e.weight <> 134.19]->(b) return COUNT((e.srcId - 194 + 54) * 194.63)"}
{"prompt": "查找前73个类型为喜欢的边", "completion": "match(a)-[e:likes]->(b) return e limit 73"}
{"prompt": "找出标签为认识,以及源点id大于等于139的边", "completion": "match(a)-[e:knows where e.srcId >= 139]->(b) return e"}
{"prompt": "请帮我查找源点标签为person,目标点标签为person,标签为person的边", "completion": "match(a:person)-[e:person]->(b:person) return e"}
{"prompt": "返回全部源点满足条件性别不等于famale,目标点满足条件名字不是何月,且标签为支付的边", "completion": "match(a where a.gender <> 'famale')-[e:pay]->(b where b.name <> '何月') return e"}
{"prompt": "查询全部源点类型是person,边类型是喜欢,且目标点id不为空的边", "completion": "match(a:person)-[e:likes where (e.targetId is not null)]->(b) return e"}
{"prompt": "返回源点薪资不是9283或性别的最大值小于75,边类型是支付,且时间戳为2024年02月27日或目标点id在25到31之间或f0小于715的边,返回这些边的srcId的最小值乘119的数量", "completion": "match(a where a.salary <> 9283 or MAX(a.gender) < 75)-[e:pay where e.timeStamp = '2024-02-27' or (e.targetId BETWEEN 25 AND 31) or e.f0 < 715]->(b) return COUNT(MIN(e.srcId) * 119)"}
{"prompt": "请帮我查找前83个类型为包含的边", "completion": "match(a)-[e:contain]->(b) return e limit 83"}
{"prompt": "请帮我查找标签等于contain,且weight小于等于165.10的边", "completion": "match(a)-[e:contain where e.weight <= 165.10]->(b) return e"}
{"prompt": "查询所有源点label为用户,目标点label为帖子,label为标签或用户的边", "completion": "match(a:user)-[e:tag | user]->(b:post) return e"}
{"prompt": "找出所有源点满足条件gender不是male或age大于83,目标点满足条件value大于568,lang是Japanese,且类型是publish的边", "completion": "match(a where a.gender <> 'male' or a.age > 83)-[e:publish]->(b where b.value > 568 and b.lang = 'Japanese') return e"}
{"prompt": "查询源点类型为用户,边类型为喜欢,且满足条件目标点id小于162或时间戳不等于1996年06月01日的边", "completion": "match(a:user)-[e:likes where e.targetId < 162 or e.timeStamp <> '1996-06-01']->(b) return e"}
{"prompt": "请帮我找出源点名字等于天涯论坛,边标签为包含,且源点id小于等于89的边,返回这些边的源点id乘78的最大值", "completion": "match(a where a.name = '天涯论坛')-[e:contain where e.srcId <= 89]->(b) return MAX(e.srcId * 78)"}
{"prompt": "给出前85个标签等于引用的边", "completion": "match(a)-[e:refers]->(b) return e limit 85"}
{"prompt": "给出label为撰写,以及满足条件权重在143.78到169.11之间的边", "completion": "match(a)-[e:write where (e.weight BETWEEN 143.78 AND 169.11)]->(b) return e"}
{"prompt": "找出全部源点类型为编辑,目标点类型为书,类型为作家或书的边", "completion": "match(a:publisher)-[e:author | book]->(b:book) return e"}
{"prompt": "给出全部源点wordCount小于等于104,目标点wordCount大于11或createTime是2031年08月12日或id大于94,且类型是refers的边", "completion": "match(a where a.wordCount <= 104)-[e:refers]->(b where b.wordCount > 11 or b.createTime = '2031-08-12' or b.id > 94) return e"}
{"prompt": "给出源点label为读者,边label为喜欢,并且满足条件f1不等于true的边", "completion": "match(a:reader)-[e:likes where e.f1 <> true]->(b) return e"}
{"prompt": "查找源点height在157到196之间,边标签为likes,且满足条件srcId大于57,f1不是false,或f0不为空的边,返回这些边的weight减177.63的最小值", "completion": "match(a where (a.height BETWEEN 157 AND 196))-[e:likes where (e.srcId > 57 and e.f1 <> false) or (e.f0 is not null)]->(b) return MIN(e.weight - 177.63)"}
{"prompt": "帮我查询前10个标签为拥有的边", "completion": "match(a)-[e:own]->(b) return e limit 10"}
{"prompt": "返回label为apply,以及满足条件f1等于false的边", "completion": "match(a)-[e:apply where e.f1 = false]->(b) return e"}
{"prompt": "查询所有源点标签等于公司,目标点标签等于贷款,标签等于账号或公司的边", "completion": "match(a:company)-[e:account | company]->(b:loan) return e"}
{"prompt": "返回源点身高在172到176之间,id在44到66之间,目标点上次登录时间等于2011年07月16日或创建时间等于2017年07月16日,且类型为拥有的边", "completion": "match(a where (a.height BETWEEN 172 AND 176) and (a.id BETWEEN 44 AND 66))-[e:own]->(b where b.lastLoginTime = '2011-07-16' or b.createTime = '2017-07-16') return e"}
{"prompt": "给出源点类型是account,边类型是transfer,以及srcId不为空且weight不是169,或f0小于等于851的边", "completion": "match(a:account)-[e:transfer where ((e.srcId is not null) and e.weight <> 169) or e.f0 <= 851]->(b) return e"}
{"prompt": "查询源点金额小于等于6948.51,id在46到69之间且权重在669到794之间,边标签等于存款,且权重小于148.60的边,返回这些边的权重除118.68除目标点id的最大值", "completion": "match(a where a.amount <= 6948.51 and (a.id BETWEEN 46 AND 69) and (a.weight BETWEEN 669 AND 794))-[e:deposit where e.weight < 148.60]->(b) return MAX(e.weight / 118.68 / e.targetId)"}
{"prompt": "请帮我找出前140个label为属于的边", "completion": "match(a)-[e:belong]->(b) return e limit 140"}
{"prompt": "请帮我找出标签为has,且满足条件weight不为空或f1等于true或srcId大于592的边", "completion": "match(a)-[e:has where (e.weight is not null) or e.f1 = true or e.srcId > 592]->(b) return e"}
{"prompt": "找出全部源点类型是仓库,目标点类型是用户,类型是合并请求的边", "completion": "match(a:repository)-[e:pullRequest]->(b:user) return e"}
{"prompt": "帮我查询所有源点id对88取余小于55,目标点创建时间不等于2030年09月09日,且label为拥有的边", "completion": "match(a where a.id % 88 < 55)-[e:has]->(b where b.createTime <> '2030-09-09') return e"}
{"prompt": "给出所有源点类型为仓库,边类型为拥有,且满足条件源点id在145到168之间,目标点id小于103,目标点id大于等于187的边", "completion": "match(a:repository)-[e:has where (e.srcId BETWEEN 145 AND 168) and e.targetId < 103 and e.targetId >= 187]->(b) return e"}
{"prompt": "查找源点id为空,边类型是属于,且满足条件源点id大于等于118或源点id在76到108之间或源点id为空的边,返回这些边的f0的个数对771取余的数量", "completion": "match(a where (a.id is null))-[e:belong where e.srcId >= 118 or (e.srcId BETWEEN 76 AND 108) or (e.srcId is null)]->(b) return COUNT(COUNT(e.f0) % 771)"}
{"prompt": "给出前5个类型是咨询的边", "completion": "match(a)-[e:consult]->(b) return e limit 5"}
{"prompt": "找出标签为cancel,且满足条件targetId在111到198之间,timeStamp不等于2003年05月12日,或srcId小于57的边", "completion": "match(a)-[e:cancel where ((e.targetId BETWEEN 111 AND 198) and e.timeStamp <> '2003-05-12') or e.srcId < 57]->(b) return e"}
{"prompt": "返回全部源点标签为买家,目标点标签为卖家,标签为商品的边", "completion": "match(a:buyer)-[e:goods]->(b:seller) return e"}
{"prompt": "帮我查询源点name是吴思思,gender是male,目标点age在82到96之间,salary不是1535,且类型为consult的边", "completion": "match(a where a.name = '吴思思' and a.gender = 'male')-[e:consult]->(b where (b.age BETWEEN 82 AND 96) and b.salary <> 1535) return e"}
{"prompt": "找出源点类型为买家,边类型为查看,以及源点id大于87或f1是false的边", "completion": "match(a:buyer)-[e:look where e.srcId > 87 or e.f1 = false]->(b) return e"}
{"prompt": "查找源点薪资乘6205小于178或id大于等于33,边类型是查看,且目标点id大于等于100且f1不等于true的边,返回这些边的目标点id除目标点id的值", "completion": "match(a where a.salary * 6205 < 178 or a.id >= 33)-[e:look where e.targetId >= 100 and e.f1 <> true]->(b) return e.targetId / e.targetId"}
{"prompt": "请帮我找出label为person的点,并根据薪资从大到小排列", "completion": "match(a:person) return a order by a.salary desc"}
{"prompt": "找出person吴宏的全部标签等于朋友的边,并根据目标点id降序排列,返回142个", "completion": "match(a:person where a.name = '吴宏')-[e:friend]->(b) return b order by e.targetId desc limit 142"}
{"prompt": "请帮我查找28个名字等于赵月或年龄在54到80之间的person,根据薪资从小到大排列", "completion": "match(a:person where a.name = '赵月' or (a.age BETWEEN 54 AND 80)) return a order by a.salary asc limit 28"}
{"prompt": "帮我查询类型是person的所有点,并根据薪资升序排列", "completion": "match(a:person) return a order by a.salary asc"}
{"prompt": "请帮我查找公司腾讯的所有类型是朋友的边,并根据f1降序排列,返回155个", "completion": "match(a:company where a.name = '腾讯')-[e:friend]->(b) return b order by e.f1 desc limit 155"}
{"prompt": "返回65个年龄小于13的person,根据身高降序排列", "completion": "match(a:person where a.age < 13) return a order by a.height desc limit 65"}
{"prompt": "返回类型为药品的点,并根据id降序排列", "completion": "match(a:medicine) return a order by a.id desc"}
{"prompt": "查找病人杜雪的类型为伙伴的边,并根据权重升序排列,返回112个", "completion": "match(a:patient where a.name = '杜雪')-[e:partner]->(b) return b order by e.weight asc limit 112"}
{"prompt": "请帮我查找149个价格在44到208之间的药品,根据id从大到小排列", "completion": "match(a:medicine where (a.price BETWEEN 44 AND 208)) return a order by a.id desc limit 149"}
{"prompt": "给出类型为学生的全部点,并根据身高升序排列", "completion": "match(a:student) return a order by a.height asc"}
{"prompt": "返回course操作系统的全部label为friend的边,并根据f0升序排列,返回153个", "completion": "match(a:course where a.name = '操作系统')-[e:friend]->(b) return b order by e.f0 asc limit 153"}
{"prompt": "查找91个等级大于等于28,价值为空,价值为空的大学,根据价值从小到大排列", "completion": "match(a:university where a.level >= 28 and (a.value is null) and (a.value is null)) return a order by a.value asc limit 91"}
{"prompt": "请帮我查找标签为大学的所有点,并根据等级从小到大排列", "completion": "match(a:university) return a order by a.level asc"}
{"prompt": "查找国家法国的所有类型是朋友的边,并根据目标点id升序排列,返回155个", "completion": "match(a:country where a.name = '法国')-[e:friend]->(b) return b order by e.targetId asc limit 155"}
{"prompt": "给出109个peopleNumber为空或value为空的company,根据peopleNumber从小到大排列", "completion": "match(a:company where (a.peopleNumber is null) or (a.value is null)) return a order by a.peopleNumber asc limit 109"}
{"prompt": "返回标签等于person的点,并根据薪资升序排列", "completion": "match(a:person) return a order by a.salary asc"}
{"prompt": "找出person徐建聪的所有label为伙伴的边,并根据f0从小到大排列,返回42个", "completion": "match(a:person where a.name = '徐建聪')-[e:partner]->(b) return b order by e.f0 asc limit 42"}
{"prompt": "帮我查询109个id为60或地址是C栋或名字不是UME的电影院,根据大小降序排列", "completion": "match(a:cinema where a.id = 60 or a.address = 'C栋' or a.name <> 'UME') return a order by a.size desc limit 109"}
{"prompt": "查找标签等于person的全部点,并根据年龄从小到大排列", "completion": "match(a:person) return a order by a.age asc"}
{"prompt": "请帮我查找person马宏的类型为partner的边,并根据targetId从大到小排列,返回93个", "completion": "match(a:person where a.name = '马宏')-[e:partner]->(b) return b order by e.targetId desc limit 93"}
{"prompt": "给出15个年龄大于189的person,根据id降序排列", "completion": "match(a:person where a.age > 189) return a order by a.id desc limit 15"}
{"prompt": "返回标签为post的点,并根据wordCount从小到大排列", "completion": "match(a:post) return a order by a.wordCount asc"}
{"prompt": "给出用户吴强的label为朋友的边,并根据目标点id降序排列,返回16个", "completion": "match(a:user where a.name = '吴强')-[e:friend]->(b) return b order by e.targetId desc limit 16"}
{"prompt": "返回110个名字等于Post_388的帖子,根据名字从大到小排列", "completion": "match(a:post where a.name = 'Post_388') return a order by a.name desc limit 110"}
{"prompt": "请帮我查找标签等于书的点,并根据字数从大到小排列", "completion": "match(a:book) return a order by a.wordCount desc"}
{"prompt": "给出读者黄若涵的类型是朋友的边,并根据目标点id升序排列,返回192个", "completion": "match(a:reader where a.name = '黄若涵')-[e:friend]->(b) return b order by e.targetId asc limit 192"}
{"prompt": "查询139个salary为空,id大于等于62,id的和大于187的publisher,根据age升序排列", "completion": "match(a:publisher where (a.salary is null) and a.id >= 62 and SUM(a.id) > 187) return a order by a.age asc limit 139"}
{"prompt": "找出label为person的所有点,并根据性别从大到小排列", "completion": "match(a:person) return a order by a.gender desc"}
{"prompt": "给出person周若涵的全部类型为朋友的边,并根据源点id从小到大排列,返回39个", "completion": "match(a:person where a.name = '周若涵')-[e:friend]->(b) return b order by e.srcId asc limit 39"}
{"prompt": "给出91个价值大于等于515且创建时间是2021年02月23日的账号,根据价值从小到大排列", "completion": "match(a:account where a.value >= 515 and a.createTime = '2021-02-23') return a order by a.value asc limit 91"}
{"prompt": "请帮我找出类型为仓库的所有点,并根据星数升序排列", "completion": "match(a:repository) return a order by a.stars asc"}
{"prompt": "给出repository Tugraph的所有label为friend的边,并根据f0升序排列,返回102个", "completion": "match(a:repository where a.name = 'Tugraph')-[e:friend]->(b) return b order by e.f0 asc limit 102"}
{"prompt": "返回153个权重大于131且状态等于Running的事项,根据名字降序排列", "completion": "match(a:issue where a.weight > 131 and a.status = 'Running') return a order by a.name desc limit 153"}
{"prompt": "帮我查询标签等于卖家的全部点,并根据薪资升序排列", "completion": "match(a:seller) return a order by a.salary asc"}
{"prompt": "查找orders Order_368的全部label为friend的边,并根据weight升序排列,返回194个", "completion": "match(a:orders where a.name = 'Order_368')-[e:friend]->(b) return b order by e.weight asc limit 194"}
{"prompt": "返回26个price小于等于597.49的orders,根据value升序排列", "completion": "match(a:orders where a.price <= 597.49) return a order by a.value asc limit 26"}
{"prompt": "请帮我查找名为郑雪的节点认识的person", "completion": "match(a where a.name='郑雪')-[e:knows]->(b:person) return b"}
{"prompt": "查询所有和person孙思琪之间有朋友关系的person", "completion": "match(a:person where a.name='孙思琪')-[e:friend]->(b:person) return b"}
{"prompt": "帮我查询全部和person黄建聪有关系的person,返回这些点的年龄,性别", "completion": "match(a:person where a.name='黄建聪')-[e]-(b:person) return b.age, b.gender"}
{"prompt": "查询全部与person kate有关系的person的salary", "completion": "match(a:person where a.name='kate')-[e]-(b:person) return b.salary"}
{"prompt": "请帮我找出24个名为马雪的点relates的标签等于person的节点,且其name为徐国强", "completion": "match(a where a.name='马雪')-[e:relates]->(b:person where b.name = '徐国强') return b limit 24"}
{"prompt": "查找名为孙国强的,身高不为空或名字为陈若涵的同事,返回这些同事的名字,和边的权重,f0,源点id", "completion": "match(a where a.name='孙国强')-[e:colleague]->(b where (b.height is not null) or b.name = '陈若涵') return b.name,e.weight, e.f0, e.srcId"}
{"prompt": "帮我查询165个名为吴雪的点关联的标签为person的节点,且节点身高大于160", "completion": "match(a where a.name='吴雪')-[e:relates]->(b:person where b.height > 160) return b limit 165"}
{"prompt": "请帮我找出person认识的person,返回其源点的薪资对6278取余的最大值,以及目标点的age的最小值减10的和", "completion": "match(a:person)-[e:knows]->(b:person) return MAX(a.salary % 6278), SUM(MIN(b.age) - 10)"}
{"prompt": "帮我查询名为杜思思的person,以及与其有关的person,并返回杜思思的身高和这些person的id", "completion": "match(a:person where name = '杜思思')-[e]-(b:person) return a.height, b.id"}
{"prompt": "给出所有名为马建聪的节点购买的person或公司", "completion": "match(a where a.name='马建聪')-[e:buy]->(b:person | company) return b"}
{"prompt": "请帮我找出所有和person Tom之间有提交关系的软件", "completion": "match(a:person where a.name='Tom')-[e:commits]->(b:software) return b"}
{"prompt": "找出所有和person张轩有关系的person或company或software,返回这些点的id,value,lang", "completion": "match(a:person where a.name='张轩')-[e]-(b:person | company | software) return b.id, b.value, b.lang"}
{"prompt": "找出全部与软件Geaflow有关系的公司的人数", "completion": "match(a:software where a.name='Geaflow')-[e]-(b:company) return b.peopleNumber"}
{"prompt": "查询95个名为马月的点认识的标签为person的节点,且其身高不等于190且名字等于吴强", "completion": "match(a where a.name='马月')-[e:knows]->(b:person where b.height <> 190 and b.name = '吴强') return b limit 95"}
{"prompt": "给出名为微软的,星数不为空且id小于等于36的伙伴,返回这些伙伴的语言,和边的权重", "completion": "match(a where a.name='微软')-[e:partner]->(b where (b.stars is not null) and b.id <= 36) return b.lang,e.weight"}
{"prompt": "请帮我查找169个名为Spark的点使用的类型是软件的节点,且节点id为空或是否开源为false", "completion": "match(a where a.name='Spark')-[e:uses]->(b:software where (b.id is null) or b.openSource = false) return b limit 169"}
{"prompt": "给出公司雇佣的person,返回其源点的id的求和值除9的数量,以及目标点的薪资除9437的最小值", "completion": "match(a:company)-[e:employee]->(b:person) return COUNT(SUM(a.id) / 9), MIN(b.salary / 9437)"}
{"prompt": "请帮我找出名为Flink的person或company或software,以及与其有关的person,并返回Flink的openSource和这些person的name", "completion": "match(a:person | company | software where name = 'Flink')-[e]-(b:person) return a.openSource, b.name"}
{"prompt": "查找所有名为王建国的节点diagnose的patient或department或doctor", "completion": "match(a where a.name='王建国')-[e:diagnose]->(b:patient | department | doctor) return b"}
{"prompt": "找出所有和医生杜梅之间有诊断关系的病人", "completion": "match(a:doctor where a.name='杜梅')-[e:diagnose]->(b:patient) return b"}
{"prompt": "返回所有和doctor孙月有关系的patient,返回这些点的salary,name,id", "completion": "match(a:doctor where a.name='孙月')-[e]-(b:patient) return b.salary, b.name, b.id"}
{"prompt": "返回所有与药品散利痛有关系的部门的地址", "completion": "match(a:medicine where a.name='散利痛')-[e]-(b:department) return b.address"}
{"prompt": "请帮我查找63个名为何红的点接受的类型为处方的节点,且其创建时间不等于2011年09月04日或名字为Prescription_411", "completion": "match(a where a.name='何红')-[e:accept]->(b:prescription where b.createTime <> '2011-09-04' or b.name = 'Prescription_411') return b limit 63"}
{"prompt": "查找名为Sam的,名字不是放射科,权重大于201的相关者,返回这些相关者的地址,和边的权重,目标点id", "completion": "match(a where a.name='Sam')-[e:relation]->(b where b.name <> '放射科' and b.weight > 201) return b.address,e.weight, e.targetId"}
{"prompt": "返回190个名为Prescription_417的点包含的标签等于药品的节点,且节点价格不为空", "completion": "match(a where a.name='Prescription_417')-[e:contain]->(b:medicine where (b.price is not null)) return b limit 190"}
{"prompt": "返回department has的doctor,返回其源点的weight的数量加289除73的最小值,以及目标点的salary减8853的值", "completion": "match(a:department)-[e:has]->(b:doctor) return MIN((COUNT(a.weight) + 289) / 73), b.salary - 8853"}
{"prompt": "查询名为Prescription_389的医生或药品,以及与其有关的药品,并返回Prescription_389的权重和这些药品的名字", "completion": "match(a:doctor | medicine where name = 'Prescription_389')-[e]-(b:medicine) return a.weight, b.name"}
{"prompt": "请帮我找出所有名为生物学院的节点拥有的部门", "completion": "match(a where a.name='生物学院')-[e:has]->(b:department) return b"}
{"prompt": "返回和部门土木学院之间有拥有关系的教师", "completion": "match(a:department where a.name='土木学院')-[e:has]->(b:teacher) return b"}
{"prompt": "请帮我查找全部和课程程序设计有关系的学生,返回这些点的价值", "completion": "match(a:course where a.name='程序设计')-[e]-(b:student) return b.value"}
{"prompt": "请帮我找出全部与course程序设计有关系的department的name", "completion": "match(a:course where a.name='程序设计')-[e]-(b:department) return b.name"}
{"prompt": "请帮我找出46个名为韩月的点selects的类型是course的节点,且其name为高等数学或name等于程序设计", "completion": "match(a where a.name='韩月')-[e:selects]->(b:course where b.name = '高等数学' or b.name = '程序设计') return b limit 46"}
{"prompt": "请帮我查找名为计算机体系结构的,名字为生物学院或价值大于等于74的伙伴,返回这些伙伴的价值,和边的f1,权重,源点id", "completion": "match(a where a.name='计算机体系结构')-[e:partner]->(b where b.name = '生物学院' or b.value >= 74) return b.value,e.f1, e.weight, e.srcId"}
{"prompt": "帮我查询42个名为程序设计的点belong的类型为department的节点,且节点id在76到79之间,value大于939", "completion": "match(a where a.name='程序设计')-[e:belong]->(b:department where (b.id BETWEEN 76 AND 79) and b.value > 939) return b limit 42"}
{"prompt": "请帮我查找university has的department,返回其源点的id的和乘7的值,以及目标点的value的最小值除917的值", "completion": "match(a:university)-[e:has]->(b:department) return SUM(a.id) * 7, MIN(b.value) / 917"}
{"prompt": "查找名为线性代数的学生或课程或大学,以及与其有关的大学,并返回线性代数的名字和这些大学的价值", "completion": "match(a:student | course | university where name = '线性代数')-[e]-(b:university) return a.name, b.value"}
{"prompt": "给出全部名为Bilibili的节点合作的国家或公司", "completion": "match(a where a.name='Bilibili')-[e:cooperate]->(b:country | company) return b"}
{"prompt": "找出所有和公司腾讯之间有合作关系的大学", "completion": "match(a:company where a.name='腾讯')-[e:cooperate]->(b:university) return b"}
{"prompt": "查询和大学北京大学有关系的大学或公司,返回这些点的价值", "completion": "match(a:university where a.name='北京大学')-[e]-(b:university | company) return b.value"}
{"prompt": "查询所有与大学浙江大学有关系的城市的价值", "completion": "match(a:university where a.name='浙江大学')-[e]-(b:city) return b.value"}
{"prompt": "给出143个名为中国的点contain的类型是city的节点,且其name为巴黎且peopleNumber为空", "completion": "match(a where a.name='中国')-[e:contain]->(b:city where b.name = '巴黎' and (b.peopleNumber is null)) return b limit 143"}
{"prompt": "返回全部名为北京大学的,value为空且name不是谷歌的relation,返回这些relation的name,和边的srcId", "completion": "match(a where a.name='北京大学')-[e:relation]->(b where (b.value is null) and b.name <> '谷歌') return b.name,e.srcId"}
{"prompt": "请帮我找出20个名为华为的点合作的label为大学的节点,且节点等级在2到3之间", "completion": "match(a where a.name='华为')-[e:cooperate]->(b:university where (b.level BETWEEN 2 AND 3)) return b limit 20"}
{"prompt": "帮我查询company cooperate的university,返回其源点的id减46加26的求和值,以及目标点的level减2对3取余的值", "completion": "match(a:company)-[e:cooperate]->(b:university) return SUM(a.id - 46 + 26), b.level - 2 % 3"}
{"prompt": "找出名为字节的country,以及与其有关的company,并返回字节的id和这些company的name", "completion": "match(a:country where name = '字节')-[e]-(b:company) return a.id, b.name"}
{"prompt": "查找所有名为何国强的节点创造的标签或person或电影", "completion": "match(a where a.name='何国强')-[e:creates]->(b:tag | person | film) return b"}
{"prompt": "找出所有和电影院好视影院之间有上映关系的电影", "completion": "match(a:cinema where a.name='好视影院')-[e:releases]->(b:film) return b"}
{"prompt": "帮我查询和person杜宏有关系的person或标签或评论,返回这些点的创建时间", "completion": "match(a:person where a.name='杜宏')-[e]-(b:person | tag | comment) return b.createTime"}
{"prompt": "查找所有与电影院好视影院有关系的标签的名字", "completion": "match(a:cinema where a.name='好视影院')-[e]-(b:tag) return b.name"}
{"prompt": "帮我查询75个名为泰坦尼克号的点拥有的类型是标签的节点,且其id大于74或名字不等于其他", "completion": "match(a where a.name='泰坦尼克号')-[e:has]->(b:tag where b.id > 74 or b.name <> '其他') return b limit 75"}
{"prompt": "查询名为人人影城的,类别是科幻的伙伴,返回这些伙伴的名字,和边的权重", "completion": "match(a where a.name='人人影城')-[e:partner]->(b where b.category = '科幻') return b.name,e.weight"}
{"prompt": "返回68个名为UME的点releases的标签等于film的节点,且节点name不是复仇者联盟,id为空", "completion": "match(a where a.name='UME')-[e:releases]->(b:film where b.name <> '复仇者联盟' and (b.id is null)) return b limit 68"}
{"prompt": "给出person观看的电影,返回其源点的身高减175的和,以及目标点的id乘15的值", "completion": "match(a:person)-[e:watch]->(b:film) return SUM(a.height - 175), b.id * 15"}
{"prompt": "请帮我找出名为文艺的电影或person,以及与其有关的电影院,并返回文艺的名字和这些电影院的名字", "completion": "match(a:film | person where name = '文艺')-[e]-(b:cinema) return a.name, b.name"}
{"prompt": "返回名为周宏的节点喜欢的person", "completion": "match(a where a.name='周宏')-[e:likes]->(b:person) return b"}
{"prompt": "返回和person王国强之间有支付关系的person", "completion": "match(a:person where a.name='王国强')-[e:pay]->(b:person) return b"}
{"prompt": "请帮我找出全部和person张伟有关系的person,返回这些点的age,salary", "completion": "match(a:person where a.name='张伟')-[e]-(b:person) return b.age, b.salary"}
{"prompt": "查找与person郑科有关系的person的身高", "completion": "match(a:person where a.name='郑科')-[e]-(b:person) return b.height"}
{"prompt": "找出68个名为徐红的点喜欢的类型是person的节点,且其薪资大于等于9981或名字等于张宏", "completion": "match(a where a.name='徐红')-[e:likes]->(b:person where b.salary >= 9981 or b.name = '张宏') return b limit 68"}
{"prompt": "查找全部名为徐伟的,名字不是周强且薪资大于等于58的伙伴,返回这些伙伴的身高,和边的目标点id,权重", "completion": "match(a where a.name='徐伟')-[e:partner]->(b where b.name <> '周强' and b.salary >= 58) return b.height,e.targetId, e.weight"}
{"prompt": "帮我查询11个名为李若涵的点knows的类型为person的节点,且节点name为陈梅或id为空", "completion": "match(a where a.name='李若涵')-[e:knows]->(b:person where b.name = '陈梅' or (b.id is null)) return b limit 11"}
{"prompt": "请帮我查找person likes的person,返回其源点的age除3的值,以及目标点的height减181的最大值", "completion": "match(a:person)-[e:likes]->(b:person) return a.age / 3, MAX(b.height - 181)"}
{"prompt": "帮我查询名为吴月的person,以及与其有关的person,并返回吴月的年龄和这些person的身高", "completion": "match(a:person where name = '吴月')-[e]-(b:person) return a.age, b.height"}
{"prompt": "查找所有名为张红的节点publish的forum或user", "completion": "match(a where a.name='张红')-[e:publish]->(b:forum | user) return b"}
{"prompt": "查找和用户王若涵之间有喜欢关系的帖子", "completion": "match(a:user where a.name='王若涵')-[e:likes]->(b:post) return b"}
{"prompt": "给出和论坛中国军事论坛有关系的论坛,返回这些点的价值,名字", "completion": "match(a:forum where a.name='中国军事论坛')-[e]-(b:forum) return b.value, b.name"}
{"prompt": "请帮我找出与forum知乎有关系的user的id", "completion": "match(a:forum where a.name='知乎')-[e]-(b:user) return b.id"}
{"prompt": "请帮我查找119个名为Post_334的点has的标签为tag的节点,且其name不等于古代,value为32", "completion": "match(a where a.name='Post_334')-[e:has]->(b:tag where b.name <> '古代' and b.value = 32) return b limit 119"}
{"prompt": "查询名为百度贴吧的,value小于505的relation,返回这些relation的createTime,和边的f1", "completion": "match(a where a.name='百度贴吧')-[e:relation]->(b where b.value < 505) return b.createTime,e.f1"}
{"prompt": "找出35个名为孙科的点likes的label为post的节点,且节点createTime等于2008年06月05日,createTime不等于2031年11月06日", "completion": "match(a where a.name='孙科')-[e:likes]->(b:post where b.createTime = '2008-06-05' and b.createTime <> '2031-11-06') return b limit 35"}
{"prompt": "请帮我找出用户喜欢的帖子,返回其源点的id减0的最大值,以及目标点的id的平均值对20取余的数量", "completion": "match(a:user)-[e:likes]->(b:post) return MAX(a.id - 0), COUNT(AVG(b.id) % 20)"}
{"prompt": "找出名为Post_276的帖子或标签,以及与其有关的论坛,并返回Post_276的价值和这些论坛的名字", "completion": "match(a:post | tag where name = 'Post_276')-[e]-(b:forum) return a.value, b.name"}
{"prompt": "找出名为孤城的节点关联的作家", "completion": "match(a where a.name='孤城')-[e:relates]->(b:author) return b"}
{"prompt": "请帮我找出全部和读者陈若涵之间有喜欢关系的书", "completion": "match(a:reader where a.name='陈若涵')-[e:likes]->(b:book) return b"}
{"prompt": "找出全部和作家吴月有关系的作家或编辑或书,返回这些点的id,id", "completion": "match(a:author where a.name='吴月')-[e]-(b:author | publisher | book) return b.id, b.id"}
{"prompt": "帮我查询与book白夜行有关系的reader的name", "completion": "match(a:book where a.name='白夜行')-[e]-(b:reader) return b.name"}
{"prompt": "查找5个名为王伟的点发布的类型为书的节点,且其名字是呐喊", "completion": "match(a where a.name='王伟')-[e:publish]->(b:book where b.name = '呐喊') return b limit 5"}
{"prompt": "给出全部名为郑梅的,身高小于等于170或id的和大于等于196的朋友,返回这些朋友的id,和边的权重,源点id", "completion": "match(a where a.name='郑梅')-[e:friend]->(b where b.height <= 170 or SUM(b.id) >= 196) return b.id,e.weight, e.srcId"}
{"prompt": "请帮我找出65个名为徐强的点发布的类型为书的节点,且节点id大于等于83", "completion": "match(a where a.name='徐强')-[e:publish]->(b:book where b.id >= 83) return b limit 65"}
{"prompt": "找出编辑发布的书,返回其源点的年龄除14对151取余的平均值,以及目标点的id对67取余的平均值", "completion": "match(a:publisher)-[e:publish]->(b:book) return AVG(a.age / 14 % 151), AVG(b.id % 67)"}
{"prompt": "查找名为Alice的编辑或书或作家,以及与其有关的作家,并返回Alice的性别和这些作家的名字", "completion": "match(a:publisher | book | author where name = 'Alice')-[e]-(b:author) return a.gender, b.name"}
{"prompt": "请帮我查找所有名为loan_18的节点deposit的loan或account或person", "completion": "match(a where a.name='loan_18')-[e:deposit]->(b:loan | account | person) return b"}
{"prompt": "给出所有和贷款loan_49之间有存款关系的账号", "completion": "match(a:loan where a.name='loan_49')-[e:deposit]->(b:account) return b"}
{"prompt": "帮我查询所有和公司美团有关系的账号或person或公司,返回这些点的创建时间,是否冻结", "completion": "match(a:company where a.name='美团')-[e]-(b:account | person | company) return b.createTime, b.isBlock"}
{"prompt": "请帮我找出全部与person韩红有关系的账号的上次登录时间", "completion": "match(a:person where a.name='韩红')-[e]-(b:account) return b.lastLoginTime"}
{"prompt": "查询34个名为周月的点申请的标签为贷款的节点,且其金额大于等于4468.78", "completion": "match(a where a.name='周月')-[e:apply]->(b:loan where b.amount >= 4468.78) return b limit 34"}
{"prompt": "帮我查询名为谷歌的,amount小于等于6504.35的partner,返回这些partner的weight,和边的targetId", "completion": "match(a where a.name='谷歌')-[e:partner]->(b where b.amount <= 6504.35) return b.weight,e.targetId"}
{"prompt": "返回89个名为美团的点apply的类型是loan的节点,且节点weight的最大值加369的平均值等于976或amount大于8995.53", "completion": "match(a where a.name='美团')-[e:apply]->(b:loan where AVG(MAX(b.weight) + 369) = 976 or b.amount > 8995.53) return b limit 89"}
{"prompt": "给出公司申请的贷款,返回其源点的价值对价值取余的平均值,以及目标点的金额对6447.19取余除8097.26对金额取余减7630.34的最小值", "completion": "match(a:company)-[e:apply]->(b:loan) return AVG(a.value % a.value), MIN(b.amount % 6447.19 / 8097.26 % b.amount - 7630.34)"}
{"prompt": "请帮我查找名为Bilibili的贷款或公司,以及与其有关的person,并返回Bilibili的名字和这些person的身高", "completion": "match(a:loan | company where name = 'Bilibili')-[e]-(b:person) return a.name, b.height"}
{"prompt": "给出全部名为张若涵的节点likes的issue", "completion": "match(a where a.name='张若涵')-[e:likes]->(b:issue) return b"}
{"prompt": "给出所有和用户徐月之间有创造关系的合并请求", "completion": "match(a:user where a.name='徐月')-[e:creates]->(b:pullRequest) return b"}
{"prompt": "返回全部和事项ISSUE-305有关系的仓库或事项或合并请求,返回这些点的名字,年龄,薪资", "completion": "match(a:issue where a.name='ISSUE-305')-[e]-(b:repository | issue | pullRequest) return b.name, b.age, b.salary"}
{"prompt": "查找全部与仓库Kafka有关系的事项的创建时间", "completion": "match(a:repository where a.name='Kafka')-[e]-(b:issue) return b.createTime"}
{"prompt": "返回191个名为Kafka的点has的标签等于pullRequest的节点,且其id对75取余大于等于959", "completion": "match(a where a.name='Kafka')-[e:has]->(b:pullRequest where b.id % 75 >= 959) return b limit 191"}
{"prompt": "给出所有名为马月的,id大于等于16的朋友,返回这些朋友的id,和边的f0,f1", "completion": "match(a where a.name='马月')-[e:friend]->(b where b.id >= 16) return b.id,e.f0, e.f1"}
{"prompt": "给出33个名为PR-308的点belong的类型为repository的节点,且节点id在24到91之间且weight小于281", "completion": "match(a where a.name='PR-308')-[e:belong]->(b:repository where (b.id BETWEEN 24 AND 91) and b.weight < 281) return b limit 33"}
{"prompt": "请帮我查找仓库拥有的合并请求,返回其源点的星数除星数的最小值,以及目标点的id加94的值", "completion": "match(a:repository)-[e:has]->(b:pullRequest) return MIN(a.stars / a.stars), b.id + 94"}
{"prompt": "查询名为黄伟的repository,以及与其有关的pullRequest,并返回黄伟的name和这些pullRequest的createTime", "completion": "match(a:repository where name = '黄伟')-[e]-(b:pullRequest) return a.name, b.createTime"}
{"prompt": "返回名为何科的节点创造的卖家或订单", "completion": "match(a where a.name='何科')-[e:creates]->(b:seller | orders) return b"}
{"prompt": "请帮我找出所有和卖家张宏之间有回答关系的买家", "completion": "match(a:seller where a.name='张宏')-[e:ask]->(b:buyer) return b"}
{"prompt": "查找全部和goods杯子有关系的goods,返回这些点的category", "completion": "match(a:goods where a.name='杯子')-[e]-(b:goods) return b.category"}
{"prompt": "帮我查询全部与订单Order_126有关系的买家的性别", "completion": "match(a:orders where a.name='Order_126')-[e]-(b:buyer) return b.gender"}
{"prompt": "给出191个名为何若涵的点创造的标签为订单的节点,且其价格在1287.07到2180.95之间且价格不为空", "completion": "match(a where a.name='何若涵')-[e:creates]->(b:orders where (b.price BETWEEN 1287.07 AND 2180.95) and (b.price is not null)) return b limit 191"}
{"prompt": "帮我查询名为何伟的,性别不是male,年龄为空的朋友,返回这些朋友的年龄,和边的源点id,f0,f1", "completion": "match(a where a.name='何伟')-[e:friend]->(b where b.gender <> 'male' and (b.age is null)) return b.age,e.srcId, e.f0, e.f1"}
{"prompt": "找出169个名为黄梅的点咨询的类型是卖家的节点,且节点id不等于82且id大于95", "completion": "match(a where a.name='黄梅')-[e:consult]->(b:seller where b.id <> 82 and b.id > 95) return b limit 169"}
{"prompt": "给出buyer look的goods,返回其源点的height对height取余减95的值,以及目标点的price减3666.10减1666.25的值", "completion": "match(a:buyer)-[e:look]->(b:goods) return a.height % a.height - 95, b.price - 3666.10 - 1666.25"}
{"prompt": "查询名为杜若涵的goods或seller,以及与其有关的buyer,并返回杜若涵的name和这些buyer的name", "completion": "match(a:goods | seller where name = '杜若涵')-[e]-(b:buyer) return a.name, b.name"}
{"prompt": "返回139个和标签等于person的点有家人关系的person,以及和这些person有同事关系的person", "completion": "match(a:person)-[e:family]->(b:person)-[e2:colleague]->(c:person) return c limit 139"}
{"prompt": "请帮我找出与周若涵存在同事关系的person,person与person存在家人关系的点,返回这些点的id", "completion": "match(a where a.name = '周若涵')-[e:colleague]->(b:person)-[e2:family]->(c:person) return c.id"}
{"prompt": "给出person吴建聪关联的person节点认识的person", "completion": "match(a:person where a.name = '吴建聪')-[e:relates]->(b:person)-[e2:knows]->(c:person) return c"}
{"prompt": "请帮我找出与person吴轩有关,且与person郑轩有关系的person节点", "completion": "match(a:person where a.name='吴轩')-[e:lover]-(b:person)-[e2:parent]-(c:person where c.name='郑轩') return b"}
{"prompt": "请帮我查找与person王宏存在父母关系,且与person黄科存在父母关系的person节点，返回这些person的id,及person王宏的名字,及person黄科的id", "completion": "match(a:person where a.name='王宏')-[e:parent]->(b:person)<-[e2:parent]-(c:person where c.name='黄科') return a.name,b.id,c.id"}
{"prompt": "请帮我查找和标签等于person的点有family关系的person,且和这些person有parent关系的person,且和这些person有colleague关系的person", "completion": "match(a:person)-[e:family]->(b:person)-[e2:parent]->(c:person)-[e3:colleague]->(d:person) return d"}
{"prompt": "请帮我找出薪资为空或性别不是famale的person认识的person的名称,以及这些person 认识的person的名称", "completion": "match(a:person where (a.salary is null) or a.gender <> 'famale')-[e:knows]->(b:person)-[e2:knows]->(c:person) return b.name as b_name, c.name as c_name"}
{"prompt": "查找所有和person黄建国之间有恋人关系的person", "completion": "match(a:person where a.name='黄建国')-[e:lover]->(b:person) return b"}
{"prompt": "帮我查询与person李思思有关系的person的薪资", "completion": "match(a:person where a.name='李思思')-[e]-(b:person) return b.salary"}
{"prompt": "给出名为徐梅的点knows的person", "completion": "match(a where a.name='徐梅')-[e:knows]->(b:person) return b"}
{"prompt": "帮我查询所有名为张国强的点的,age为空或height小于等于157的colleague,返回这些colleague的height,和边的weight", "completion": "match(a where a.name='张国强')-[e:colleague]->(b where (b.age is null) or b.height <= 157) return b.height,e.weight"}
{"prompt": "请帮我查找和person点有knows关系的person节点,且边满足条件weight在128.06到178.28之间,目标person节点id小于44", "completion": "match(a:person)-[e:knows where (e.weight BETWEEN 128.06 AND 178.28)]->(b:person where b.id < 44) return b"}
{"prompt": "查询person认识的person,返回其源点的id乘79的数量,以及目标点的薪资减5053的最大值", "completion": "match(a:person)-[e:knows]->(b:person) return COUNT(a.id * 79), MAX(b.salary - 5053)"}
{"prompt": "返回名为徐科的person,以及与其有关的person,并返回徐科的gender和这些person的height", "completion": "match(a:person where name = '徐科')-[e]-(b:person) return a.gender, b.height"}
{"prompt": "查询168个和类型为公司的点有雇佣关系的person,且和这些person有提交关系的软件", "completion": "match(a:company)-[e:employee]->(b:person)-[e2:commits]->(c:software) return c limit 168"}
{"prompt": "找出与Bilibili存在雇佣关系的person,person与软件存在购买关系的点,返回这些点的语言", "completion": "match(a where a.name = 'Bilibili')-[e:employee]->(b:person)-[e2:buy]->(c:software) return c.lang"}
{"prompt": "帮我查询company华为employee的person节点knows的person", "completion": "match(a:company where a.name = '华为')-[e:employee]->(b:person)-[e2:knows]->(c:person) return c"}
{"prompt": "给出与person徐红有关,且与软件Hadoop有关系的person节点", "completion": "match(a:person where a.name='徐红')-[e:knows]-(b:person)-[e2:buy]-(c:software where c.name='Hadoop') return b"}
{"prompt": "请帮我找出与公司蚂蚁集团存在雇佣关系,且与person何建国存在认识关系的person节点，返回这些person的年龄,及公司蚂蚁集团的id,及person何建国的身高", "completion": "match(a:company where a.name='蚂蚁集团')-[e:employee]->(b:person)<-[e2:knows]-(c:person where c.name='何建国') return a.id,b.age,c.height"}
{"prompt": "返回和标签为person的点有认识关系的person,以及和这些person有认识关系的person,以及和这些person有提交关系的软件", "completion": "match(a:person)-[e:knows]->(b:person)-[e2:knows]->(c:person)-[e3:commits]->(d:software) return d"}
{"prompt": "返回人数为空或人数不等于962的公司创造的软件的名称,以及这些软件 使用的软件的名称", "completion": "match(a:company where (a.peopleNumber is null) or a.peopleNumber <> 962)-[e:creates]->(b:software)-[e2:uses]->(c:software) return b.name as b_name, c.name as c_name"}
{"prompt": "查询和person韩月之间有knows关系的person", "completion": "match(a:person where a.name='韩月')-[e:knows]->(b:person) return b"}
{"prompt": "请帮我查找所有与person孙雪有关系的person的age", "completion": "match(a:person where a.name='孙雪')-[e]-(b:person) return b.age"}
{"prompt": "请帮我查找名为Zookeeper的点使用的软件", "completion": "match(a where a.name='Zookeeper')-[e:uses]->(b:software) return b"}
{"prompt": "查找名为吴建聪的点的,星数不是335的朋友,返回这些朋友的星数,和边的目标点id,f1,源点id", "completion": "match(a where a.name='吴建聪')-[e:friend]->(b where b.stars <> 335) return b.stars,e.targetId, e.f1, e.srcId"}
{"prompt": "找出和person点有购买关系的软件节点,且边满足条件源点id为空,目标软件节点满足条件星数在676到973之间", "completion": "match(a:person)-[e:buy where (e.srcId is null)]->(b:software where (b.stars BETWEEN 676 AND 973)) return b"}
{"prompt": "找出person buy的software,返回其源点的id的个数减10对56取余的和,以及目标点的id的个数对72取余的个数", "completion": "match(a:person)-[e:buy]->(b:software) return SUM(COUNT(a.id) - 10 % 56), COUNT(COUNT(b.id) % 72)"}
{"prompt": "请帮我找出名为Geaflow的software,以及与其有关的software,并返回Geaflow的value和这些software的lang", "completion": "match(a:software where name = 'Geaflow')-[e]-(b:software) return a.value, b.lang"}
{"prompt": "帮我查询7个和label为医生的点有诊断关系的病人,以及和这些病人有接受关系的处方", "completion": "match(a:doctor)-[e:diagnose]->(b:patient)-[e2:accept]->(c:prescription) return c limit 7"}
{"prompt": "请帮我查找所有与吴建聪存在belong关系的department,department与doctor存在has关系的点,返回这些点的gender", "completion": "match(a where a.name = '吴建聪')-[e:belong]->(b:department)-[e2:has]->(c:doctor) return c.gender"}
{"prompt": "帮我查询部门急诊部拥有的医生节点属于的部门", "completion": "match(a:department where a.name = '急诊部')-[e:has]->(b:doctor)-[e2:belong]->(c:department) return c"}
{"prompt": "返回与医生郑强有关,且与处方Prescription_429有关系的病人节点", "completion": "match(a:doctor where a.name='郑强')-[e:diagnose]-(b:patient)-[e2:accept]-(c:prescription where c.name='Prescription_429') return b"}
{"prompt": "请帮我查找与department内科存在has关系,且与department眼科存在belong关系的doctor节点，返回这些doctor的id,及department内科的weight,及department眼科的weight", "completion": "match(a:department where a.name='内科')-[e:has]->(b:doctor)<-[e2:belong]-(c:department where c.name='眼科') return a.weight,b.id,c.weight"}
{"prompt": "给出和类型是doctor的点有belong关系的department,且和这些department有has关系的doctor,且和这些doctor有diagnose关系的patient", "completion": "match(a:doctor)-[e:belong]->(b:department)-[e2:has]->(c:doctor)-[e3:diagnose]->(d:patient) return d"}
{"prompt": "帮我查询age小于96或gender是famale的doctor belong的department的名称,以及这些department has的doctor的名称", "completion": "match(a:doctor where a.age < 96 or a.gender = 'famale')-[e:belong]->(b:department)-[e2:has]->(c:doctor) return b.name as b_name, c.name as c_name"}
{"prompt": "查询所有和doctor陈月之间有belong关系的department", "completion": "match(a:doctor where a.name='陈月')-[e:belong]->(b:department) return b"}
{"prompt": "查找所有与处方Prescription_303有关系的医生的年龄", "completion": "match(a:prescription where a.name='Prescription_303')-[e]-(b:doctor) return b.age"}
{"prompt": "请帮我找出全部名为黄雪的点接受的处方", "completion": "match(a where a.name='黄雪')-[e:accept]->(b:prescription) return b"}
{"prompt": "请帮我找出所有名为放射科的点的,身高不为空,身高为空的伙伴,返回这些伙伴的id,和边的f1", "completion": "match(a where a.name='放射科')-[e:partner]->(b where (b.height is not null) and (b.height is null)) return b.id,e.f1"}
{"prompt": "返回所有和病人点有接受关系的处方节点,且边满足条件f1不等于791,目标处方节点满足条件权重大于等于61", "completion": "match(a:patient)-[e:accept where e.f1 <> 791]->(b:prescription where b.weight >= 61) return b"}
{"prompt": "帮我查询prescription contain的medicine,返回其源点的id的最小值除id的个数,以及目标点的id加72的值", "completion": "match(a:prescription)-[e:contain]->(b:medicine) return COUNT(MIN(a.id) / a.id), b.id + 72"}
{"prompt": "请帮我找出名为李科的病人,以及与其有关的病人,并返回李科的年龄和这些病人的名字", "completion": "match(a:patient where name = '李科')-[e]-(b:patient) return a.age, b.name"}
{"prompt": "找出12个和label为department的点有has关系的student,且和这些student有selects关系的course", "completion": "match(a:department)-[e:has]->(b:student)-[e2:selects]->(c:course) return c limit 12"}
{"prompt": "找出全部与形势与政策存在属于关系的部门,部门与学生存在拥有关系的点,返回这些点的年龄", "completion": "match(a where a.name = '形势与政策')-[e:belong]->(b:department)-[e2:has]->(c:student) return c.age"}
{"prompt": "找出大学南京大学拥有的部门节点拥有的学生", "completion": "match(a:university where a.name = '南京大学')-[e:has]->(b:department)-[e2:has]->(c:student) return c"}
{"prompt": "帮我查询与department生物学院有关,且与course数据结构有关系的teacher节点", "completion": "match(a:department where a.name='生物学院')-[e:has]-(b:teacher)-[e2:teach]-(c:course where c.name='数据结构') return b"}
{"prompt": "请帮我找出与学生韩思思存在选择关系,且与部门艺术学院存在属于关系的课程节点，返回这些课程的价值,id,及学生韩思思的名字,及部门艺术学院的id", "completion": "match(a:student where a.name='韩思思')-[e:selects]->(b:course)<-[e2:belong]-(c:department where c.name='艺术学院') return a.name,b.value, b.id,c.id"}
{"prompt": "查询和类型是课程的点有属于关系的部门,并且和这些部门有拥有关系的学生,并且和这些学生有选择关系的课程", "completion": "match(a:course)-[e:belong]->(b:department)-[e2:has]->(c:student)-[e3:selects]->(d:course) return d"}
{"prompt": "查找name不等于电子科技大学的university has的department的名称,以及这些department has的teacher的名称", "completion": "match(a:university where a.name <> '电子科技大学')-[e:has]->(b:department)-[e2:has]->(c:teacher) return b.name as b_name, c.name as c_name"}
{"prompt": "帮我查询和teacher王思思之间有teach关系的course", "completion": "match(a:teacher where a.name='王思思')-[e:teach]->(b:course) return b"}
{"prompt": "请帮我查找全部与大学华中科技大学有关系的教师的身高", "completion": "match(a:university where a.name='华中科技大学')-[e]-(b:teacher) return b.height"}
{"prompt": "返回所有名为四川大学的点拥有的部门", "completion": "match(a where a.name='四川大学')-[e:has]->(b:department) return b"}
{"prompt": "查询全部名为物理学院的点的,年龄不为空且性别等于63的伙伴,返回这些伙伴的薪资,和边的目标点id", "completion": "match(a where a.name='物理学院')-[e:partner]->(b where (b.age is not null) and b.gender = 63) return b.salary,e.targetId"}
{"prompt": "查询所有和department点有has关系的teacher节点,且边满足条件srcId大于等于198.46,目标teacher节点满足条件id是27", "completion": "match(a:department)-[e:has where e.srcId >= 198.46]->(b:teacher where b.id = 27) return b"}
{"prompt": "查询部门拥有的教师,返回其源点的价值乘81的和,以及目标点的身高除186的值", "completion": "match(a:department)-[e:has]->(b:teacher) return SUM(a.value * 81), b.height / 186"}
{"prompt": "返回名为马科的学生,以及与其有关的教师,并返回马科的id和这些教师的薪资", "completion": "match(a:student where name = '马科')-[e]-(b:teacher) return a.id, b.salary"}
{"prompt": "找出48个和类型为国家的点有包含关系的城市,以及和这些城市有包含关系的大学", "completion": "match(a:country)-[e:contain]->(b:city)-[e2:contain]->(c:university) return c limit 48"}
{"prompt": "帮我查询与阿里存在属于关系的城市,城市与国家存在属于关系的点,返回这些点的人数", "completion": "match(a where a.name = '阿里')-[e:belong]->(b:city)-[e2:belong]->(c:country) return c.peopleNumber"}
{"prompt": "请帮我找出城市天津包含的公司节点合作的大学", "completion": "match(a:city where a.name = '天津')-[e:contain]->(b:company)-[e2:cooperate]->(c:university) return c"}
{"prompt": "请帮我查找与城市重庆有关,且与大学复旦大学有关系的公司节点", "completion": "match(a:city where a.name='重庆')-[e:contain]-(b:company)-[e2:cooperate]-(c:university where c.name='复旦大学') return b"}
{"prompt": "给出与country日本存在contain关系,且与company微软存在contain关系的city节点，返回这些city的peopleNumber,及country日本的value,及company微软的name", "completion": "match(a:country where a.name='日本')-[e:contain]->(b:city)<-[e2:contain]-(c:company where c.name='微软') return a.value,b.peopleNumber,c.name"}
{"prompt": "返回和标签等于company的点有belong关系的city,且和这些city有contain关系的university,且和这些university有cooperate关系的company", "completion": "match(a:company)-[e:belong]->(b:city)-[e2:contain]->(c:university)-[e3:cooperate]->(d:company) return d"}
{"prompt": "请帮我找出peopleNumber为空的country contain的city的名称,以及这些city contain的company的名称", "completion": "match(a:country where (a.peopleNumber is null))-[e:contain]->(b:city)-[e2:contain]->(c:company) return b.name as b_name, c.name as c_name"}
{"prompt": "帮我查询所有和大学四川大学之间有合作关系的公司", "completion": "match(a:university where a.name='四川大学')-[e:cooperate]->(b:company) return b"}
{"prompt": "帮我查询所有与国家日本有关系的国家的人数", "completion": "match(a:country where a.name='日本')-[e]-(b:country) return b.peopleNumber"}
{"prompt": "查找全部名为重庆大学的点属于的城市", "completion": "match(a where a.name='重庆大学')-[e:belong]->(b:city) return b"}
{"prompt": "给出名为英国的点的,id大于等于11的相关者,返回这些相关者的id,和边的权重,f0", "completion": "match(a where a.name='英国')-[e:relation]->(b where b.id >= 11) return b.id,e.weight, e.f0"}
{"prompt": "请帮我找出和city点有contain关系的university节点,且边满足条件f1不是true,目标university节点name等于武汉大学", "completion": "match(a:city)-[e:contain where e.f1 <> true]->(b:university where b.name = '武汉大学') return b"}
{"prompt": "返回公司合作的大学,返回其源点的价值除375的值,以及目标点的id乘56的求和值", "completion": "match(a:company)-[e:cooperate]->(b:university) return a.value / 375, SUM(b.id * 56)"}
{"prompt": "请帮我找出名为天津的城市,以及与其有关的公司,并返回天津的价值和这些公司的id", "completion": "match(a:city where name = '天津')-[e]-(b:company) return a.value, b.id"}
{"prompt": "查询177个和类型是person的点有watch关系的film,且和这些film有has关系的tag", "completion": "match(a:person)-[e:watch]->(b:film)-[e2:has]->(c:tag) return c limit 177"}
{"prompt": "找出与李强存在likes关系的comment,comment与film存在belong关系的点,返回这些点的category", "completion": "match(a where a.name = '李强')-[e:likes]->(b:comment)-[e2:belong]->(c:film) return c.category"}
{"prompt": "查找评论Comment_372属于的电影节点拥有的标签", "completion": "match(a:comment where a.name = 'Comment_372')-[e:belong]->(b:film)-[e2:has]->(c:tag) return c"}
{"prompt": "查找与person黄轩有关,且与tag悬疑有关系的film节点", "completion": "match(a:person where a.name='黄轩')-[e:watch]-(b:film)-[e2:has]-(c:tag where c.name='悬疑') return b"}
{"prompt": "请帮我找出与cinema好视影院存在releases关系,且与tag科幻存在has关系的film节点，返回这些film的category,value,name,及cinema好视影院的id,及tag科幻的name", "completion": "match(a:cinema where a.name='好视影院')-[e:releases]->(b:film)<-[e2:has]-(c:tag where c.name='科幻') return a.id,b.category, b.value, b.name,c.name"}
{"prompt": "请帮我查找和标签等于person的点有创造关系的评论,以及和这些评论有属于关系的电影,以及和这些电影有拥有关系的标签", "completion": "match(a:person)-[e:creates]->(b:comment)-[e2:belong]->(c:film)-[e3:has]->(d:tag) return d"}
{"prompt": "查询名字不等于41的person创造的评论的名称,以及这些评论 属于的电影的名称", "completion": "match(a:person where a.name <> 41)-[e:creates]->(b:comment)-[e2:belong]->(c:film) return b.name as b_name, c.name as c_name"}
{"prompt": "查找所有和评论Comment_480之间有属于关系的电影", "completion": "match(a:comment where a.name='Comment_480')-[e:belong]->(b:film) return b"}
{"prompt": "帮我查询与comment Comment_306有关系的tag的name", "completion": "match(a:comment where a.name='Comment_306')-[e]-(b:tag) return b.name"}
{"prompt": "找出全部名为人人影城的点releases的film", "completion": "match(a where a.name='人人影城')-[e:releases]->(b:film) return b"}
{"prompt": "给出名为王思思的点的,创建时间不等于2013年01月28日的朋友,返回这些朋友的名字,和边的源点id", "completion": "match(a where a.name='王思思')-[e:friend]->(b where b.createTime <> '2013-01-28') return b.name,e.srcId"}
{"prompt": "帮我查询和person点有watch关系的film节点,且边满足条件weight不是105.49,目标film节点满足条件id在29到96之间", "completion": "match(a:person)-[e:watch where e.weight <> 105.49]->(b:film where (b.id BETWEEN 29 AND 96)) return b"}
{"prompt": "找出person watch的film,返回其源点的salary减7711的值,以及目标点的value对215取余的最大值", "completion": "match(a:person)-[e:watch]->(b:film) return a.salary - 7711, MAX(b.value % 215)"}
{"prompt": "找出名为孙建国的person,以及与其有关的标签,并返回孙建国的年龄和这些标签的id", "completion": "match(a:person where name = '孙建国')-[e]-(b:tag) return a.age, b.id"}
{"prompt": "查询40个和标签为person的点有认识关系的person,且和这些person有喜欢关系的person", "completion": "match(a:person)-[e:knows]->(b:person)-[e2:likes]->(c:person) return c limit 40"}
{"prompt": "找出所有与赵伟存在支付关系的person,person与person存在支付关系的点,返回这些点的性别", "completion": "match(a where a.name = '赵伟')-[e:pay]->(b:person)-[e2:pay]->(c:person) return c.gender"}
{"prompt": "返回person韩强pay的person节点likes的person", "completion": "match(a:person where a.name = '韩强')-[e:pay]->(b:person)-[e2:likes]->(c:person) return c"}
{"prompt": "查找与person黄科有关,且与person赵强有关系的person节点", "completion": "match(a:person where a.name='黄科')-[e:pay]-(b:person)-[e2:pay]-(c:person where c.name='赵强') return b"}
{"prompt": "帮我查询与person Sam存在knows关系,且与person周若涵存在pay关系的person节点，返回这些person的name,height,及person Sam的gender,及person周若涵的age", "completion": "match(a:person where a.name='Sam')-[e:knows]->(b:person)<-[e2:pay]-(c:person where c.name='周若涵') return a.gender,b.name, b.height,c.age"}
{"prompt": "返回和label为person的点有认识关系的person,以及和这些person有支付关系的person,以及和这些person有认识关系的person", "completion": "match(a:person)-[e:knows]->(b:person)-[e2:pay]->(c:person)-[e3:knows]->(d:person) return d"}
{"prompt": "请帮我查找年龄小于86且薪资不为空的person喜欢的person的名称,以及这些person 喜欢的person的名称", "completion": "match(a:person where a.age < 86 and (a.salary is not null))-[e:likes]->(b:person)-[e2:likes]->(c:person) return b.name as b_name, c.name as c_name"}
{"prompt": "请帮我找出和person李若涵之间有支付关系的person", "completion": "match(a:person where a.name='李若涵')-[e:pay]->(b:person) return b"}
{"prompt": "帮我查询全部与person郑红有关系的person的身高", "completion": "match(a:person where a.name='郑红')-[e]-(b:person) return b.height"}
{"prompt": "帮我查询所有名为郑雪的点支付的person", "completion": "match(a where a.name='郑雪')-[e:pay]->(b:person) return b"}
{"prompt": "找出所有名为李国强的点的,salary在5427到6163之间或salary大于7392的partner,返回这些partner的name,和边的f0,srcId", "completion": "match(a where a.name='李国强')-[e:partner]->(b where (b.salary BETWEEN 5427 AND 6163) or b.salary > 7392) return b.name,e.f0, e.srcId"}
{"prompt": "帮我查询全部和person点有喜欢关系的person节点,且边满足条件目标点id小于170,目标person节点满足条件性别不等于famale", "completion": "match(a:person)-[e:likes where e.targetId < 170]->(b:person where b.gender <> 'famale') return b"}
{"prompt": "找出person支付的person,返回其源点的id的平均值加9的值,以及目标点的身高减163的最小值", "completion": "match(a:person)-[e:pay]->(b:person) return AVG(a.id) + 9, MIN(b.height - 163)"}
{"prompt": "给出名为郑思思的person,以及与其有关的person,并返回郑思思的id和这些person的名字", "completion": "match(a:person where name = '郑思思')-[e]-(b:person) return a.id, b.name"}
{"prompt": "请帮我查找3个和类型为用户的点有发布关系的帖子,并且和这些帖子有拥有关系的标签", "completion": "match(a:user)-[e:publish]->(b:post)-[e2:has]->(c:tag) return c limit 3"}
{"prompt": "找出所有与吴思思存在喜欢关系的帖子,帖子与标签存在拥有关系的点,返回这些点的id", "completion": "match(a where a.name = '吴思思')-[e:likes]->(b:post)-[e2:has]->(c:tag) return c.id"}
{"prompt": "查询论坛中国诗词论坛包含的用户节点发布的帖子", "completion": "match(a:forum where a.name = '中国诗词论坛')-[e:contain]->(b:user)-[e2:publish]->(c:post) return c"}
{"prompt": "返回与用户何建聪有关,且与标签喜剧有关系的帖子节点", "completion": "match(a:user where a.name='何建聪')-[e:publish]-(b:post)-[e2:has]-(c:tag where c.name='喜剧') return b"}
{"prompt": "给出与论坛天涯论坛存在包含关系,且与帖子Post_390存在喜欢关系的用户节点，返回这些用户的身高,薪资,年龄,及论坛天涯论坛的名字,及帖子Post_390的价值", "completion": "match(a:forum where a.name='天涯论坛')-[e:contain]->(b:user)<-[e2:likes]-(c:post where c.name='Post_390') return a.name,b.height, b.salary, b.age,c.value"}
{"prompt": "查找和类型是论坛的点有包含关系的用户,并且和这些用户有喜欢关系的帖子,并且和这些帖子有拥有关系的标签", "completion": "match(a:forum)-[e:contain]->(b:user)-[e2:likes]->(c:post)-[e3:has]->(d:tag) return d"}
{"prompt": "查询身高不为空或薪资大于7712的用户喜欢的帖子的名称,以及这些帖子 拥有的标签的名称", "completion": "match(a:user where (a.height is not null) or a.salary > 7712)-[e:likes]->(b:post)-[e2:has]->(c:tag) return b.name as b_name, c.name as c_name"}
{"prompt": "查询和用户周建国之间有发布关系的帖子", "completion": "match(a:user where a.name='周建国')-[e:publish]->(b:post) return b"}
{"prompt": "请帮我查找所有与论坛中国诗词论坛有关系的论坛的名字", "completion": "match(a:forum where a.name='中国诗词论坛')-[e]-(b:forum) return b.name"}
{"prompt": "给出名为何思琪的点喜欢的帖子", "completion": "match(a where a.name='何思琪')-[e:likes]->(b:post) return b"}
{"prompt": "给出所有名为推特的点的,语言大于等于625的朋友,返回这些朋友的创建时间,和边的源点id,目标点id", "completion": "match(a where a.name='推特')-[e:friend]->(b where b.lang >= 625) return b.createTime,e.srcId, e.targetId"}
{"prompt": "帮我查询和用户点有发布关系的帖子节点,且边满足条件f0小于856,目标帖子节点字数不为空", "completion": "match(a:user)-[e:publish where e.f0 < 856]->(b:post where (b.wordCount is not null)) return b"}
{"prompt": "查询论坛包含的用户,返回其源点的id除73的值,以及目标点的身高对179取余的最小值", "completion": "match(a:forum)-[e:contain]->(b:user) return a.id / 73, MIN(b.height % 179)"}
{"prompt": "给出名为悬疑的标签,以及与其有关的帖子,并返回悬疑的价值和这些帖子的id", "completion": "match(a:tag where name = '悬疑')-[e]-(b:post) return a.value, b.id"}
{"prompt": "请帮我查找13个和label为编辑的点有发布关系的书,以及和这些书有引用关系的书", "completion": "match(a:publisher)-[e:publish]->(b:book)-[e2:refers]->(c:book) return c limit 13"}
{"prompt": "查找与何思思存在认识关系的作家,作家与作家存在认识关系的点,返回这些点的身高", "completion": "match(a where a.name = '何思思')-[e:knows]->(b:author)-[e2:knows]->(c:author) return c.height"}
{"prompt": "帮我查询作家何科认识的作家节点认识的作家", "completion": "match(a:author where a.name = '何科')-[e:knows]->(b:author)-[e2:knows]->(c:author) return c"}
{"prompt": "请帮我查找与作家徐轩有关,且与作家张科有关系的作家节点", "completion": "match(a:author where a.name='徐轩')-[e:knows]-(b:author)-[e2:knows]-(c:author where c.name='张科') return b"}
{"prompt": "给出与作家黄国强存在认识关系,且与书三体存在撰写关系的作家节点，返回这些作家的年龄,身高,名字,及作家黄国强的薪资,及书三体的类别", "completion": "match(a:author where a.name='黄国强')-[e:knows]->(b:author)<-[e2:write]-(c:book where c.name='三体') return a.salary,b.age, b.height, b.name,c.category"}
{"prompt": "请帮我查找和标签等于作家的点有认识关系的作家,以及和这些作家有认识关系的作家,以及和这些作家有认识关系的作家", "completion": "match(a:author)-[e:knows]->(b:author)-[e2:knows]->(c:author)-[e3:knows]->(d:author) return d"}
{"prompt": "请帮我查找名字不是杜若涵或年龄不为空的作家撰写的书的名称,以及这些书 认识的书的名称", "completion": "match(a:author where a.name <> '杜若涵' or (a.age is not null))-[e:write]->(b:book)-[e2:knows]->(c:book) return b.name as b_name, c.name as c_name"}
{"prompt": "帮我查询所有和读者何科之间有喜欢关系的书", "completion": "match(a:reader where a.name='何科')-[e:likes]->(b:book) return b"}
{"prompt": "请帮我找出全部与读者Alice有关系的作家的性别", "completion": "match(a:reader where a.name='Alice')-[e]-(b:author) return b.gender"}
{"prompt": "给出所有名为马国强的点喜欢的书", "completion": "match(a where a.name='马国强')-[e:likes]->(b:book) return b"}
{"prompt": "找出所有名为王若涵的点的,id为29且age小于56的relation,返回这些relation的gender,和边的weight,targetId,f0", "completion": "match(a where a.name='王若涵')-[e:relation]->(b where b.id = 29 and b.age < 56) return b.gender,e.weight, e.targetId, e.f0"}
{"prompt": "找出和publisher点有publish关系的book节点,且边满足条件f1不等于false,目标book节点id等于98", "completion": "match(a:publisher)-[e:publish where e.f1 <> false]->(b:book where b.id = 98) return b"}
{"prompt": "请帮我查找reader likes的book,返回其源点的height对158取余对3570取余的值,以及目标点的id减96的最小值", "completion": "match(a:reader)-[e:likes]->(b:book) return a.height % 158 % 3570, MIN(b.id - 96)"}
{"prompt": "给出名为黄梅的author,以及与其有关的author,并返回黄梅的age和这些author的age", "completion": "match(a:author where name = '黄梅')-[e]-(b:author) return a.age, b.age"}
{"prompt": "给出17个和类型为账号的点有还款关系的贷款,且和这些贷款有存款关系的账号", "completion": "match(a:account)-[e:repay]->(b:loan)-[e2:deposit]->(c:account) return c limit 17"}
{"prompt": "请帮我找出与LX001存在转账关系的账号,账号与贷款存在还款关系的点,返回这些点的金额", "completion": "match(a where a.name = 'LX001')-[e:transfer]->(b:account)-[e2:repay]->(c:loan) return c.amount"}
{"prompt": "请帮我找出贷款loan_90存款的账号节点转账的账号", "completion": "match(a:loan where a.name = 'loan_90')-[e:deposit]->(b:account)-[e2:transfer]->(c:account) return c"}
{"prompt": "找出与账号Light有关,且与账号Light有关系的贷款节点", "completion": "match(a:account where a.name='Light')-[e:repay]-(b:loan)-[e2:deposit]-(c:account where c.name='Light') return b"}
{"prompt": "请帮我查找与person何国强存在申请关系,且与账号XiaoHu存在存款关系的贷款节点，返回这些贷款的id,金额,权重,及person何国强的性别,及账号XiaoHu的价值", "completion": "match(a:person where a.name='何国强')-[e:apply]->(b:loan)<-[e2:deposit]-(c:account where c.name='XiaoHu') return a.gender,b.id, b.amount, b.weight,c.value"}
{"prompt": "查找和标签为account的点有transfer关系的account,以及和这些account有transfer关系的account,以及和这些account有transfer关系的account", "completion": "match(a:account)-[e:transfer]->(b:account)-[e2:transfer]->(c:account)-[e3:transfer]->(d:account) return d"}
{"prompt": "请帮我查找身高小于166,id不为空的person拥有的账号的名称,以及这些账号 转账的账号的名称", "completion": "match(a:person where a.height < 166 and (a.id is not null))-[e:own]->(b:account)-[e2:transfer]->(c:account) return b.name as b_name, c.name as c_name"}
{"prompt": "找出所有和person马建国之间有invest关系的company", "completion": "match(a:person where a.name='马建国')-[e:invest]->(b:company) return b"}
{"prompt": "请帮我找出与account Faker有关系的account的name", "completion": "match(a:account where a.name='Faker')-[e]-(b:account) return b.name"}
{"prompt": "查询全部名为赵思思的点申请的贷款", "completion": "match(a where a.name='赵思思')-[e:apply]->(b:loan) return b"}
{"prompt": "请帮我查找所有名为loan_27的点的,是否冻结不等于false或是否冻结为false的相关者,返回这些相关者的是否冻结,和边的源点id", "completion": "match(a where a.name='loan_27')-[e:relation]->(b where b.isBlock <> false or b.isBlock = false) return b.isBlock,e.srcId"}
{"prompt": "请帮我查找所有和person点有申请关系的贷款节点,且边满足条件f0小于等于28,目标贷款节点满足条件权重大于7756.53", "completion": "match(a:person)-[e:apply where e.f0 <= 28]->(b:loan where b.weight > 7756.53) return b"}
{"prompt": "找出person拥有的账号,返回其源点的id加10加91除年龄加6061的和,以及目标点的id对31取余除427的值", "completion": "match(a:person)-[e:own]->(b:account) return SUM((a.id + 10 + 91) / a.age + 6061), b.id % 31 / 427"}
{"prompt": "查询名为王伟的person,以及与其有关的company,并返回王伟的salary和这些company的id", "completion": "match(a:person where name = '王伟')-[e]-(b:company) return a.salary, b.id"}
{"prompt": "查询32个和标签为合并请求的点有属于关系的仓库,以及和这些仓库有拥有关系的事项", "completion": "match(a:pullRequest)-[e:belong]->(b:repository)-[e2:has]->(c:issue) return c limit 32"}
{"prompt": "给出全部与韩雪存在创造关系的事项,事项与仓库存在属于关系的点,返回这些点的权重", "completion": "match(a where a.name = '韩雪')-[e:creates]->(b:issue)-[e2:belong]->(c:repository) return c.weight"}
{"prompt": "找出仓库FSM拥有的合并请求节点属于的仓库", "completion": "match(a:repository where a.name = 'FSM')-[e:has]->(b:pullRequest)-[e2:belong]->(c:repository) return c"}
{"prompt": "查询与事项ISSUE-154有关,且与事项ISSUE-75有关系的仓库节点", "completion": "match(a:issue where a.name='ISSUE-154')-[e:belong]-(b:repository)-[e2:has]-(c:issue where c.name='ISSUE-75') return b"}
{"prompt": "查找与issue ISSUE-410存在belong关系,且与user李思琪存在has关系的repository节点，返回这些repository的createTime,name,及issue ISSUE-410的weight,及user李思琪的gender", "completion": "match(a:issue where a.name='ISSUE-410')-[e:belong]->(b:repository)<-[e2:has]-(c:user where c.name='李思琪') return a.weight,b.createTime, b.name,c.gender"}
{"prompt": "查询和类型是用户的点有创造关系的事项,并且和这些事项有属于关系的仓库,并且和这些仓库有拥有关系的事项", "completion": "match(a:user)-[e:creates]->(b:issue)-[e2:belong]->(c:repository)-[e3:has]->(d:issue) return d"}
{"prompt": "请帮我查找性别小于69或身高不是150的用户喜欢的仓库的名称,以及这些仓库 拥有的事项的名称", "completion": "match(a:user where a.gender < 69 or a.height <> 150)-[e:likes]->(b:repository)-[e2:has]->(c:issue) return b.name as b_name, c.name as c_name"}
{"prompt": "请帮我找出所有和用户周国强之间有创造关系的合并请求", "completion": "match(a:user where a.name='周国强')-[e:creates]->(b:pullRequest) return b"}
{"prompt": "请帮我查找所有与合并请求PR-194有关系的事项的状态", "completion": "match(a:pullRequest where a.name='PR-194')-[e]-(b:issue) return b.status"}
{"prompt": "给出全部名为XXRepo的点has的issue", "completion": "match(a where a.name='XXRepo')-[e:has]->(b:issue) return b"}
{"prompt": "查询名为ISSUE-97的点的,权重对权重取余为76,权重不是932的相关者,返回这些相关者的语言,和边的源点id,权重,f0", "completion": "match(a where a.name='ISSUE-97')-[e:relation]->(b where b.weight % b.weight = 76 and b.weight <> 932) return b.lang,e.srcId, e.weight, e.f0"}
{"prompt": "找出所有和用户点有创造关系的合并请求节点,且边满足条件时间戳是2030年07月13日,目标合并请求节点满足条件创建时间为2025年12月08日", "completion": "match(a:user)-[e:creates where e.timeStamp = '2030-07-13']->(b:pullRequest where b.createTime = '2025-12-08') return b"}
{"prompt": "返回user likes的repository,返回其源点的id加88的平均值,以及目标点的stars乘292的值", "completion": "match(a:user)-[e:likes]->(b:repository) return AVG(a.id + 88), b.stars * 292"}
{"prompt": "请帮我查找名为PR-50的合并请求,以及与其有关的仓库,并返回PR-50的名字和这些仓库的id", "completion": "match(a:pullRequest where name = 'PR-50')-[e]-(b:repository) return a.name, b.id"}
{"prompt": "帮我查询145个和标签为买家的点有创造关系的订单,并且和这些订单有包含关系的商品", "completion": "match(a:buyer)-[e:creates]->(b:orders)-[e2:contain]->(c:goods) return c limit 145"}
{"prompt": "帮我查询全部与陈思琪存在取消关系的订单,订单与商品存在包含关系的点,返回这些点的id", "completion": "match(a where a.name = '陈思琪')-[e:cancel]->(b:orders)-[e2:contain]->(c:goods) return c.id"}
{"prompt": "查询买家王思思创造的订单节点包含的商品", "completion": "match(a:buyer where a.name = '王思思')-[e:creates]->(b:orders)-[e2:contain]->(c:goods) return c"}
{"prompt": "帮我查询与买家Sam有关,且与买家徐梅有关系的卖家节点", "completion": "match(a:buyer where a.name='Sam')-[e:consult]-(b:seller)-[e2:ask]-(c:buyer where c.name='徐梅') return b"}
{"prompt": "帮我查询与买家黄强存在咨询关系,且与买家郑科存在回答关系的卖家节点，返回这些卖家的身高,及买家黄强的身高,及买家郑科的性别", "completion": "match(a:buyer where a.name='黄强')-[e:consult]->(b:seller)<-[e2:ask]-(c:buyer where c.name='郑科') return a.height,b.height,c.gender"}
{"prompt": "查找和标签为卖家的点有回答关系的买家,且和这些买家有取消关系的订单,且和这些订单有包含关系的商品", "completion": "match(a:seller)-[e:ask]->(b:buyer)-[e2:cancel]->(c:orders)-[e3:contain]->(d:goods) return d"}
{"prompt": "找出身高在157到189之间或id不为空的卖家回答的买家的名称,以及这些买家 取消的订单的名称", "completion": "match(a:seller where (a.height BETWEEN 157 AND 189) or (a.id is not null))-[e:ask]->(b:buyer)-[e2:cancel]->(c:orders) return b.name as b_name, c.name as c_name"}
{"prompt": "查找所有和卖家赵宏之间有拥有关系的商品", "completion": "match(a:seller where a.name='赵宏')-[e:has]->(b:goods) return b"}
{"prompt": "查询全部与买家周梅有关系的订单的名字", "completion": "match(a:buyer where a.name='周梅')-[e]-(b:orders) return b.name"}
{"prompt": "查找全部名为赵科的点cancel的orders", "completion": "match(a where a.name='赵科')-[e:cancel]->(b:orders) return b"}
{"prompt": "请帮我查找所有名为韩建聪的点的,id在7到24之间,价值为空的朋友,返回这些朋友的名字,和边的f1,权重,源点id", "completion": "match(a where a.name='韩建聪')-[e:friend]->(b where (b.id BETWEEN 7 AND 24) and (b.value is null)) return b.name,e.f1, e.weight, e.srcId"}
{"prompt": "给出全部和买家点有查看关系的商品节点,且边满足条件权重在103.55到160.99之间,目标商品节点销量等于1340.42", "completion": "match(a:buyer)-[e:look where (e.weight BETWEEN 103.55 AND 160.99)]->(b:goods where b.sellerNumber = 1340.42) return b"}
{"prompt": "返回订单包含的商品,返回其源点的价格乘1639.33的数量,以及目标点的价值加586的值", "completion": "match(a:orders)-[e:contain]->(b:goods) return COUNT(a.price * 1639.33), b.value + 586"}
{"prompt": "查找名为Order_162的订单,以及与其有关的商品,并返回Order_162的id和这些商品的价值", "completion": "match(a:orders where name = 'Order_162')-[e]-(b:goods) return a.id, b.value"}
{"prompt": "请帮我查找与名为郑科和张红的点共同关联的,类型是person的节点", "completion": "match(a where a.name = '郑科')-[e:relates]->(b:person)<-[e2:relates]-(c where c.name = '张红') return b"}
{"prompt": "给出与person徐雪和张科都存在lover关系的点", "completion": "match(a:person where a.name='徐雪')-[e:lover]->(b)<-[e2:lover]-(c:person where c.name='张科') return b"}
{"prompt": "给出名为Alan和杜国强的,label为person的点公共的恋人节点的名单", "completion": "match(a:person where a.name='Alan')-[e:lover]->(b)<-[e2:lover]-(c:person where c.name='杜国强') return b.name"}
{"prompt": "请帮我查找29个person张建国和黄宏,共同的恋人", "completion": "match(a:person where a.name='张建国')-[e:lover]->(b)<-[e2:lover]-(c:person where c.name='黄宏') return b limit 29"}
{"prompt": "给出122个与韩建国和郑强都存在关系的person节点", "completion": "match(a where a.name='韩建国')-[e]->(b:person)<-[e2]-(c where c.name='郑强') return b limit 122"}
{"prompt": "请帮我找出与名为Calcite和Zookeeper的点共同使用的,类型是软件的节点", "completion": "match(a where a.name = 'Calcite')-[e:uses]->(b:software)<-[e2:uses]-(c where c.name = 'Zookeeper') return b"}
{"prompt": "查询与person何建聪和王思思都存在认识关系的点", "completion": "match(a:person where a.name='何建聪')-[e:knows]->(b)<-[e2:knows]-(c:person where c.name='王思思') return b"}
{"prompt": "查找名为阿里和蚂蚁集团的,label为company的点公共的friend节点的名单", "completion": "match(a:company where a.name='阿里')-[e:friend]->(b)<-[e2:friend]-(c:company where c.name='蚂蚁集团') return b.name"}
{"prompt": "找出37个person王雪和周国强,共同的朋友", "completion": "match(a:person where a.name='王雪')-[e:friend]->(b)<-[e2:friend]-(c:person where c.name='周国强') return b limit 37"}
{"prompt": "给出175个与Redis和SprintBoot都存在关系的person或公司或软件节点", "completion": "match(a where a.name='Redis')-[e]->(b:person | company | software)<-[e2]-(c where c.name='SprintBoot') return b limit 175"}
{"prompt": "请帮我找出与名为Prescription_227和Prescription_437的点共同包含的,标签等于药品的节点", "completion": "match(a where a.name = 'Prescription_227')-[e:contain]->(b:medicine)<-[e2:contain]-(c where c.name = 'Prescription_437') return b"}
{"prompt": "请帮我找出与patient何伟和马思琪都存在accept关系的点", "completion": "match(a:patient where a.name='何伟')-[e:accept]->(b)<-[e2:accept]-(c:patient where c.name='马思琪') return b"}
{"prompt": "查找名为杜月和赵若涵的,标签等于doctor的点公共的friend节点的名单", "completion": "match(a:doctor where a.name='杜月')-[e:friend]->(b)<-[e2:friend]-(c:doctor where c.name='赵若涵') return b.name"}
{"prompt": "给出43个医生何建国和杜思思,共同的伙伴", "completion": "match(a:doctor where a.name='何建国')-[e:partner]->(b)<-[e2:partner]-(c:doctor where c.name='杜思思') return b limit 43"}
{"prompt": "查找47个与耳鼻喉科和内科都存在关系的doctor节点", "completion": "match(a where a.name='耳鼻喉科')-[e]->(b:doctor)<-[e2]-(c where c.name='内科') return b limit 47"}
{"prompt": "请帮我查找与名为李思思和马强的点共同教的,标签等于课程的节点", "completion": "match(a where a.name = '李思思')-[e:teach]->(b:course)<-[e2:teach]-(c where c.name = '马强') return b"}
{"prompt": "找出与部门艺术学院和土木学院都存在拥有关系的点", "completion": "match(a:department where a.name='艺术学院')-[e:has]->(b)<-[e2:has]-(c:department where c.name='土木学院') return b"}
{"prompt": "请帮我查找名为李伟和Sam的,类型是student的点公共的partner节点的名单", "completion": "match(a:student where a.name='李伟')-[e:partner]->(b)<-[e2:partner]-(c:student where c.name='Sam') return b.name"}
{"prompt": "查询32个大学北京大学和电子科技大学,共同的伙伴", "completion": "match(a:university where a.name='北京大学')-[e:partner]->(b)<-[e2:partner]-(c:university where c.name='电子科技大学') return b limit 32"}
{"prompt": "帮我查询40个与形势与政策和程序设计都存在关系的教师或学生节点", "completion": "match(a where a.name='形势与政策')-[e]->(b:teacher | student)<-[e2]-(c where c.name='程序设计') return b limit 40"}
{"prompt": "找出与名为巴黎和天津的点共同包含的,标签为大学的节点", "completion": "match(a where a.name = '巴黎')-[e:contain]->(b:university)<-[e2:contain]-(c where c.name = '天津') return b"}
{"prompt": "帮我查询与大学复旦大学和武汉大学都存在合作关系的点", "completion": "match(a:university where a.name='复旦大学')-[e:cooperate]->(b)<-[e2:cooperate]-(c:university where c.name='武汉大学') return b"}
{"prompt": "给出名为北京和重庆的,标签等于city的点公共的relation节点的名单", "completion": "match(a:city where a.name='北京')-[e:relation]->(b)<-[e2:relation]-(c:city where c.name='重庆') return b.name"}
{"prompt": "查找56个大学重庆大学和武汉大学,共同的伙伴", "completion": "match(a:university where a.name='重庆大学')-[e:partner]->(b)<-[e2:partner]-(c:university where c.name='武汉大学') return b limit 56"}
{"prompt": "找出153个与阿里和微软都存在关系的大学或国家节点", "completion": "match(a where a.name='阿里')-[e]->(b:university | country)<-[e2]-(c where c.name='微软') return b limit 153"}
{"prompt": "找出与名为人人影城和好视影院的点共同releases的,类型是film的节点", "completion": "match(a where a.name = '人人影城')-[e:releases]->(b:film)<-[e2:releases]-(c where c.name = '好视影院') return b"}
{"prompt": "给出与电影绿巨人和泰坦尼克号都存在拥有关系的点", "completion": "match(a:film where a.name='绿巨人')-[e:has]->(b)<-[e2:has]-(c:film where c.name='泰坦尼克号') return b"}
{"prompt": "帮我查询名为张建聪和徐红的,label为person的点公共的相关者节点的名单", "completion": "match(a:person where a.name='张建聪')-[e:relation]->(b)<-[e2:relation]-(c:person where c.name='徐红') return b.name"}
{"prompt": "查找58个电影院好视影院和UME,共同的伙伴", "completion": "match(a:cinema where a.name='好视影院')-[e:partner]->(b)<-[e2:partner]-(c:cinema where c.name='UME') return b limit 58"}
{"prompt": "查找11个与Comment_303和Comment_461都存在关系的评论或电影院或电影节点", "completion": "match(a where a.name='Comment_303')-[e]->(b:comment | cinema | film)<-[e2]-(c where c.name='Comment_461') return b limit 11"}
{"prompt": "找出与名为周轩和杜雪的点共同认识的,标签等于person的节点", "completion": "match(a where a.name = '周轩')-[e:knows]->(b:person)<-[e2:knows]-(c where c.name = '杜雪') return b"}
{"prompt": "帮我查询与person赵若涵和赵思琪都存在pay关系的点", "completion": "match(a:person where a.name='赵若涵')-[e:pay]->(b)<-[e2:pay]-(c:person where c.name='赵思琪') return b"}
{"prompt": "查询名为马宏和徐宏的,label为person的点公共的伙伴节点的名单", "completion": "match(a:person where a.name='马宏')-[e:partner]->(b)<-[e2:partner]-(c:person where c.name='徐宏') return b.name"}
{"prompt": "返回12个person周雪和何轩,共同的伙伴", "completion": "match(a:person where a.name='周雪')-[e:partner]->(b)<-[e2:partner]-(c:person where c.name='何轩') return b limit 12"}
{"prompt": "请帮我找出146个与赵建聪和王国强都存在关系的person节点", "completion": "match(a where a.name='赵建聪')-[e]->(b:person)<-[e2]-(c where c.name='王国强') return b limit 146"}
{"prompt": "给出与名为Post_480和Post_376的点共同拥有的,label为标签的节点", "completion": "match(a where a.name = 'Post_480')-[e:has]->(b:tag)<-[e2:has]-(c where c.name = 'Post_376') return b"}
{"prompt": "请帮我找出与forum知网和知乎都存在contain关系的点", "completion": "match(a:forum where a.name='知网')-[e:contain]->(b)<-[e2:contain]-(c:forum where c.name='知乎') return b"}
{"prompt": "给出名为Post_195和Post_369的,类型是post的点公共的relation节点的名单", "completion": "match(a:post where a.name='Post_195')-[e:relation]->(b)<-[e2:relation]-(c:post where c.name='Post_369') return b.name"}
{"prompt": "帮我查询18个论坛中国军事论坛和天涯论坛,共同的朋友", "completion": "match(a:forum where a.name='中国军事论坛')-[e:friend]->(b)<-[e2:friend]-(c:forum where c.name='天涯论坛') return b limit 18"}
{"prompt": "给出113个与中国诗词论坛和知乎都存在关系的用户节点", "completion": "match(a where a.name='中国诗词论坛')-[e]->(b:user)<-[e2]-(c where c.name='知乎') return b limit 113"}
{"prompt": "返回与名为赵强和韩若涵的点共同knows的,类型为author的节点", "completion": "match(a where a.name = '赵强')-[e:knows]->(b:author)<-[e2:knows]-(c where c.name = '韩若涵') return b"}
{"prompt": "请帮我找出与书三体和呐喊都存在引用关系的点", "completion": "match(a:book where a.name='三体')-[e:refers]->(b)<-[e2:refers]-(c:book where c.name='呐喊') return b"}
{"prompt": "给出名为杜梅和徐宏的,label为读者的点公共的朋友节点的名单", "completion": "match(a:reader where a.name='杜梅')-[e:friend]->(b)<-[e2:friend]-(c:reader where c.name='徐宏') return b.name"}
{"prompt": "找出198个作家韩强和徐科,共同的朋友", "completion": "match(a:author where a.name='韩强')-[e:friend]->(b)<-[e2:friend]-(c:author where c.name='徐科') return b limit 198"}
{"prompt": "查询119个与赵建聪和赵月都存在关系的编辑或读者节点", "completion": "match(a where a.name='赵建聪')-[e]->(b:publisher | reader)<-[e2]-(c where c.name='赵月') return b limit 119"}
{"prompt": "查询与名为Zeus和Geaflow123的点共同转账的,类型为账号的节点", "completion": "match(a where a.name = 'Zeus')-[e:transfer]->(b:account)<-[e2:transfer]-(c where c.name = 'Geaflow123') return b"}
{"prompt": "请帮我查找与公司华为和腾讯都存在申请关系的点", "completion": "match(a:company where a.name='华为')-[e:apply]->(b)<-[e2:apply]-(c:company where c.name='腾讯') return b"}
{"prompt": "找出名为Geaflow123和Faker的,类型为账号的点公共的伙伴节点的名单", "completion": "match(a:account where a.name='Geaflow123')-[e:partner]->(b)<-[e2:partner]-(c:account where c.name='Faker') return b.name"}
{"prompt": "请帮我查找98个账号XXD和LX001,共同的相关者", "completion": "match(a:account where a.name='XXD')-[e:relation]->(b)<-[e2:relation]-(c:account where c.name='LX001') return b limit 98"}
{"prompt": "帮我查询168个与Geaflow123和Light都存在关系的账号或贷款节点", "completion": "match(a where a.name='Geaflow123')-[e]->(b:account | loan)<-[e2]-(c where c.name='Light') return b limit 168"}
{"prompt": "给出与名为张伟和郑建聪的点共同创造的,标签等于合并请求的节点", "completion": "match(a where a.name = '张伟')-[e:creates]->(b:pullRequest)<-[e2:creates]-(c where c.name = '郑建聪') return b"}
{"prompt": "请帮我查找与issue ISSUE-255和ISSUE-478都存在belong关系的点", "completion": "match(a:issue where a.name='ISSUE-255')-[e:belong]->(b)<-[e2:belong]-(c:issue where c.name='ISSUE-478') return b"}
{"prompt": "找出名为何雪和张强的,label为用户的点公共的相关者节点的名单", "completion": "match(a:user where a.name='何雪')-[e:relation]->(b)<-[e2:relation]-(c:user where c.name='张强') return b.name"}
{"prompt": "查询183个用户韩若涵和赵轩,共同的相关者", "completion": "match(a:user where a.name='韩若涵')-[e:relation]->(b)<-[e2:relation]-(c:user where c.name='赵轩') return b limit 183"}
{"prompt": "查找104个与ISSUE-483和ISSUE-224都存在关系的合并请求节点", "completion": "match(a where a.name='ISSUE-483')-[e]->(b:pullRequest)<-[e2]-(c where c.name='ISSUE-224') return b limit 104"}
{"prompt": "帮我查询与名为Order_417和Order_483的点共同包含的,标签为商品的节点", "completion": "match(a where a.name = 'Order_417')-[e:contain]->(b:goods)<-[e2:contain]-(c where c.name = 'Order_483') return b"}
{"prompt": "返回与卖家陈伟和吴雪都存在拥有关系的点", "completion": "match(a:seller where a.name='陈伟')-[e:has]->(b)<-[e2:has]-(c:seller where c.name='吴雪') return b"}
{"prompt": "帮我查询名为Order_202和Order_439的,标签等于订单的点公共的伙伴节点的名单", "completion": "match(a:orders where a.name='Order_202')-[e:partner]->(b)<-[e2:partner]-(c:orders where c.name='Order_439') return b.name"}
{"prompt": "请帮我查找197个卖家马思琪和周轩,共同的朋友", "completion": "match(a:seller where a.name='马思琪')-[e:friend]->(b)<-[e2:friend]-(c:seller where c.name='周轩') return b limit 197"}
{"prompt": "请帮我找出20个与李建聪和王轩都存在关系的卖家或买家或商品节点", "completion": "match(a where a.name='李建聪')-[e]->(b:seller | buyer | goods)<-[e2]-(c where c.name='王轩') return b limit 20"}
{"prompt": "查询与person何国强有关系的person, 返回和这些person有关联的person的,salary的最小值减5112的值", "completion": "match(a:person where a.name= '何国强')-[e]-(b:person)-[e2]-(c:person) return MIN(c.salary) - 5112"}
{"prompt": "请帮我查找person徐轩 认识的person,返回person 认识的person的height的求和值对159取余的值", "completion": "match(a:person where name = '徐轩')-[e:knows]->(b:person)-[e2:knows]->(c:person) return SUM(c.height) % 159"}
{"prompt": "帮我查询所有源点标签等于person,边标签等于父母的边,返回这些边的f0加683的最小值,和源点id减39的平均值", "completion": "match(a:person)-[e:parent]->(b) return MIN(e.f0 + 683), AVG(e.srcId - 39)"}
{"prompt": "查询person杜建聪的所有父母,的目标点id减2乘48的值", "completion": "match(a:person where a.name= '杜建聪')-[e:parent]->(b) return (e.targetId - 2) * 48"}
{"prompt": "返回所有与person有关系的person节点,且person节点的年龄大于94,并返回这些person的年龄对64取余的值,以及person的年龄乘58的值", "completion": "match(a:person)-[e]->(b:person where b.age > 94) return b.age % 64, b.age * 58"}
{"prompt": "返回名为李若涵的点关联的person,并对这些person的身高进行求和", "completion": "match(a where a.name='李若涵')-[e:relates]->(b:person) return SUM(b.height)"}
{"prompt": "计算所有person的salary的数量乘salary的值", "completion": "match(a:person) return COUNT(a.salary) * a.salary"}
{"prompt": "请帮我找出与软件Zookeeper有关系的person, 返回和这些person有关联的person的,年龄除年龄的最大值", "completion": "match(a:software where a.name= 'Zookeeper')-[e]-(b:person)-[e2]-(c:person) return MAX(c.age / c.age)"}
{"prompt": "给出软件Calcite 使用的软件,返回软件 使用的软件的星数减星数的值", "completion": "match(a:software where name = 'Calcite')-[e:uses]->(b:software)-[e2:uses]->(c:software) return c.stars - c.stars"}
{"prompt": "请帮我查找源点标签等于person,边标签等于属于的边,返回这些边的源点id对157取余的最小值,和源点id减156的值", "completion": "match(a:person)-[e:belong]->(b) return MIN(e.srcId % 157), e.srcId - 156"}
{"prompt": "返回person马国强的所有朋友,的目标点id加目标点id的最小值", "completion": "match(a:person where a.name= '马国强')-[e:friend]->(b) return MIN(e.targetId + e.targetId)"}
{"prompt": "请帮我找出与公司有关系的person节点,且person节点的身高大于等于98,并返回这些person的身高对183取余的值,以及person的薪资对薪资取余的值", "completion": "match(a:company)-[e]->(b:person where b.height >= 98) return b.height % 183, b.salary % b.salary"}
{"prompt": "帮我查询名为陈红的点buy的software,并对这些software的lang进行求和", "completion": "match(a where a.name='陈红')-[e:buy]->(b:software) return SUM(b.lang)"}
{"prompt": "计算所有公司的peopleNumber的求和值减923加89的值", "completion": "match(a:company) return SUM(a.peopleNumber) - 923 + 89"}
{"prompt": "请帮我找出与病人吴思琪有关系的处方, 返回和这些处方有关联的病人的,salary的最大值加4228的值", "completion": "match(a:patient where a.name= '吴思琪')-[e]-(b:prescription)-[e2]-(c:patient) return MAX(c.salary) + 4228"}
{"prompt": "查找部门皮肤科 拥有的医生,返回医生 创造的处方的id除71的值", "completion": "match(a:department where name = '皮肤科')-[e:has]->(b:doctor)-[e2:creates]->(c:prescription) return c.id / 71"}
{"prompt": "请帮我找出源点label为医生,边label为属于的边,返回这些边的目标点id减目标点id的值,和源点id减190的平均值", "completion": "match(a:doctor)-[e:belong]->(b) return e.targetId - e.targetId, AVG(e.srcId - 190)"}
{"prompt": "给出doctor徐科的所有friend,的targetId加80的最大值", "completion": "match(a:doctor where a.name= '徐科')-[e:friend]->(b) return MAX(e.targetId + 80)"}
{"prompt": "帮我查询与patient有关系的prescription节点,且prescription节点的id为40,并返回这些prescription的weight除947减75乘weight的最大值,以及prescription的weight的最小值对280取余的值", "completion": "match(a:patient)-[e]->(b:prescription where b.id = 40) return MAX((b.weight / 947 - 75) * b.weight), MIN(b.weight) % 280"}
{"prompt": "返回名为何轩的点accept的全部prescription,并对这些prescription的createTime进行求和", "completion": "match(a where a.name='何轩')-[e:accept]->(b:prescription) return SUM(b.createTime)"}
{"prompt": "计算所有处方的权重乘555除40的平均值", "completion": "match(a:prescription) return AVG(a.weight * 555 / 40)"}
{"prompt": "查找与学生黄思琪有关系的学生, 返回和这些学生有关联的大学的,等级除3的最小值", "completion": "match(a:student where a.name= '黄思琪')-[e]-(b:student)-[e2]-(c:university) return MIN(c.level / 3)"}
{"prompt": "帮我查询学生周红 选择的课程,返回课程 属于的部门的价值除价值的值", "completion": "match(a:student where name = '周红')-[e:selects]->(b:course)-[e2:belong]->(c:department) return c.value / c.value"}
{"prompt": "查找所有源点标签为教师,边标签为教的边,返回这些边的权重除115.79的最大值,和f0减830的数量", "completion": "match(a:teacher)-[e:teach]->(b) return MAX(e.weight / 115.79), COUNT(e.f0 - 830)"}
{"prompt": "查询教师孙若涵的所有伙伴,的目标点id乘目标点id的最大值", "completion": "match(a:teacher where a.name= '孙若涵')-[e:partner]->(b) return MAX(e.targetId * e.targetId)"}
{"prompt": "返回所有与课程有关系的课程节点,且课程节点的id小于94,并返回这些课程的价值对321取余乘358的最大值,以及课程的课时减课时的值", "completion": "match(a:course)-[e]->(b:course where b.id < 94) return MAX(b.value % 321 * 358), b.courseHour - b.courseHour"}
{"prompt": "返回名为形势与政策的点belong的所有department,并对这些department的value进行求和", "completion": "match(a where a.name='形势与政策')-[e:belong]->(b:department) return SUM(b.value)"}
{"prompt": "计算所有大学的等级减3的值", "completion": "match(a:university) return a.level - 3"}
{"prompt": "请帮我查找与公司腾讯有关系的公司, 返回和这些公司有关联的公司的,价值加价值的值", "completion": "match(a:company where a.name= '腾讯')-[e]-(b:company)-[e2]-(c:company) return c.value + c.value"}
{"prompt": "请帮我找出university武汉大学 belong的city,返回city contain的company的peopleNumber对721取余的值", "completion": "match(a:university where name = '武汉大学')-[e:belong]->(b:city)-[e2:contain]->(c:company) return c.peopleNumber % 721"}
{"prompt": "查询全部源点标签为公司,边标签为合作的边,返回这些边的目标点id加目标点id的值,和targetId的平均值减77的平均值", "completion": "match(a:company)-[e:cooperate]->(b) return e.targetId + e.targetId, AVG(AVG(e.targetId) - 77)"}
{"prompt": "给出国家越南的伙伴,的权重对152.56取余减157的值", "completion": "match(a:country where a.name= '越南')-[e:partner]->(b) return e.weight % 152.56 - 157"}
{"prompt": "请帮我查找全部与公司有关系的大学节点,且大学节点的等级大于等于1,并返回这些大学的value的最小值乘882的个数,以及大学的id对id取余减59的平均值", "completion": "match(a:company)-[e]->(b:university where b.level >= 1) return COUNT(MIN(b.value) * 882), AVG(b.id % b.id - 59)"}
{"prompt": "请帮我找出名为武汉大学的点属于的城市,并对这些城市的名字进行求和", "completion": "match(a where a.name='武汉大学')-[e:belong]->(b:city) return SUM(b.name)"}
{"prompt": "计算所有城市的人数除9119的值", "completion": "match(a:city) return a.peopleNumber / 9119"}
{"prompt": "查找与电影院大众影院有关系的标签, 返回和这些标签有关联的电影的,value的最小值对400取余的值", "completion": "match(a:cinema where a.name= '大众影院')-[e]-(b:tag)-[e2]-(c:film) return MIN(c.value) % 400"}
{"prompt": "请帮我查找评论Comment_468 属于的电影,返回电影 拥有的标签的价值加211的值", "completion": "match(a:comment where name = 'Comment_468')-[e:belong]->(b:film)-[e2:has]->(c:tag) return c.value + 211"}
{"prompt": "请帮我查找所有源点类型为person,边类型为likes的边,返回这些边的f0的求和值加622的数量,和weight除188.80的值", "completion": "match(a:person)-[e:likes]->(b) return COUNT(SUM(e.f0) + 622), e.weight / 188.80"}
{"prompt": "查找person周红的所有朋友,的f0对f0取余的值", "completion": "match(a:person where a.name= '周红')-[e:friend]->(b) return e.f0 % e.f0"}
{"prompt": "请帮我找出所有与person有关系的评论节点,且评论节点的名字不是Comment_345,并返回这些评论的id对id取余的最大值,以及评论的id乘29的最大值", "completion": "match(a:person)-[e]->(b:comment where b.name <> 'Comment_345') return MAX(b.id % b.id), MAX(b.id * 29)"}
{"prompt": "帮我查询名为人人影城的点上映的所有电影,并对这些电影的价值进行求和", "completion": "match(a where a.name='人人影城')-[e:releases]->(b:film) return SUM(b.value)"}
{"prompt": "计算所有评论的id乘6的最大值", "completion": "match(a:comment) return MAX(a.id * 6)"}
{"prompt": "查找与person张科有关系的person, 返回和这些person有关联的person的,年龄乘72的值", "completion": "match(a:person where a.name= '张科')-[e]-(b:person)-[e2]-(c:person) return c.age * 72"}
{"prompt": "请帮我查找person马科 喜欢的person,返回person 认识的person的薪资除5364的最小值", "completion": "match(a:person where name = '马科')-[e:likes]->(b:person)-[e2:knows]->(c:person) return MIN(c.salary / 5364)"}
{"prompt": "给出源点标签等于person,边标签等于喜欢的边,返回这些边的源点id除19的最小值,和权重除140.39的值", "completion": "match(a:person)-[e:likes]->(b) return MIN(e.srcId / 19), e.weight / 140.39"}
{"prompt": "给出person杜思琪的相关者,的目标点id对48取余的平均值", "completion": "match(a:person where a.name= '杜思琪')-[e:relation]->(b) return AVG(e.targetId % 48)"}
{"prompt": "请帮我查找所有与person有关系的person节点,且person节点的salary为空,并返回这些person的salary除3993的最小值,以及person的salary加3227的和", "completion": "match(a:person)-[e]->(b:person where (b.salary is null)) return MIN(b.salary / 3993), SUM(b.salary + 3227)"}
{"prompt": "给出名为张建聪的点喜欢的所有person,并对这些person的id进行求和", "completion": "match(a where a.name='张建聪')-[e:likes]->(b:person) return SUM(b.id)"}
{"prompt": "计算所有person的薪资减1070乘36的值", "completion": "match(a:person) return (a.salary - 1070) * 36"}
{"prompt": "帮我查询与tag悬疑有关系的user, 返回和这些user有关联的forum的,peopleNumber乘998的值", "completion": "match(a:tag where a.name= '悬疑')-[e]-(b:user)-[e2]-(c:forum) return c.peopleNumber * 998"}
{"prompt": "找出用户王红 发布的帖子,返回帖子 拥有的标签的value的平均值加467的平均值", "completion": "match(a:user where name = '王红')-[e:publish]->(b:post)-[e2:has]->(c:tag) return AVG(AVG(c.value) + 467)"}
{"prompt": "请帮我找出源点标签等于user,边标签等于likes的边,返回这些边的f0对f0取余的值,和srcId对srcId取余的值", "completion": "match(a:user)-[e:likes]->(b) return e.f0 % e.f0, e.srcId % e.srcId"}
{"prompt": "查找帖子Post_104的所有相关者,的weight的个数除权重的最大值", "completion": "match(a:post where a.name= 'Post_104')-[e:relation]->(b) return MAX(COUNT(e.weight) / e.weight)"}
{"prompt": "请帮我查找与user有关系的post节点,且post节点的id大于3,并返回这些post的wordCount乘80的值,以及post的value的个数对561取余的值", "completion": "match(a:user)-[e]->(b:post where b.id > 3) return b.wordCount * 80, COUNT(b.value) % 561"}
{"prompt": "请帮我找出名为知乎的点包含的用户,并对这些用户的性别进行求和", "completion": "match(a where a.name='知乎')-[e:contain]->(b:user) return SUM(b.gender)"}
{"prompt": "计算所有用户的年龄乘34的值", "completion": "match(a:user) return a.age * 34"}
{"prompt": "请帮我找出与读者黄月有关系的书, 返回和这些书有关联的编辑的,salary的最大值除6716的值", "completion": "match(a:reader where a.name= '黄月')-[e]-(b:book)-[e2]-(c:publisher) return MAX(c.salary) / 6716"}
{"prompt": "查询书计算机网络 认识的书,返回书 关联的书的id乘id的最小值", "completion": "match(a:book where name = '计算机网络')-[e:knows]->(b:book)-[e2:relates]->(c:book) return MIN(c.id * c.id)"}
{"prompt": "查找所有源点标签为书,边标签为引用的边,返回这些边的目标点id加38的值,和目标点id除48减507加3的最小值", "completion": "match(a:book)-[e:refers]->(b) return e.targetId + 38, MIN(e.targetId / 48 - 507 + 3)"}
{"prompt": "查找publisher陈月的全部partner,的targetId除143的平均值", "completion": "match(a:publisher where a.name= '陈月')-[e:partner]->(b) return AVG(e.targetId / 143)"}
{"prompt": "查找所有与读者有关系的作家节点,且作家节点的薪资不为空,并返回这些作家的id对2取余的值,以及作家的id减id的值", "completion": "match(a:reader)-[e]->(b:author where (b.salary is not null)) return b.id % 2, b.id - b.id"}
{"prompt": "帮我查询名为张红的点发布的全部书,并对这些书的价格进行求和", "completion": "match(a where a.name='张红')-[e:publish]->(b:book) return SUM(b.price)"}
{"prompt": "计算所有作家的薪资除6082的值", "completion": "match(a:author) return a.salary / 6082"}
{"prompt": "找出与person何雪有关系的account, 返回和这些account有关联的company的,value减158的值", "completion": "match(a:person where a.name= '何雪')-[e]-(b:account)-[e2]-(c:company) return c.value - 158"}
{"prompt": "找出account LX001 repay的loan,返回loan deposit的account的id对59取余的值", "completion": "match(a:account where name = 'LX001')-[e:repay]->(b:loan)-[e2:deposit]->(c:account) return c.id % 59"}
{"prompt": "请帮我找出所有源点标签等于账号,边标签等于还款的边,返回这些边的f0加707的值,和f0减539的求和值", "completion": "match(a:account)-[e:repay]->(b) return e.f0 + 707, SUM(e.f0 - 539)"}
{"prompt": "查找company Bilibili的所有partner,的weight的平均值除112.42的平均值", "completion": "match(a:company where a.name= 'Bilibili')-[e:partner]->(b) return AVG(AVG(e.weight) / 112.42)"}
{"prompt": "查找所有与company有关系的loan节点,且loan节点的id小于79,并返回这些loan的weight的平均值减312的值,以及loan的weight乘872的平均值", "completion": "match(a:company)-[e]->(b:loan where b.id < 79) return AVG(b.weight) - 312, AVG(b.weight * 872)"}
{"prompt": "帮我查询名为周若涵的点申请的所有贷款,并对这些贷款的金额进行求和", "completion": "match(a where a.name='周若涵')-[e:apply]->(b:loan) return SUM(b.amount)"}
{"prompt": "计算所有公司的id减18的值", "completion": "match(a:company) return a.id - 18"}
{"prompt": "查找与事项ISSUE-496有关系的事项, 返回和这些事项有关联的合并请求的,id减id的数量", "completion": "match(a:issue where a.name= 'ISSUE-496')-[e]-(b:issue)-[e2]-(c:pullRequest) return COUNT(c.id - c.id)"}
{"prompt": "返回仓库FSM 拥有的用户,返回用户 喜欢的仓库的星数乘515的个数", "completion": "match(a:repository where name = 'FSM')-[e:has]->(b:user)-[e2:likes]->(c:repository) return COUNT(c.stars * 515)"}
{"prompt": "请帮我查找全部源点类型是仓库,边类型是拥有的边,返回这些边的f0除566的值,和f0的平均值加600的求和值", "completion": "match(a:repository)-[e:has]->(b) return e.f0 / 566, SUM(AVG(e.f0) + 600)"}
{"prompt": "查询issue ISSUE-147的全部relation,的weight对150.64取余的值", "completion": "match(a:issue where a.name= 'ISSUE-147')-[e:relation]->(b) return e.weight % 150.64"}
{"prompt": "查询所有与事项有关系的用户节点,且用户节点的id等于65,并返回这些用户的salary的平均值加7689的值,以及用户的age的数量减38的数量", "completion": "match(a:issue)-[e]->(b:user where b.id = 65) return AVG(b.salary) + 7689, COUNT(COUNT(b.age) - 38)"}
{"prompt": "查询名为ISSUE-423的点属于的所有仓库,并对这些仓库的语言进行求和", "completion": "match(a where a.name='ISSUE-423')-[e:belong]->(b:repository) return SUM(b.lang)"}
{"prompt": "计算所有用户的height的和对186取余的个数", "completion": "match(a:user) return COUNT(SUM(a.height) % 186)"}
{"prompt": "请帮我找出与卖家杜国强有关系的卖家, 返回和这些卖家有关联的卖家的,id乘76的个数", "completion": "match(a:seller where a.name= '杜国强')-[e]-(b:seller)-[e2]-(c:seller) return COUNT(c.id * 76)"}
{"prompt": "请帮我查找卖家黄梅 回答的买家,返回买家 取消的订单的价格减价格的最小值", "completion": "match(a:seller where name = '黄梅')-[e:ask]->(b:buyer)-[e2:cancel]->(c:orders) return MIN(c.price - c.price)"}
{"prompt": "帮我查询全部源点标签为买家,边标签为创造的边,返回这些边的源点id乘156加目标点id的最小值,和f0的数量除731的值", "completion": "match(a:buyer)-[e:creates]->(b) return MIN(e.srcId * 156 + e.targetId), COUNT(e.f0) / 731"}
{"prompt": "返回seller何伟的所有relation,的srcId对90取余的值", "completion": "match(a:seller where a.name= '何伟')-[e:relation]->(b) return e.srcId % 90"}
{"prompt": "帮我查询与订单有关系的卖家节点,且卖家节点的性别小于等于8229,并返回这些卖家的薪资对7722取余的数量,以及卖家的height的最小值加身高的值", "completion": "match(a:orders)-[e]->(b:seller where b.gender <= 8229) return COUNT(b.salary % 7722), MIN(b.height) + b.height"}
{"prompt": "查找名为Order_477的点包含的所有商品,并对这些商品的价格进行求和", "completion": "match(a where a.name='Order_477')-[e:contain]->(b:goods) return SUM(b.price)"}
{"prompt": "计算所有卖家的id乘13的最小值", "completion": "match(a:seller) return MIN(a.id * 13)"}
{"prompt": "返回和person有关联的person节点,并根据其性别,名字分组,返回性别,名字,以及身高减身高的值", "completion": "match(a:person)-[e:lover]-(b:person) return b.gender, b.name, b.height - b.height group by b.gender, b.name"}
{"prompt": "请帮我找出person以名字,性别分组的薪资, 根据薪资降序排序", "completion": "match(a:person) return a.salary group by a.name, a.gender order by a.salary desc"}
{"prompt": "帮我查询和person有关联的person节点,并根据其身高分组,返回身高,以及年龄乘年龄对178取余减薪资加身高的值", "completion": "match(a:person)-[e:knows]-(b:person) return b.height, b.age * b.age % 178 - b.salary + b.height group by b.height"}
{"prompt": "返回全部软件以id,语言分组的星数, 根据星数降序排序", "completion": "match(a:software) return a.stars group by a.id, a.lang order by a.stars desc"}
{"prompt": "请帮我查找和prescription有关联的medicine节点,并根据其price,id,name分组,返回price,id,name,以及id的个数对71取余的最大值", "completion": "match(a:prescription)-[e:contain]-(b:medicine) return b.price, b.id, b.name, MAX(COUNT(b.id) % 71) group by b.price, b.id, b.name"}
{"prompt": "帮我查询所有医生以id,薪资,年龄分组的名字, 根据名字降序排序", "completion": "match(a:doctor) return a.name group by a.id, a.salary, a.age order by a.name desc"}
{"prompt": "找出和部门有关联的学生节点,并根据其薪资,名字分组,返回薪资,名字,以及年龄除55除51的值", "completion": "match(a:department)-[e:has]-(b:student) return b.salary, b.name, b.age / 55 / 51 group by b.salary, b.name"}
{"prompt": "帮我查询teacher以age分组的gender, 根据gender升序排序", "completion": "match(a:teacher) return a.gender group by a.age order by a.gender asc"}
{"prompt": "查找和城市有关联的大学节点,并根据其id分组,返回id,以及等级除3的值", "completion": "match(a:city)-[e:contain]-(b:university) return b.id, b.level / 3 group by b.id"}
{"prompt": "给出所有公司以规格,人数,名字分组的规格, 根据规格从小到大排序", "completion": "match(a:company) return a.scale group by a.scale, a.peopleNumber, a.name order by a.scale asc"}
{"prompt": "给出和comment有关联的film节点,并根据其category分组,返回category,以及value减683的值", "completion": "match(a:comment)-[e:belong]-(b:film) return b.category, b.value - 683 group by b.category"}
{"prompt": "返回所有标签以名字,价值分组的id, 根据id降序排序", "completion": "match(a:tag) return a.id group by a.name, a.value order by a.id desc"}
{"prompt": "请帮我找出和person有关联的person节点,并根据其身高分组,返回身高,以及年龄对3取余的最小值", "completion": "match(a:person)-[e:knows]-(b:person) return b.height, MIN(b.age % 3) group by b.height"}
{"prompt": "请帮我查找person以id分组的薪资, 根据薪资降序排序", "completion": "match(a:person) return a.salary group by a.id order by a.salary desc"}
{"prompt": "找出和论坛有关联的用户节点,并根据其身高,性别,名字分组,返回身高,性别,名字,以及薪资加7245的值", "completion": "match(a:forum)-[e:contain]-(b:user) return b.height, b.gender, b.name, b.salary + 7245 group by b.height, b.gender, b.name"}
{"prompt": "找出所有用户以身高分组的身高, 根据身高降序排序", "completion": "match(a:user) return a.height group by a.height order by a.height desc"}
{"prompt": "返回和作家有关联的书节点,并根据其名字,创建时间分组,返回名字,创建时间,以及id加98的个数", "completion": "match(a:author)-[e:write]-(b:book) return b.name, b.createTime, COUNT(b.id + 98) group by b.name, b.createTime"}
{"prompt": "找出全部作家以名字分组的薪资, 根据薪资从小到大排序", "completion": "match(a:author) return a.salary group by a.name order by a.salary asc"}
{"prompt": "查找和账号有关联的贷款节点,并根据其权重,金额分组,返回权重,金额,以及id除84的最小值", "completion": "match(a:account)-[e:repay]-(b:loan) return b.weight, b.amount, MIN(b.id / 84) group by b.weight, b.amount"}
{"prompt": "请帮我查找person以性别,身高分组的年龄, 根据年龄降序排序", "completion": "match(a:person) return a.age group by a.gender, a.height order by a.age desc"}
{"prompt": "查询和合并请求有关联的仓库节点,并根据其语言分组,返回语言,以及星数除408减624的值", "completion": "match(a:pullRequest)-[e:belong]-(b:repository) return b.lang, b.stars / 408 - 624 group by b.lang"}
{"prompt": "查找所有用户以性别,年龄分组的id, 根据id从小到大排序", "completion": "match(a:user) return a.id group by a.gender, a.age order by a.id asc"}
{"prompt": "找出和orders有关联的goods节点,并根据其sellerNumber,value,category分组,返回sellerNumber,value,category,以及value除value的值", "completion": "match(a:orders)-[e:contain]-(b:goods) return b.sellerNumber, b.value, b.category, b.value / b.value group by b.sellerNumber, b.value, b.category"}
{"prompt": "帮我查询卖家以名字分组的身高, 根据身高从小到大排序", "completion": "match(a:seller) return a.height group by a.name order by a.height asc"}
{"prompt": "请帮我找出吴建聪的点relates的person,然后请帮我找出吴建聪被knows的person,一起返回", "completion": "match(a where a.name = '吴建聪')-[e:relates]->(b:person),(a where a.name = '吴建聪')<-[e2:knows]-(c:person) return a, b, c"}
{"prompt": "查找和person李伟有家人关系的person,再查找以朋友关系关联了李伟的person", "completion": "match(a:person where a.name = '李伟')-[e:family]->(b:person),(a:person where a.name = '李伟')<-[e2:friend]-(c:person)return a, b, c"}
{"prompt": "请帮我找出和person周若涵有关的person,称为X,再请帮我找出和这个X有关联的其他person,以及和X有关联的person", "completion": "match(a:person where a.name = '周若涵')-[e]-(b:person), (b:person)-[e2]-(c:person),(b:person)-[e3]-(d:person) return a, b, c, d"}
{"prompt": "查找id为157的person有关的person的家人, 再查找和person有关系的父母", "completion": "match(a:person where id = 157)-[e]-(b:person)-[e2:family]->(c), (b:person)-[e3:parent]->(d) return a, b, c, d"}
{"prompt": "帮我查询和person郑国强有关的person,再帮我查询和郑国强恋人的其他person,返回它们", "completion": "match(a:person where a.name = '郑国强')-[e]-(b:person), (a:person)-[e2:lover]->(c:person) return a, b, c"}
{"prompt": "返回全部阿里的点creates的software,然后返回阿里被belong的person,一起返回", "completion": "match(a where a.name = '阿里')-[e:creates]->(b:software),(a where a.name = '阿里')<-[e2:belong]-(c:person) return a, b, c"}
{"prompt": "请帮我找出和software Zookeeper有uses关系的software,再请帮我找出以uses关系关联了Zookeeper的software", "completion": "match(a:software where a.name = 'Zookeeper')-[e:uses]->(b:software),(a:software where a.name = 'Zookeeper')<-[e2:uses]-(c:software)return a, b, c"}
{"prompt": "请帮我找出和person王若涵有关的公司,称为X,再请帮我找出和这个X有关联的其他软件,以及和X有关联的公司", "completion": "match(a:person where a.name = '王若涵')-[e]-(b:company), (b:company)-[e2]-(c:software),(b:company)-[e3]-(d:company) return a, b, c, d"}
{"prompt": "查找id为128的software有关的person的relation, 再查找和person有关系的friend", "completion": "match(a:software where id = 128)-[e]-(b:person)-[e2:relation]->(c), (b:person)-[e3:friend]->(d) return a, b, c, d"}
{"prompt": "请帮我查找和软件SprintBoot有关的软件,再请帮我查找和SprintBoot使用的其他软件,返回它们", "completion": "match(a:software where a.name = 'SprintBoot')-[e]-(b:software), (a:software)-[e2:uses]->(c:software) return a, b, c"}
{"prompt": "查询全部赵雪的点创造的处方,然后查询赵雪被拥有的部门,一起返回", "completion": "match(a where a.name = '赵雪')-[e:creates]->(b:prescription),(a where a.name = '赵雪')<-[e2:has]-(c:department) return a, b, c"}
{"prompt": "给出和医生韩若涵有创造关系的处方,再给出以诊断关系关联了韩若涵的病人", "completion": "match(a:doctor where a.name = '韩若涵')-[e:creates]->(b:prescription),(a:doctor where a.name = '韩若涵')<-[e2:diagnose]-(c:patient)return a, b, c"}
{"prompt": "请帮我找出和药品散利痛有关的医生,称为X,再请帮我找出和这个X有关联的其他药品,以及和X有关联的病人", "completion": "match(a:medicine where a.name = '散利痛')-[e]-(b:doctor), (b:doctor)-[e2]-(c:medicine),(b:doctor)-[e3]-(d:patient) return a, b, c, d"}
{"prompt": "查找id为1的medicine有关的doctor的partner, 再查找和doctor有关系的relation", "completion": "match(a:medicine where id = 1)-[e]-(b:doctor)-[e2:partner]->(c), (b:doctor)-[e3:relation]->(d) return a, b, c, d"}
{"prompt": "找出全部经管学院的点has的teacher,然后找出经管学院被has的university,一起返回", "completion": "match(a where a.name = '经管学院')-[e:has]->(b:teacher),(a where a.name = '经管学院')<-[e2:has]-(c:university) return a, b, c"}
{"prompt": "请帮我找出和department经管学院有has关系的student,再请帮我找出以has关系关联了经管学院的student", "completion": "match(a:department where a.name = '经管学院')-[e:has]->(b:student),(a:department where a.name = '经管学院')<-[e2:has]-(c:student)return a, b, c"}
{"prompt": "帮我查询和学生黄若涵有关的课程,称为X,再帮我查询和这个X有关联的其他部门,以及和X有关联的教师", "completion": "match(a:student where a.name = '黄若涵')-[e]-(b:course), (b:course)-[e2]-(c:department),(b:course)-[e3]-(d:teacher) return a, b, c, d"}
{"prompt": "请帮我找出id为163的课程有关的大学的朋友, 再请帮我找出和大学有关系的朋友", "completion": "match(a:course where id = 163)-[e]-(b:university)-[e2:friend]->(c), (b:university)-[e3:friend]->(d) return a, b, c, d"}
{"prompt": "帮我查询和教师陈建国有关的学生,再帮我查询和陈建国教的其他课程,返回它们", "completion": "match(a:teacher where a.name = '陈建国')-[e]-(b:student), (a:teacher)-[e2:teach]->(c:course) return a, b, c"}
{"prompt": "查找纽约的点属于的国家,然后查找纽约被包含的国家,一起返回", "completion": "match(a where a.name = '纽约')-[e:belong]->(b:country),(a where a.name = '纽约')<-[e2:contain]-(c:country) return a, b, c"}
{"prompt": "找出和国家越南有包含关系的城市,再找出以包含关系关联了越南的城市", "completion": "match(a:country where a.name = '越南')-[e:contain]->(b:city),(a:country where a.name = '越南')<-[e2:contain]-(c:city)return a, b, c"}
{"prompt": "请帮我查找和国家澳大利亚有关的城市,称为X,再请帮我查找和这个X有关联的其他大学,以及和X有关联的大学", "completion": "match(a:country where a.name = '澳大利亚')-[e]-(b:city), (b:city)-[e2]-(c:university),(b:city)-[e3]-(d:university) return a, b, c, d"}
{"prompt": "给出id为94的公司有关的国家的朋友, 再给出和国家有关系的相关者", "completion": "match(a:company where id = 94)-[e]-(b:country)-[e2:friend]->(c), (b:country)-[e3:relation]->(d) return a, b, c, d"}
{"prompt": "返回和大学北京大学有关的大学,再返回和北京大学属于的其他城市,返回它们", "completion": "match(a:university where a.name = '北京大学')-[e]-(b:university), (a:university)-[e2:belong]->(c:city) return a, b, c"}
{"prompt": "查询和comment Comment_493有belong关系的film,再查询以belong关系关联了Comment_493的film", "completion": "match(a:comment where a.name = 'Comment_493')-[e:belong]->(b:film),(a:comment where a.name = 'Comment_493')<-[e2:belong]-(c:film)return a, b, c"}
{"prompt": "查询和person郑建国有关的film,称为X,再查询和这个X有关联的其他tag,以及和X有关联的tag", "completion": "match(a:person where a.name = '郑建国')-[e]-(b:film), (b:film)-[e2]-(c:tag),(b:film)-[e3]-(d:tag) return a, b, c, d"}
{"prompt": "查找id为23的tag有关的person的partner, 再查找和person有关系的relation", "completion": "match(a:tag where id = 23)-[e]-(b:person)-[e2:partner]->(c), (b:person)-[e3:relation]->(d) return a, b, c, d"}
{"prompt": "查找和评论Comment_413有关的person,再查找和Comment_413属于的其他电影,返回它们", "completion": "match(a:comment where a.name = 'Comment_413')-[e]-(b:person), (a:comment)-[e2:belong]->(c:film) return a, b, c"}
{"prompt": "返回所有赵红的点支付的person,然后返回赵红被认识的person,一起返回", "completion": "match(a where a.name = '赵红')-[e:pay]->(b:person),(a where a.name = '赵红')<-[e2:knows]-(c:person) return a, b, c"}
{"prompt": "找出和person韩建聪有knows关系的person,再找出以knows关系关联了韩建聪的person", "completion": "match(a:person where a.name = '韩建聪')-[e:knows]->(b:person),(a:person where a.name = '韩建聪')<-[e2:knows]-(c:person)return a, b, c"}
{"prompt": "查找和person周月有关的person,称为X,再查找和这个X有关联的其他person,以及和X有关联的person", "completion": "match(a:person where a.name = '周月')-[e]-(b:person), (b:person)-[e2]-(c:person),(b:person)-[e3]-(d:person) return a, b, c, d"}
{"prompt": "返回id为47的person有关的person的相关者, 再返回和person有关系的伙伴", "completion": "match(a:person where id = 47)-[e]-(b:person)-[e2:relation]->(c), (b:person)-[e3:partner]->(d) return a, b, c, d"}
{"prompt": "查找和person陈思思有关的person,再查找和陈思思喜欢的其他person,返回它们", "completion": "match(a:person where a.name = '陈思思')-[e]-(b:person), (a:person)-[e2:likes]->(c:person) return a, b, c"}
{"prompt": "查找和论坛推特有包含关系的用户,再查找以包含关系关联了推特的帖子", "completion": "match(a:forum where a.name = '推特')-[e:contain]->(b:user),(a:forum where a.name = '推特')<-[e2:contain]-(c:post)return a, b, c"}
{"prompt": "请帮我查找和post Post_218有关的tag,称为X,再请帮我查找和这个X有关联的其他forum,以及和X有关联的post", "completion": "match(a:post where a.name = 'Post_218')-[e]-(b:tag), (b:tag)-[e2]-(c:forum),(b:tag)-[e3]-(d:post) return a, b, c, d"}
{"prompt": "帮我查询id为75的forum有关的user的friend, 再帮我查询和user有关系的relation", "completion": "match(a:forum where id = 75)-[e]-(b:user)-[e2:friend]->(c), (b:user)-[e3:relation]->(d) return a, b, c, d"}
{"prompt": "查找和用户Tom有关的标签,再查找和Tom发布的其他帖子,返回它们", "completion": "match(a:user where a.name = 'Tom')-[e]-(b:tag), (a:user)-[e2:publish]->(c:post) return a, b, c"}
{"prompt": "帮我查询和读者黄轩有喜欢关系的书,再帮我查询以喜欢关系关联了黄轩的书", "completion": "match(a:reader where a.name = '黄轩')-[e:likes]->(b:book),(a:reader where a.name = '黄轩')<-[e2:likes]-(c:book)return a, b, c"}
{"prompt": "请帮我找出和编辑孙若涵有关的读者,称为X,再请帮我找出和这个X有关联的其他编辑,以及和X有关联的书", "completion": "match(a:publisher where a.name = '孙若涵')-[e]-(b:reader), (b:reader)-[e2]-(c:publisher),(b:reader)-[e3]-(d:book) return a, b, c, d"}
{"prompt": "请帮我找出id为69的编辑有关的书的引用, 再请帮我找出和书有关系的引用", "completion": "match(a:publisher where id = 69)-[e]-(b:book)-[e2:refers]->(c), (b:book)-[e3:refers]->(d) return a, b, c, d"}
{"prompt": "请帮我查找和读者王科有关的编辑,再请帮我查找和王科喜欢的其他书,返回它们", "completion": "match(a:reader where a.name = '王科')-[e]-(b:publisher), (a:reader)-[e2:likes]->(c:book) return a, b, c"}
{"prompt": "请帮我找出和account Faker有transfer关系的account,再请帮我找出以repay关系关联了Faker的loan", "completion": "match(a:account where a.name = 'Faker')-[e:transfer]->(b:account),(a:account where a.name = 'Faker')<-[e2:repay]-(c:loan)return a, b, c"}
{"prompt": "找出和person孙轩有关的person,称为X,再找出和这个X有关联的其他loan,以及和X有关联的loan", "completion": "match(a:person where a.name = '孙轩')-[e]-(b:person), (b:person)-[e2]-(c:loan),(b:person)-[e3]-(d:loan) return a, b, c, d"}
{"prompt": "帮我查询id为52的公司有关的person的伙伴, 再帮我查询和person有关系的伙伴", "completion": "match(a:company where id = 52)-[e]-(b:person)-[e2:partner]->(c), (b:person)-[e3:partner]->(d) return a, b, c, d"}
{"prompt": "返回和company字节有关的company,再返回和字节apply的其他loan,返回它们", "completion": "match(a:company where a.name = '字节')-[e]-(b:company), (a:company)-[e2:apply]->(c:loan) return a, b, c"}
{"prompt": "返回张雪的点creates的issue,然后返回张雪被has的repository,一起返回", "completion": "match(a where a.name = '张雪')-[e:creates]->(b:issue),(a where a.name = '张雪')<-[e2:has]-(c:repository) return a, b, c"}
{"prompt": "查询和user黄建聪有creates关系的pullRequest,再查询以creates关系关联了黄建聪的issue", "completion": "match(a:user where a.name = '黄建聪')-[e:creates]->(b:pullRequest),(a:user where a.name = '黄建聪')<-[e2:creates]-(c:issue)return a, b, c"}
{"prompt": "请帮我找出和用户李思思有关的合并请求,称为X,再请帮我找出和这个X有关联的其他事项,以及和X有关联的事项", "completion": "match(a:user where a.name = '李思思')-[e]-(b:pullRequest), (b:pullRequest)-[e2]-(c:issue),(b:pullRequest)-[e3]-(d:issue) return a, b, c, d"}
{"prompt": "请帮我查找id为156的用户有关的用户的相关者, 再请帮我查找和用户有关系的伙伴", "completion": "match(a:user where id = 156)-[e]-(b:user)-[e2:relation]->(c), (b:user)-[e3:partner]->(d) return a, b, c, d"}
{"prompt": "查询和用户赵雪有关的事项,再查询和赵雪创造的其他事项,返回它们", "completion": "match(a:user where a.name = '赵雪')-[e]-(b:issue), (a:user)-[e2:creates]->(c:issue) return a, b, c"}
{"prompt": "查找所有周思思的点咨询的卖家,然后查找周思思被回答的卖家,一起返回", "completion": "match(a where a.name = '周思思')-[e:consult]->(b:seller),(a where a.name = '周思思')<-[e2:ask]-(c:seller) return a, b, c"}
{"prompt": "帮我查询和买家马国强有咨询关系的卖家,再帮我查询以取消关系关联了马国强的订单", "completion": "match(a:buyer where a.name = '马国强')-[e:consult]->(b:seller),(a:buyer where a.name = '马国强')<-[e2:cancel]-(c:orders)return a, b, c"}
{"prompt": "查询和buyer黄若涵有关的buyer,称为X,再查询和这个X有关联的其他buyer,以及和X有关联的orders", "completion": "match(a:buyer where a.name = '黄若涵')-[e]-(b:buyer), (b:buyer)-[e2]-(c:buyer),(b:buyer)-[e3]-(d:orders) return a, b, c, d"}
{"prompt": "请帮我找出id为148的订单有关的卖家的相关者, 再请帮我找出和卖家有关系的相关者", "completion": "match(a:orders where id = 148)-[e]-(b:seller)-[e2:relation]->(c), (b:seller)-[e3:relation]->(d) return a, b, c, d"}
{"prompt": "返回和订单Order_370有关的买家,再返回和Order_370包含的其他商品,返回它们", "completion": "match(a:orders where a.name = 'Order_370')-[e]-(b:buyer), (a:orders)-[e2:contain]->(c:goods) return a, b, c"}
{"prompt": "查询id为192的person关联的person,和以relates关系关联了这些person的其他person", "completion": "match(a:person where a.id = 192)-[e]-(b:person)<-[e2:relates]-(c:person) return b,c"}
{"prompt": "查询person韩月knows的person,被其他person relates的数量", "completion": "match(a:person where a.name='韩月')-[e:knows]->(b:person)<-[e2:relates]-(c:person) return COUNT(c)"}
{"prompt": "查询被person周思琪relates的person", "completion": "match(a:person)<-[e:relates]-(b:person where b.name='周思琪') return a, b"}
{"prompt": "返回以认识关系关联了person徐思琪的person", "completion": "match(a:person where a.name='徐思琪')<-[e:knows]-(b:person) return b"}
{"prompt": "找出person黄国强relates的person,以及knows这些person的person", "completion": "match(a:person where name = '黄国强')-[e:relates]->(b:person)<-[e2:knows]-(c:person) return b, c"}
{"prompt": "查询关联person孙伟关联的person,的person", "completion": "match(a:person where name = '孙伟')-[e:relates]->(b:person)<-[e2:relates]-(c:person) return b, c"}
{"prompt": "请帮我查找认识person韩宏的person,和这些person恋人的person", "completion": "match(a:person where name = '韩宏')<-[e:knows]-(b:person)-[e2:lover]->(c:person) return b, c"}
{"prompt": "给出被person王宏认识的person,和王宏认识的person", "completion": "match(a:person)<-[e:knows]-(b:person where name = '王宏')-[e2:knows]->(c:person) return a, b, c"}
{"prompt": "请帮我查找全部id为81的person关联的软件,和以购买关系关联了这些软件的其他person", "completion": "match(a:person where a.id = 81)-[e]-(b:software)<-[e2:buy]-(c:person) return b,c"}
{"prompt": "返回person王思琪commits的software,被其他software uses的数量", "completion": "match(a:person where a.name='王思琪')-[e:commits]->(b:software)<-[e2:uses]-(c:software) return COUNT(c)"}
{"prompt": "查询被person李轩belong的company", "completion": "match(a:company)<-[e:belong]-(b:person where b.name='李轩') return a, b"}
{"prompt": "请帮我找出以购买关系关联了软件Spark的person", "completion": "match(a:software where a.name='Spark')<-[e:buy]-(b:person) return b"}
{"prompt": "查找公司微软创造的软件,以及使用这些软件的软件", "completion": "match(a:company where name = '微软')-[e:creates]->(b:software)<-[e2:uses]-(c:software) return b, c"}
{"prompt": "请帮我找出认识公司腾讯雇佣的person,的person", "completion": "match(a:company where name = '腾讯')-[e:employee]->(b:person)<-[e2:knows]-(c:person) return b, c"}
{"prompt": "请帮我查找认识person陈科的person,和这些person属于的公司", "completion": "match(a:person where name = '陈科')<-[e:knows]-(b:person)-[e2:belong]->(c:company) return b, c"}
{"prompt": "给出被person张科提交的软件,和张科购买的软件", "completion": "match(a:software)<-[e:commits]-(b:person where name = '张科')-[e2:buy]->(c:software) return a, b, c"}
{"prompt": "返回所有id为114的doctor关联的patient,和以diagnose关系关联了这些patient的其他doctor", "completion": "match(a:doctor where a.id = 114)-[e]-(b:patient)<-[e2:diagnose]-(c:doctor) return b,c"}
{"prompt": "返回医生何思琪创造的处方,被其他医生创造的数量", "completion": "match(a:doctor where a.name='何思琪')-[e:creates]->(b:prescription)<-[e2:creates]-(c:doctor) return COUNT(c)"}
{"prompt": "请帮我查找被医生周强诊断的病人", "completion": "match(a:patient)<-[e:diagnose]-(b:doctor where b.name='周强') return a, b"}
{"prompt": "请帮我找出以包含关系关联了药品散利痛的处方", "completion": "match(a:medicine where a.name='散利痛')<-[e:contain]-(b:prescription) return b"}
{"prompt": "帮我查询病人周思思接受的处方,以及创造这些处方的医生", "completion": "match(a:patient where name = '周思思')-[e:accept]->(b:prescription)<-[e2:creates]-(c:doctor) return b, c"}
{"prompt": "找出创造医生徐轩创造的处方,的医生", "completion": "match(a:doctor where name = '徐轩')-[e:creates]->(b:prescription)<-[e2:creates]-(c:doctor) return b, c"}
{"prompt": "查找属于部门传染部的医生,和这些医生诊断的病人", "completion": "match(a:department where name = '传染部')<-[e:belong]-(b:doctor)-[e2:diagnose]->(c:patient) return b, c"}
{"prompt": "请帮我找出被医生黄建国属于的部门,和黄建国属于的部门", "completion": "match(a:department)<-[e:belong]-(b:doctor where name = '黄建国')-[e2:belong]->(c:department) return a, b, c"}
{"prompt": "给出id为95的部门关联的教师,和以拥有关系关联了这些教师的其他部门", "completion": "match(a:department where a.id = 95)-[e]-(b:teacher)<-[e2:has]-(c:department) return b,c"}
{"prompt": "返回大学电子科技大学拥有的部门,被其他课程属于的数量", "completion": "match(a:university where a.name='电子科技大学')-[e:has]->(b:department)<-[e2:belong]-(c:course) return COUNT(c)"}
{"prompt": "查找被部门法学院拥有的教师", "completion": "match(a:teacher)<-[e:has]-(b:department where b.name='法学院') return a, b"}
{"prompt": "帮我查询以has关系关联了department体育学院的university", "completion": "match(a:department where a.name='体育学院')<-[e:has]-(b:university) return b"}
{"prompt": "查询学生陈轩选择的课程,以及选择这些课程的学生", "completion": "match(a:student where name = '陈轩')-[e:selects]->(b:course)<-[e2:selects]-(c:student) return b, c"}
{"prompt": "给出has course高等数学belong的department,的university", "completion": "match(a:course where name = '高等数学')-[e:belong]->(b:department)<-[e2:has]-(c:university) return b, c"}
{"prompt": "给出拥有部门土木学院的大学,和这些大学拥有的部门", "completion": "match(a:department where name = '土木学院')<-[e:has]-(b:university)-[e2:has]->(c:department) return b, c"}
{"prompt": "查询被教师马轩教的课程,和马轩教的课程", "completion": "match(a:course)<-[e:teach]-(b:teacher where name = '马轩')-[e2:teach]->(c:course) return a, b, c"}
{"prompt": "请帮我查找全部id为184的country关联的company,和以cooperate关系关联了这些company的其他university", "completion": "match(a:country where a.id = 184)-[e]-(b:company)<-[e2:cooperate]-(c:university) return b,c"}
{"prompt": "帮我查询city伦敦contain的company,被其他university cooperate的数量", "completion": "match(a:city where a.name='伦敦')-[e:contain]->(b:company)<-[e2:cooperate]-(c:university) return COUNT(c)"}
{"prompt": "帮我查询被城市北京属于的国家", "completion": "match(a:country)<-[e:belong]-(b:city where b.name='北京') return a, b"}
{"prompt": "返回以包含关系关联了城市重庆的国家", "completion": "match(a:city where a.name='重庆')<-[e:contain]-(b:country) return b"}
{"prompt": "找出国家日本包含的城市,以及属于这些城市的大学", "completion": "match(a:country where name = '日本')-[e:contain]->(b:city)<-[e2:belong]-(c:university) return b, c"}
{"prompt": "查找属于公司蚂蚁集团属于的城市,的大学", "completion": "match(a:company where name = '蚂蚁集团')-[e:belong]->(b:city)<-[e2:belong]-(c:university) return b, c"}
{"prompt": "查询包含公司阿里的城市,和这些城市包含的公司", "completion": "match(a:company where name = '阿里')<-[e:contain]-(b:city)-[e2:contain]->(c:company) return b, c"}
{"prompt": "查询被城市伦敦包含的公司,和伦敦包含的公司", "completion": "match(a:company)<-[e:contain]-(b:city where name = '伦敦')-[e2:contain]->(c:company) return a, b, c"}
{"prompt": "请帮我查找全部id为36的电影关联的电影,和以属于关系关联了这些电影的其他评论", "completion": "match(a:film where a.id = 36)-[e]-(b:film)<-[e2:belong]-(c:comment) return b,c"}
{"prompt": "请帮我查找person何红观看的电影,被其他评论属于的数量", "completion": "match(a:person where a.name='何红')-[e:watch]->(b:film)<-[e2:belong]-(c:comment) return COUNT(c)"}
{"prompt": "查找被comment Comment_151 belong的film", "completion": "match(a:film)<-[e:belong]-(b:comment where b.name='Comment_151') return a, b"}
{"prompt": "帮我查询以属于关系关联了电影我不是药神的评论", "completion": "match(a:film where a.name='我不是药神')<-[e:belong]-(b:comment) return b"}
{"prompt": "找出电影我不是药神拥有的标签,以及拥有这些标签的电影", "completion": "match(a:film where name = '我不是药神')-[e:has]->(b:tag)<-[e2:has]-(c:film) return b, c"}
{"prompt": "找出喜欢person张月创造的评论,的person", "completion": "match(a:person where name = '张月')-[e:creates]->(b:comment)<-[e2:likes]-(c:person) return b, c"}
{"prompt": "找出观看电影泰坦尼克号的person,和这些person创造的评论", "completion": "match(a:film where name = '泰坦尼克号')<-[e:watch]-(b:person)-[e2:creates]->(c:comment) return b, c"}
{"prompt": "帮我查询被person马宏creates的comment,和马宏likes的comment", "completion": "match(a:comment)<-[e:creates]-(b:person where name = '马宏')-[e2:likes]->(c:comment) return a, b, c"}
{"prompt": "返回id为145的person关联的person,和以支付关系关联了这些person的其他person", "completion": "match(a:person where a.id = 145)-[e]-(b:person)<-[e2:pay]-(c:person) return b,c"}
{"prompt": "请帮我找出person张雪喜欢的person,被其他person认识的数量", "completion": "match(a:person where a.name='张雪')-[e:likes]->(b:person)<-[e2:knows]-(c:person) return COUNT(c)"}
{"prompt": "返回被person何思琪认识的person", "completion": "match(a:person)<-[e:knows]-(b:person where b.name='何思琪') return a, b"}
{"prompt": "查找以认识关系关联了person Jack的person", "completion": "match(a:person where a.name='Jack')<-[e:knows]-(b:person) return b"}
{"prompt": "返回person李宏pay的person,以及likes这些person的person", "completion": "match(a:person where name = '李宏')-[e:pay]->(b:person)<-[e2:likes]-(c:person) return b, c"}
{"prompt": "查找pay person杜建聪pay的person,的person", "completion": "match(a:person where name = '杜建聪')-[e:pay]->(b:person)<-[e2:pay]-(c:person) return b, c"}
{"prompt": "请帮我找出喜欢person韩梅的person,和这些person支付的person", "completion": "match(a:person where name = '韩梅')<-[e:likes]-(b:person)-[e2:pay]->(c:person) return b, c"}
{"prompt": "返回被person张建国喜欢的person,和张建国喜欢的person", "completion": "match(a:person)<-[e:likes]-(b:person where name = '张建国')-[e2:likes]->(c:person) return a, b, c"}
{"prompt": "查找全部id为65的post关联的tag,和以has关系关联了这些tag的其他post", "completion": "match(a:post where a.id = 65)-[e]-(b:tag)<-[e2:has]-(c:post) return b,c"}
{"prompt": "请帮我查找帖子Post_290拥有的标签,被其他帖子拥有的数量", "completion": "match(a:post where a.name='Post_290')-[e:has]->(b:tag)<-[e2:has]-(c:post) return COUNT(c)"}
{"prompt": "查找被forum知网contain的user", "completion": "match(a:user)<-[e:contain]-(b:forum where b.name='知网') return a, b"}
{"prompt": "帮我查询以包含关系关联了用户马思思的论坛", "completion": "match(a:user where a.name='马思思')<-[e:contain]-(b:forum) return b"}
{"prompt": "请帮我查找user何轩publish的post,以及publish这些post的user", "completion": "match(a:user where name = '何轩')-[e:publish]->(b:post)<-[e2:publish]-(c:user) return b, c"}
{"prompt": "请帮我找出contain user郑宏likes的post,的forum", "completion": "match(a:user where name = '郑宏')-[e:likes]->(b:post)<-[e2:contain]-(c:forum) return b, c"}
{"prompt": "查询包含用户张科的论坛,和这些论坛包含的用户", "completion": "match(a:user where name = '张科')<-[e:contain]-(b:forum)-[e2:contain]->(c:user) return b, c"}
{"prompt": "返回被user陈若涵publish的post,和陈若涵likes的post", "completion": "match(a:post)<-[e:publish]-(b:user where name = '陈若涵')-[e2:likes]->(c:post) return a, b, c"}
{"prompt": "给出id为145的读者关联的书,和以认识关系关联了这些书的其他书", "completion": "match(a:reader where a.id = 145)-[e]-(b:book)<-[e2:knows]-(c:book) return b,c"}
{"prompt": "查询书少年闰土关联的书,被其他读者喜欢的数量", "completion": "match(a:book where a.name='少年闰土')-[e:relates]->(b:book)<-[e2:likes]-(c:reader) return COUNT(c)"}
{"prompt": "请帮我找出被编辑陈伟发布的书", "completion": "match(a:book)<-[e:publish]-(b:publisher where b.name='陈伟') return a, b"}
{"prompt": "查找以喜欢关系关联了书孤城的读者", "completion": "match(a:book where a.name='孤城')<-[e:likes]-(b:reader) return b"}
{"prompt": "查找作家何红撰写的书,以及喜欢这些书的读者", "completion": "match(a:author where name = '何红')-[e:write]->(b:book)<-[e2:likes]-(c:reader) return b, c"}
{"prompt": "给出认识书孤城关联的书,的书", "completion": "match(a:book where name = '孤城')-[e:relates]->(b:book)<-[e2:knows]-(c:book) return b, c"}
{"prompt": "帮我查询喜欢书百年孤独的读者,和这些读者喜欢的书", "completion": "match(a:book where name = '百年孤独')<-[e:likes]-(b:reader)-[e2:likes]->(c:book) return b, c"}
{"prompt": "请帮我找出被作家王轩撰写的书,和王轩认识的作家", "completion": "match(a:book)<-[e:write]-(b:author where name = '王轩')-[e2:knows]->(c:author) return a, b, c"}
{"prompt": "查找id为32的company关联的loan,和以apply关系关联了这些loan的其他person", "completion": "match(a:company where a.id = 32)-[e]-(b:loan)<-[e2:apply]-(c:person) return b,c"}
{"prompt": "查找贷款loan_82存款的账号,被其他person拥有的数量", "completion": "match(a:loan where a.name='loan_82')-[e:deposit]->(b:account)<-[e2:own]-(c:person) return COUNT(c)"}
{"prompt": "找出被账号BIN转账的账号", "completion": "match(a:account)<-[e:transfer]-(b:account where b.name='BIN') return a, b"}
{"prompt": "查询以申请关系关联了贷款loan_82的person", "completion": "match(a:loan where a.name='loan_82')<-[e:apply]-(b:person) return b"}
{"prompt": "帮我查询贷款loan_96存款的账号,以及转账这些账号的账号", "completion": "match(a:loan where name = 'loan_96')-[e:deposit]->(b:account)<-[e2:transfer]-(c:account) return b, c"}
{"prompt": "找出申请person黄轩申请的贷款,的person", "completion": "match(a:person where name = '黄轩')-[e:apply]->(b:loan)<-[e2:apply]-(c:person) return b, c"}
{"prompt": "查询apply loan loan_30的person,和这些person invest的company", "completion": "match(a:loan where name = 'loan_30')<-[e:apply]-(b:person)-[e2:invest]->(c:company) return b, c"}
{"prompt": "查询被贷款loan_24存款的账号,和loan_24存款的账号", "completion": "match(a:account)<-[e:deposit]-(b:loan where name = 'loan_24')-[e2:deposit]->(c:account) return a, b, c"}
{"prompt": "请帮我查找全部id为29的用户关联的事项,和以拥有关系关联了这些事项的其他仓库", "completion": "match(a:user where a.id = 29)-[e]-(b:issue)<-[e2:has]-(c:repository) return b,c"}
{"prompt": "请帮我查找user张建国likes的repository,被其他pullRequest belong的数量", "completion": "match(a:user where a.name='张建国')-[e:likes]->(b:repository)<-[e2:belong]-(c:pullRequest) return COUNT(c)"}
{"prompt": "返回被用户马轩创造的合并请求", "completion": "match(a:pullRequest)<-[e:creates]-(b:user where b.name='马轩') return a, b"}
{"prompt": "给出以拥有关系关联了用户王强的仓库", "completion": "match(a:user where a.name='王强')<-[e:has]-(b:repository) return b"}
{"prompt": "查找用户王思思创造的合并请求,以及拥有这些合并请求的仓库", "completion": "match(a:user where name = '王思思')-[e:creates]->(b:pullRequest)<-[e2:has]-(c:repository) return b, c"}
{"prompt": "给出属于事项ISSUE-418属于的仓库,的事项", "completion": "match(a:issue where name = 'ISSUE-418')-[e:belong]->(b:repository)<-[e2:belong]-(c:issue) return b, c"}
{"prompt": "找出has issue ISSUE-297的repository,和这些repository has的pullRequest", "completion": "match(a:issue where name = 'ISSUE-297')<-[e:has]-(b:repository)-[e2:has]->(c:pullRequest) return b, c"}
{"prompt": "帮我查询被仓库JavaGuid拥有的合并请求,和JavaGuid拥有的用户", "completion": "match(a:pullRequest)<-[e:has]-(b:repository where name = 'JavaGuid')-[e2:has]->(c:user) return a, b, c"}
{"prompt": "找出全部id为17的买家关联的买家,和以回答关系关联了这些买家的其他卖家", "completion": "match(a:buyer where a.id = 17)-[e]-(b:buyer)<-[e2:ask]-(c:seller) return b,c"}
{"prompt": "帮我查询buyer Jack cancel的orders,被其他buyer creates的数量", "completion": "match(a:buyer where a.name='Jack')-[e:cancel]->(b:orders)<-[e2:creates]-(c:buyer) return COUNT(c)"}
{"prompt": "返回被买家张建国创造的订单", "completion": "match(a:orders)<-[e:creates]-(b:buyer where b.name='张建国') return a, b"}
{"prompt": "请帮我找出以回答关系关联了买家孙若涵的卖家", "completion": "match(a:buyer where a.name='孙若涵')<-[e:ask]-(b:seller) return b"}
{"prompt": "查询买家郑雪取消的订单,以及创造这些订单的买家", "completion": "match(a:buyer where name = '郑雪')-[e:cancel]->(b:orders)<-[e2:creates]-(c:buyer) return b, c"}
{"prompt": "查询创造买家黄月取消的订单,的买家", "completion": "match(a:buyer where name = '黄月')-[e:cancel]->(b:orders)<-[e2:creates]-(c:buyer) return b, c"}
{"prompt": "查找回答买家赵伟的卖家,和这些卖家拥有的商品", "completion": "match(a:buyer where name = '赵伟')<-[e:ask]-(b:seller)-[e2:has]->(c:goods) return b, c"}
{"prompt": "查找被卖家郑伟拥有的商品,和郑伟拥有的商品", "completion": "match(a:goods)<-[e:has]-(b:seller where name = '郑伟')-[e2:has]->(c:goods) return a, b, c"}
{"prompt": "id除61的最大值", "completion": "MAX(a.id / 61)"}
{"prompt": "value的平均值对840取余的值", "completion": "AVG(a.value) % 840"}
{"prompt": "学分减4加1的最大值", "completion": "MAX(a.credit - 4 + 1)"}
{"prompt": "value乘355的最大值", "completion": "MAX(a.value * 355)"}
{"prompt": "根据价值,大小,id分组,计算value的最大值除648的值", "completion": "return MAX(a.value) / 648 group by a.value, a.size, a.id"}
{"prompt": "根据名字分组,计算价值加价值的值", "completion": "return a.value + a.value group by a.name"}
{"prompt": "根据level,name分组,计算id减58的求和值", "completion": "return SUM(a.id - 58) group by a.level, a.name"}
{"prompt": "根据身高,薪资分组,计算年龄除89的值", "completion": "return a.age / 89 group by a.height, a.salary"}
{"prompt": "height乘193的最小值", "completion": "MIN(a.height * 193)"}
{"prompt": "价格加79的值", "completion": "a.price + 79"}
{"prompt": "id加94对209取余的最大值", "completion": "MAX(a.id + 94 % 209)"}
{"prompt": "id对id取余的求和值", "completion": "SUM(a.id % a.id)"}
{"prompt": "根据字数分组,计算id加54减91的最小值", "completion": "return MIN(a.id + 54 - 91) group by a.wordCount"}
{"prompt": "根据名字,id分组,计算年龄乘57的值", "completion": "return a.age * 57 group by a.name, a.id"}
{"prompt": "根据price分组,计算id加11的数量", "completion": "return COUNT(a.id + 11) group by a.price"}
{"prompt": "根据年龄,id分组,计算身高对身高取余的值", "completion": "return a.height % a.height group by a.age, a.id"}
{"prompt": "价格乘38的值", "completion": "a.price * 38"}
{"prompt": "id对38取余的值", "completion": "a.id % 38"}
{"prompt": "price的平均值乘114乘756对228取余除225除87除92的和", "completion": "SUM(AVG(a.price) * 114 * 756 % 228 / 225 / 87 / 92)"}
{"prompt": "权重加46的值", "completion": "a.weight + 46"}
{"prompt": "根据id,name分组,计算salary乘4125除187的值", "completion": "return a.salary * 4125 / 187 group by a.id, a.name"}
{"prompt": "根据名字分组,计算id除23的值", "completion": "return a.id / 23 group by a.name"}
{"prompt": "根据name,id分组,计算weight的最大值对632取余的值", "completion": "return MAX(a.weight) % 632 group by a.name, a.id"}
{"prompt": "根据id分组,计算id除id减97的平均值", "completion": "return AVG(a.id / a.id - 97) group by a.id"}
{"prompt": "身高乘194的求和值", "completion": "SUM(a.height * 194)"}
{"prompt": "字数减715的值", "completion": "a.wordCount - 715"}
{"prompt": "字数除205的和", "completion": "SUM(a.wordCount / 205)"}
{"prompt": "id加77的值", "completion": "a.id + 77"}
{"prompt": "根据名字,价值,创建时间分组,计算价值减价值的个数", "completion": "return COUNT(a.value - a.value) group by a.name, a.value, a.createTime"}
{"prompt": "根据height,gender,age分组,计算id减94的值", "completion": "return a.id - 94 group by a.height, a.gender, a.age"}
{"prompt": "根据id,name,value分组,计算id加44的平均值", "completion": "return AVG(a.id + 44) group by a.id, a.name, a.value"}
{"prompt": "根据名字,价值分组,计算id除id的平均值", "completion": "return AVG(a.id / a.id) group by a.name, a.value"}
{"prompt": "weight减746的值", "completion": "a.weight - 746"}
{"prompt": "身高减身高的值", "completion": "a.height - a.height"}
{"prompt": "weight除37的值", "completion": "a.weight / 37"}
{"prompt": "id的最小值减63的最小值", "completion": "MIN(MIN(a.id) - 63)"}
{"prompt": "根据salary,name,height分组,计算salary加salary的值", "completion": "return a.salary + a.salary group by a.salary, a.name, a.height"}
{"prompt": "根据id,创建时间,名字分组,计算weight的最小值除209的数量", "completion": "return COUNT(MIN(a.weight) / 209) group by a.id, a.createTime, a.name"}
{"prompt": "根据weight,createTime,id分组,计算weight乘803的数量", "completion": "return COUNT(a.weight * 803) group by a.weight, a.createTime, a.id"}
{"prompt": "根据id,创建时间,权重分组,计算id加95乘866的值", "completion": "return (a.id + 95) * 866 group by a.id, a.createTime, a.weight"}
{"prompt": "weight除345的值", "completion": "a.weight / 345"}
{"prompt": "id乘91的数量", "completion": "COUNT(a.id * 91)"}
{"prompt": "id除60加id的值", "completion": "a.id / 60 + a.id"}
{"prompt": "人数减人数的值", "completion": "a.peopleNumber - a.peopleNumber"}
{"prompt": "根据createTime,value分组,计算value加719对id取余的最大值", "completion": "return MAX(a.value + 719 % a.id) group by a.createTime, a.value"}
{"prompt": "根据id,金额,权重分组,计算id对0取余的值", "completion": "return a.id % 0 group by a.id, a.amount, a.weight"}
{"prompt": "根据id,名字分组,计算价值除908的最小值", "completion": "return MIN(a.value / 908) group by a.id, a.name"}
{"prompt": "根据name分组,计算salary的和乘salary的数量", "completion": "return COUNT(SUM(a.salary) * a.salary) group by a.name"}
{"prompt": "id对22取余对id取余的值", "completion": "a.id % 22 % a.id"}
{"prompt": "价值加705的值", "completion": "a.value + 705"}
{"prompt": "身高乘150对11取余的值", "completion": "a.height * 150 % 11"}
{"prompt": "价值加726对价值取余的个数", "completion": "COUNT(a.value + 726 % a.value)"}
{"prompt": "根据name,lang,stars分组,计算value乘315的值", "completion": "return a.value * 315 group by a.name, a.lang, a.stars"}
{"prompt": "根据id,peopleNumber,scale分组,计算peopleNumber乘670的个数", "completion": "return COUNT(a.peopleNumber * 670) group by a.id, a.peopleNumber, a.scale"}
{"prompt": "根据stars,value分组,计算id对id取余减79的和", "completion": "return SUM(a.id % a.id - 79) group by a.stars, a.value"}
{"prompt": "根据人数,规格,价值分组,计算peopleNumber的最大值除941的最小值", "completion": "return MIN(MAX(a.peopleNumber) / 941) group by a.peopleNumber, a.scale, a.value"}
{"prompt": "年龄加年龄对16取余的最小值", "completion": "MIN(a.age + a.age % 16)"}
{"prompt": "身高乘152的值", "completion": "a.height * 152"}
{"prompt": "id的最大值加89除28的值", "completion": "(MAX(a.id) + 89) / 28"}
{"prompt": "id的平均值减83的数量", "completion": "COUNT(AVG(a.id) - 83)"}
{"prompt": "根据name,value,id分组,计算id加63的值", "completion": "return a.id + 63 group by a.name, a.value, a.id"}
{"prompt": "根据id分组,计算id的最大值减44的值", "completion": "return MAX(a.id) - 44 group by a.id"}
{"prompt": "根据年龄,薪资分组,计算年龄减74的最小值", "completion": "return MIN(a.age - 74) group by a.age, a.salary"}
{"prompt": "根据id,价格,名字分组,计算价值对价值取余的值", "completion": "return a.value % a.value group by a.id, a.price, a.name"}
{"prompt": "id加71的平均值", "completion": "AVG(a.id + 71)"}
{"prompt": "年龄加年龄的值", "completion": "a.age + a.age"}
{"prompt": "身高除身高减9950的值", "completion": "a.height / a.height - 9950"}
{"prompt": "id对66取余乘83加150的值", "completion": "a.id % 66 * 83 + 150"}
{"prompt": "根据height,gender分组,计算id的数量减id的数量", "completion": "return COUNT(COUNT(a.id) - a.id) group by a.height, a.gender"}
{"prompt": "根据id,age,gender分组,计算salary减8847的最大值", "completion": "return MAX(a.salary - 8847) group by a.id, a.age, a.gender"}
{"prompt": "根据id,身高分组,计算age的最大值减59的数量", "completion": "return COUNT(MAX(a.age) - 59) group by a.id, a.height"}
{"prompt": "根据年龄分组,计算薪资乘2881的平均值", "completion": "return AVG(a.salary * 2881) group by a.age"}
{"prompt": "id的和减22的最小值", "completion": "MIN(SUM(a.id) - 22)"}
{"prompt": "价值除88的个数", "completion": "COUNT(a.value / 88)"}
{"prompt": "字数乘544加字数的最大值", "completion": "MAX(a.wordCount * 544 + a.wordCount)"}
{"prompt": "大小乘971的值", "completion": "a.size * 971"}
{"prompt": "根据name,id,address分组,计算size减size的值", "completion": "return a.size - a.size group by a.name, a.id, a.address"}
{"prompt": "根据id,名字,价值分组,计算价值加46的最大值", "completion": "return MAX(a.value + 46) group by a.id, a.name, a.value"}
{"prompt": "根据name分组,计算size减67的值", "completion": "return a.size - 67 group by a.name"}
{"prompt": "根据id分组,计算id对29取余的值", "completion": "return a.id % 29 group by a.id"}
{"prompt": "area的最大值加67976的值", "completion": "MAX(a.area) + 67976"}
{"prompt": "面积乘95367的平均值", "completion": "AVG(a.area * 95367)"}
{"prompt": "value对505取余的值", "completion": "a.value % 505"}
{"prompt": "id减40的最小值", "completion": "MIN(a.id - 40)"}
{"prompt": "根据名字,价值,人数分组,计算peopleNumber的个数除人数的最大值", "completion": "return MAX(COUNT(a.peopleNumber) / a.peopleNumber) group by a.name, a.value, a.peopleNumber"}
{"prompt": "根据name分组,计算level的求和值除level的最大值", "completion": "return MAX(SUM(a.level) / a.level) group by a.name"}
{"prompt": "根据peopleNumber分组,计算value乘value的值", "completion": "return a.value * a.value group by a.peopleNumber"}
{"prompt": "根据peopleNumber分组,计算peopleNumber减peopleNumber的值", "completion": "return a.peopleNumber - a.peopleNumber group by a.peopleNumber"}
{"prompt": "height的和除178的值", "completion": "SUM(a.height) / 178"}
{"prompt": "height的数量乘height的平均值", "completion": "AVG(COUNT(a.height) * a.height)"}
{"prompt": "height对161取余的值", "completion": "a.height % 161"}
{"prompt": "年龄对19取余除薪资的个数", "completion": "COUNT(a.age % 19 / a.salary)"}
{"prompt": "根据名字,身高,性别分组,计算身高乘187的平均值", "completion": "return AVG(a.height * 187) group by a.name, a.height, a.gender"}
{"prompt": "根据age,gender分组,计算salary除7689的最小值", "completion": "return MIN(a.salary / 7689) group by a.age, a.gender"}
{"prompt": "根据薪资分组,计算年龄对5取余的值", "completion": "return a.age % 5 group by a.salary"}
{"prompt": "根据薪资,身高分组,计算id乘8的最大值", "completion": "return MAX(a.id * 8) group by a.salary, a.height"}
{"prompt": "调用personalRank函数,以'eq', 57作为输入,返回运算结果", "completion": "Call PERSONALRANK('eq', 57) yield (id, value) return id, value"}
{"prompt": "以'zj'作为输入调用KHOP函数,返回id, kValue", "completion": "Call KHOP('zj') yield (id, kValue) return id, kValue"}
{"prompt": "调用triangleCount函数,以'uL'作为输入,返回运算结果", "completion": "Call TRIANGLECOUNT('uL') yield (number) return number"}
{"prompt": "调用triangleCount函数,以'DN', 'Wf', 'WO'作为输入,返回运算结果", "completion": "Call TRIANGLECOUNT('DN', 'Wf', 'WO') yield (number) return number"}
{"prompt": "以'cG', 53, 'Po'作为输入调用SSSP函数,返回运算结果", "completion": "Call SSSP('cG', 53, 'Po') yield (id, distance) return id, distance"}
{"prompt": "调用KHOP函数,以'jg', 14作为输入,返回运算结果", "completion": "Call KHOP('jg', 14) yield (id, kValue) return id, kValue"}
{"prompt": "调用SSSP函数,以76作为输入,返回id, distance", "completion": "Call SSSP(76) yield (id, distance) return id, distance"}
{"prompt": "以'cw', 'gP'作为输入调用SSSP函数,返回id, distance", "completion": "Call SSSP('cw', 'gP') yield (id, distance) return id, distance"}
{"prompt": "以'mG'作为输入调用triangleCount函数,返回number", "completion": "Call TRIANGLECOUNT('mG') yield (number) return number"}
{"prompt": "调用personalRank函数,以'vm', 15, 'vN'作为输入,返回运算结果", "completion": "Call PERSONALRANK('vm', 15, 'vN') yield (id, value) return id, value"}
{"prompt": "以'mm', 'Na', 31作为输入调用triangleCount函数,返回number", "completion": "Call TRIANGLECOUNT('mm', 'Na', 31) yield (number) return number"}
{"prompt": "调用pageRank函数,以'me', 'rV'作为输入,返回id, value", "completion": "Call PAGERANK('me', 'rV') yield (id, value) return id, value"}
{"prompt": "帮我查询id为129的person关联的person, 并将person有关的person的名字的和赋值给person(b)的名字, 接着查询person(b)的名字小于129的person关联的person", "completion": "match(a:person where a.id = 129)-[e:relates]->(b:person) let b.name = SUM((b:person)-[e2]-(c:person) => c.name) match(b:person where b.name < 129)-[e3:relates]->(d:person) return b.name, d"}
{"prompt": "请帮我找出person关联的person, 令person(b)的id的值等于关联person的person的薪资的最大值, 再查找person关联的person", "completion": "match(a:person)-[e:relates]->(b:person) let b.id = MAX((b:person)<-[e2:relates]-(c:person) => c.salary) match(b:person)-[e3:relates]->(d:person) return b.id, d"}
{"prompt": "查询被person knows数量大于59的person,记为relationCount,再查询这些person relates的person", "completion": "match(a:person) let a.relationCount = AVG((a:person)<-[e:knows]-(b:person) => b.id) match(a where a.relationCount > 59)-[e2:relates]->(c:person) return c"}
{"prompt": "找出person孙宏认识的person, 令person(b)的薪资等于person(a)的salary的求和值减薪资的数量,令person(b)的年龄等于person(a)的名字的最大值, 返回person(a)的年龄, person(b)的id", "completion": "match(a:person where a.name='孙宏')-[e:knows]->(b:person) let b.salary = COUNT(SUM(a.salary) - a.salary),let b.age = MAX(a.name) return a.age,b.id"}
{"prompt": "给出person王雪relates的person,以及knows这些person的person, 令person的gender等于person的height乘191,令person(b)的height等于person(a)的id, 返回person(a)的salary,person(b)的salary,person(c)的height", "completion": "match(a:person where name = '王雪')-[e:relates]->(b:person)<-[e2:knows]-(c:person) let c.gender = c.height * 191,let b.height = a.id return a.salary,b.salary,c.height"}
{"prompt": "查找id为89的软件使用的软件, 并将软件有关的person的薪资的个数赋值给软件的星数, 接着查询软件的星数小于89的软件使用的软件", "completion": "match(a:software where a.id = 89)-[e:uses]->(b:software) let b.stars = COUNT((b:software)-[e2]-(c:person) => c.salary) match(b:software where b.stars < 89)-[e3:uses]->(d:software) return b.stars, d"}
{"prompt": "请帮我查找公司雇佣的person, 令person(b)的年龄的值等于认识person的person的薪资的和, 再查找person购买的软件", "completion": "match(a:company)-[e:employee]->(b:person) let b.age = SUM((b:person)<-[e2:knows]-(c:person) => c.salary) match(b:person)-[e3:buy]->(d:software) return b.age, d"}
{"prompt": "找出被软件使用数量大于114的软件,记为relationCount,再查询这些软件使用的person", "completion": "match(a:software) let a.relationCount = AVG((a:software)<-[e:uses]-(b:software) => b.id) match(a where a.relationCount > 114)-[e2:uses]->(c:person) return c"}
{"prompt": "找出person杜月提交的软件, 令person的价值等于软件的value的和除686,令软件的是否开源等于软件的id对10取余, 返回person的身高, 软件的语言", "completion": "match(a:person where a.name='杜月')-[e:commits]->(b:software) let a.value = SUM(b.value) / 686,let b.openSource = b.id % 10 return a.height,b.lang"}
{"prompt": "给出person韩轩buy的software,以及commits这些software的person, 令person的lang等于software的value乘432对292取余, 返回person(a)的gender,software(b)的stars,person(c)的age", "completion": "match(a:person where name = '韩轩')-[e:buy]->(b:software)<-[e2:commits]-(c:person) let a.lang = b.value * 432 % 292 return a.gender,b.stars,c.age"}
{"prompt": "请帮我找出id为28的doctor belong的department, 并将department有关的patient的gender的最大值赋值给department的id, 接着查询department的id小于28的department has的doctor", "completion": "match(a:doctor where a.id = 28)-[e:belong]->(b:department) let b.id = MAX((b:department)-[e2]-(c:patient) => c.gender) match(b:department where b.id < 28)-[e3:has]->(d:doctor) return b.id, d"}
{"prompt": "查找doctor diagnose的patient, 令patient的height的值等于diagnosepatient的doctor的salary的和, 再查找patient accept的prescription", "completion": "match(a:doctor)-[e:diagnose]->(b:patient) let b.height = SUM((b:patient)<-[e2:diagnose]-(c:doctor) => c.salary) match(b:patient)-[e3:accept]->(d:prescription) return b.height, d"}
{"prompt": "返回被医生属于数量大于163的部门,记为relationCount,再查询这些部门属于的部门", "completion": "match(a:department) let a.relationCount = COUNT((a:department)<-[e:belong]-(b:doctor) => b.id) match(a where a.relationCount > 163)-[e2:belong]->(c:department) return c"}
{"prompt": "返回医生郑梅创造的处方, 令医生的id等于医生的id的求和值,令处方的创建时间等于处方的weight的最小值对149取余, 返回医生的年龄, 处方的权重", "completion": "match(a:doctor where a.name='郑梅')-[e:creates]->(b:prescription) let a.id = SUM(a.id),let b.createTime = MIN(b.weight) % 149 return a.age,b.weight"}
{"prompt": "给出医生杜伟属于的部门,以及属于这些部门的医生, 令部门的id等于医生的id的最大值除id对年龄取余,令医生的id等于部门的id的最大值除49除847加84, 返回医生(a)的id,部门(b)的权重,医生(c)的名字", "completion": "match(a:doctor where name = '杜伟')-[e:belong]->(b:department)<-[e2:belong]-(c:doctor) let b.id = MAX(a.id) / a.id % a.age,let a.id = MAX(b.id) / 49 / 847 + 84 return a.id,b.weight,c.name"}
{"prompt": "找出id为24的课程属于的部门, 并将部门有关的教师的id的最小值赋值给部门的大小, 接着查询部门的大小小于24的部门拥有的教师", "completion": "match(a:course where a.id = 24)-[e:belong]->(b:department) let b.size = MIN((b:department)-[e2]-(c:teacher) => c.id) match(b:department where b.size < 24)-[e3:has]->(d:teacher) return b.size, d"}
{"prompt": "给出department has的student, 令student的height的值等于hasstudent的department的name的和, 再查找student selects的course", "completion": "match(a:department)-[e:has]->(b:student) let b.height = SUM((b:student)<-[e2:has]-(c:department) => c.name) match(b:student)-[e3:selects]->(d:course) return b.height, d"}
{"prompt": "请帮我找出被student selects数量大于113的course,记为relationCount,再查询这些course selects的student", "completion": "match(a:course) let a.relationCount = AVG((a:course)<-[e:selects]-(b:student) => b.id) match(a where a.relationCount > 113)-[e2:selects]->(c:student) return c"}
{"prompt": "查找教师郑月教的课程, 令课程的名字等于教师的age的个数对46取余的最大值,令教师的名字等于教师的身高的最大值,令教师的性别等于教师的名字, 返回教师的id, 课程的价值", "completion": "match(a:teacher where a.name='郑月')-[e:teach]->(b:course) let b.name = MAX(COUNT(a.age) % 46),let a.name = MAX(a.height),let a.gender = a.name return a.id,b.value"}
{"prompt": "找出student黄强selects的course,以及selects这些course的student, 令course的courseHour等于course的courseHour, 返回student(a)的salary,course(b)的courseHour,student(c)的salary", "completion": "match(a:student where name = '黄强')-[e:selects]->(b:course)<-[e2:selects]-(c:student) let b.courseHour = b.courseHour return a.salary,b.courseHour,c.salary"}
{"prompt": "请帮我找出id为49的city belong的country, 并将country有关的company的peopleNumber的求和值赋值给country的peopleNumber, 接着查询country的peopleNumber小于49的country contain的city", "completion": "match(a:city where a.id = 49)-[e:belong]->(b:country) let b.peopleNumber = SUM((b:country)-[e2]-(c:company) => c.peopleNumber) match(b:country where b.peopleNumber < 49)-[e3:contain]->(d:city) return b.peopleNumber, d"}
{"prompt": "请帮我找出company cooperate的university, 令university的name的值等于containuniversity的city的value的和, 再查找university cooperate的company", "completion": "match(a:company)-[e:cooperate]->(b:university) let b.name = SUM((b:university)<-[e2:contain]-(c:city) => c.value) match(b:university)-[e3:cooperate]->(d:company) return b.name, d"}
{"prompt": "返回被公司属于数量大于23的城市,记为relationCount,再查询这些城市属于的公司", "completion": "match(a:city) let a.relationCount = MAX((a:city)<-[e:belong]-(b:company) => b.id) match(a where a.relationCount > 23)-[e2:belong]->(c:company) return c"}
{"prompt": "请帮我查找company美团cooperate的university, 令company的id等于company的value除998乘929的最大值, 返回company的value, university的id", "completion": "match(a:company where a.name='美团')-[e:cooperate]->(b:university) let a.id = MAX(a.value / 998 * 929) return a.value,b.id"}
{"prompt": "查找city巴黎belong的country,以及belong这些country的city, 令city的area等于country的area除86606, 返回city(a)的area,country(b)的name,city(c)的value", "completion": "match(a:city where name = '巴黎')-[e:belong]->(b:country)<-[e2:belong]-(c:city) let c.area = b.area / 86606 return a.area,b.name,c.value"}
{"prompt": "查找person观看的电影, 令电影的价值的值等于观看电影的person的身高的平均值, 再查找电影拥有的标签", "completion": "match(a:person)-[e:watch]->(b:film) let b.value = AVG((b:film)<-[e2:watch]-(c:person) => c.height) match(b:film)-[e3:has]->(d:tag) return b.value, d"}
{"prompt": "找出被film has数量大于107的tag,记为relationCount,再查询这些tag has的tag", "completion": "match(a:tag) let a.relationCount = MIN((a:tag)<-[e:has]-(b:film) => b.id) match(a where a.relationCount > 107)-[e2:has]->(c:tag) return c"}
{"prompt": "查找电影院人人影城上映的电影, 令电影的名字等于电影院的大小除756的求和值,令电影的价值等于电影的价值减690的和, 返回电影院的大小, 电影的名字", "completion": "match(a:cinema where a.name='人人影城')-[e:releases]->(b:film) let b.name = SUM(a.size / 756),let b.value = SUM(b.value - 690) return a.size,b.name"}
{"prompt": "帮我查询电影院好视影院上映的电影,以及上映这些电影的电影院, 令电影院(c)的id等于电影院(a)的地址,令电影的id等于电影的名字,令电影院的类别等于电影的id除id的求和值, 返回电影院(a)的名字,电影(b)的价值,电影院(c)的名字", "completion": "match(a:cinema where name = '好视影院')-[e:releases]->(b:film)<-[e2:releases]-(c:cinema) let c.id = a.address,let b.id = b.name,let a.category = SUM(b.id / b.id) return a.name,b.value,c.name"}
{"prompt": "返回id为66的person knows的person, 并将person有关的person的gender的平均值赋值给person(b)的salary, 接着查询person(b)的salary小于66的person knows的person", "completion": "match(a:person where a.id = 66)-[e:knows]->(b:person) let b.salary = AVG((b:person)-[e2]-(c:person) => c.gender) match(b:person where b.salary < 66)-[e3:knows]->(d:person) return b.salary, d"}
{"prompt": "查找person支付的person, 令person(b)的身高的值等于喜欢person的person的id的求和值, 再查找person认识的person", "completion": "match(a:person)-[e:pay]->(b:person) let b.height = SUM((b:person)<-[e2:likes]-(c:person) => c.id) match(b:person)-[e3:knows]->(d:person) return b.height, d"}
{"prompt": "帮我查询被person likes数量大于199的person,记为relationCount,再查询这些person likes的person", "completion": "match(a:person) let a.relationCount = SUM((a:person)<-[e:likes]-(b:person) => b.id) match(a where a.relationCount > 199)-[e2:likes]->(c:person) return c"}
{"prompt": "帮我查询person周国强pay的person, 令person(b)的gender等于person(a)的id减90,令person(a)的salary等于person(b)的name的平均值, 返回person(a)的age, person(b)的id", "completion": "match(a:person where a.name='周国强')-[e:pay]->(b:person) let b.gender = a.id - 90,let a.salary = AVG(b.name) return a.age,b.id"}
{"prompt": "找出person王宏likes的person,以及likes这些person的person, 令person的salary等于person的gender的最大值,令person的id等于person的gender的平均值,令person(b)的height等于person(a)的gender, 返回person(a)的age,person(b)的name,person(c)的salary", "completion": "match(a:person where name = '王宏')-[e:likes]->(b:person)<-[e2:likes]-(c:person) let c.salary = MAX(c.gender),let b.id = AVG(b.gender),let b.height = a.gender return a.age,b.name,c.salary"}
{"prompt": "查询id为122的user publish的post, 并将post有关的tag的id的数量赋值给post的id, 接着查询post的id小于122的post has的tag", "completion": "match(a:user where a.id = 122)-[e:publish]->(b:post) let b.id = COUNT((b:post)-[e2]-(c:tag) => c.id) match(b:post where b.id < 122)-[e3:has]->(d:tag) return b.id, d"}
{"prompt": "查找论坛包含的帖子, 令帖子的价值的值等于发布帖子的用户的名字的求和值, 再查找帖子拥有的标签", "completion": "match(a:forum)-[e:contain]->(b:post) let b.value = SUM((b:post)<-[e2:publish]-(c:user) => c.name) match(b:post)-[e3:has]->(d:tag) return b.value, d"}
{"prompt": "给出被user publish数量大于143的post,记为relationCount,再查询这些post publish的tag", "completion": "match(a:post) let a.relationCount = SUM((a:post)<-[e:publish]-(b:user) => b.id) match(a where a.relationCount > 143)-[e2:publish]->(c:tag) return c"}
{"prompt": "找出forum百度贴吧contain的user, 令user的name等于user的height,令user的name等于user的height, 返回forum的value, user的age", "completion": "match(a:forum where a.name='百度贴吧')-[e:contain]->(b:user) let b.name = b.height,let b.name = b.height return a.value,b.age"}
{"prompt": "查找用户马轩发布的帖子,以及喜欢这些帖子的用户, 令用户的名字等于用户的性别,令帖子的身高等于用户的id的平均值减12,令帖子的字数等于帖子的价值, 返回用户(a)的身高,帖子(b)的字数,用户(c)的身高", "completion": "match(a:user where name = '马轩')-[e:publish]->(b:post)<-[e2:likes]-(c:user) let a.name = a.gender,let b.height = AVG(c.id) - 12,let b.wordCount = b.value return a.height,b.wordCount,c.height"}
{"prompt": "给出id为38的作家认识的作家, 并将作家有关的书的创建时间的平均值赋值给作家的身高, 接着查询作家的身高小于38的作家撰写的书", "completion": "match(a:author where a.id = 38)-[e:knows]->(b:author) let b.height = AVG((b:author)-[e2]-(c:book) => c.createTime) match(b:author where b.height < 38)-[e3:write]->(d:book) return b.height, d"}
{"prompt": "给出book knows的book, 令book的name的值等于publishbook的publisher的height的最大值, 再查找book knows的book", "completion": "match(a:book)-[e:knows]->(b:book) let b.name = MAX((b:book)<-[e2:publish]-(c:publisher) => c.height) match(b:book)-[e3:knows]->(d:book) return b.name, d"}
{"prompt": "请帮我查找被作家认识数量大于106的作家,记为relationCount,再查询这些作家认识的编辑", "completion": "match(a:author) let a.relationCount = MIN((a:author)<-[e:knows]-(b:author) => b.id) match(a where a.relationCount > 106)-[e2:knows]->(c:publisher) return c"}
{"prompt": "给出author韩若涵knows的author, 令author的name等于author的height的个数,令author的name等于author的height的平均值减167,令author的id等于author的name, 返回author(a)的height, author(b)的gender", "completion": "match(a:author where a.name='韩若涵')-[e:knows]->(b:author) let a.name = COUNT(a.height),let a.name = AVG(a.height) - 167,let b.id = b.name return a.height,b.gender"}
{"prompt": "帮我查询book呐喊knows的book,以及likes这些book的reader, 令book的category等于book的name,令reader的createTime等于book的id的最大值乘7加id, 返回book(a)的createTime,book(b)的category,reader(c)的id", "completion": "match(a:book where name = '呐喊')-[e:knows]->(b:book)<-[e2:likes]-(c:reader) let a.category = a.name,let c.createTime = MAX(b.id) * 7 + b.id return a.createTime,b.category,c.id"}
{"prompt": "请帮我找出id为59的person拥有的账号, 并将账号有关的贷款的金额的平均值赋值给账号的名字, 接着查询账号的名字小于59的账号转账的账号", "completion": "match(a:person where a.id = 59)-[e:own]->(b:account) let b.name = AVG((b:account)-[e2]-(c:loan) => c.amount) match(b:account where b.name < 59)-[e3:transfer]->(d:account) return b.name, d"}
{"prompt": "返回公司申请的贷款, 令贷款的权重的值等于申请贷款的公司的id的最小值, 再查找贷款存款的账号", "completion": "match(a:company)-[e:apply]->(b:loan) let b.weight = MIN((b:loan)<-[e2:apply]-(c:company) => c.id) match(b:loan)-[e3:deposit]->(d:account) return b.weight, d"}
{"prompt": "查找被account repay数量大于46的loan,记为relationCount,再查询这些loan repay的loan", "completion": "match(a:loan) let a.relationCount = COUNT((a:loan)<-[e:repay]-(b:account) => b.id) match(a where a.relationCount > 46)-[e2:repay]->(c:loan) return c"}
{"prompt": "请帮我查找person郑强invest的company, 令company的height等于person的age, 返回person的id, company的scale", "completion": "match(a:person where a.name='郑强')-[e:invest]->(b:company) let b.height = a.age return a.id,b.scale"}
{"prompt": "返回loan loan_53 deposit的account,以及deposit这些account的loan, 令account的lastLoginTime等于account的isBlock的数量,令account的weight等于loan的amount, 返回loan(a)的amount,account(b)的lastLoginTime,loan(c)的id", "completion": "match(a:loan where name = 'loan_53')-[e:deposit]->(b:account)<-[e2:deposit]-(c:loan) let b.lastLoginTime = COUNT(b.isBlock),let b.weight = a.amount return a.amount,b.lastLoginTime,c.id"}
{"prompt": "返回id为132的用户喜欢的仓库, 并将仓库有关的合并请求的id的最大值赋值给仓库的id, 接着查询仓库的id小于132的仓库拥有的用户", "completion": "match(a:user where a.id = 132)-[e:likes]->(b:repository) let b.id = MAX((b:repository)-[e2]-(c:pullRequest) => c.id) match(b:repository where b.id < 132)-[e3:has]->(d:user) return b.id, d"}
{"prompt": "请帮我找出issue belong的repository, 令repository的stars的值等于belongrepository的issue的weight的最小值, 再查找repository has的pullRequest", "completion": "match(a:issue)-[e:belong]->(b:repository) let b.stars = MIN((b:repository)<-[e2:belong]-(c:issue) => c.weight) match(b:repository)-[e3:has]->(d:pullRequest) return b.stars, d"}
{"prompt": "查询被合并请求属于数量大于60的仓库,记为relationCount,再查询这些仓库属于的事项", "completion": "match(a:repository) let a.relationCount = AVG((a:repository)<-[e:belong]-(b:pullRequest) => b.id) match(a where a.relationCount > 60)-[e2:belong]->(c:issue) return c"}
{"prompt": "请帮我查找用户韩伟创造的事项, 令用户的状态等于事项的id的数量减id的最大值,令用户的id等于事项的名字, 返回用户的年龄, 事项的创建时间", "completion": "match(a:user where a.name='韩伟')-[e:creates]->(b:issue) let a.status = MAX(COUNT(b.id) - b.id),let a.id = b.name return a.age,b.createTime"}
{"prompt": "查找repository Tugraph has的pullRequest,以及has这些pullRequest的repository, 令pullRequest的createTime等于repository的id对94取余, 返回repository(a)的lang,pullRequest(b)的name,repository(c)的stars", "completion": "match(a:repository where name = 'Tugraph')-[e:has]->(b:pullRequest)<-[e2:has]-(c:repository) let b.createTime = c.id % 94 return a.lang,b.name,c.stars"}
{"prompt": "返回id为199的卖家回答的买家, 并将买家有关的商品的价值的数量赋值给买家的身高, 接着查询买家的身高小于199的买家咨询的卖家", "completion": "match(a:seller where a.id = 199)-[e:ask]->(b:buyer) let b.height = COUNT((b:buyer)-[e2]-(c:goods) => c.value) match(b:buyer where b.height < 199)-[e3:consult]->(d:seller) return b.height, d"}
{"prompt": "查找被卖家回答数量大于173的买家,记为relationCount,再查询这些买家回答的订单", "completion": "match(a:buyer) let a.relationCount = MIN((a:buyer)<-[e:ask]-(b:seller) => b.id) match(a where a.relationCount > 173)-[e2:ask]->(c:orders) return c"}
{"prompt": "查询买家马国强咨询的卖家, 令卖家的身高等于卖家的薪资,令买家的薪资等于买家的名字, 返回买家的身高, 卖家的名字", "completion": "match(a:buyer where a.name='马国强')-[e:consult]->(b:seller) let b.height = b.salary,let a.salary = a.name return a.height,b.name"}
{"prompt": "找出buyer赵国强look的goods,以及contain这些goods的orders, 令goods的name等于goods的category,令orders的name等于buyer的height,令goods的value等于orders的value, 返回buyer的name,goods的price,orders的value", "completion": "match(a:buyer where name = '赵国强')-[e:look]->(b:goods)<-[e2:contain]-(c:orders) let b.name = b.category,let c.name = a.height,let b.value = c.value return a.name,b.price,c.value"}
{"prompt": "提供与公司相关的贷款节点，并按权重进行分组，然后返回这些权重。", "completion": "match(a:company)-[e:apply]-(b:loan) return b.weight group by b.weight"}
{"prompt": "找出张科拥有且走过2到4度的账号点", "completion": "match(a:person where a.name='张科')-[e:own]->{2,4}(b:account) return b"}
{"prompt": "获取 person 的关联人，或者关联人的关联人", "completion": "match(a:person)-[e:relation]->{1,2}(b) return b"}
{"prompt": "找出既有与贷款defaultName的关系，又有与贷款defaultName1的关系的点", "completion": "match(a:loan where a.name='defaultName')-[e:deposit]->(b)<-[e2:deposit]-(c:loan where c.name='defaultName1') return b"}
{"prompt": "找出TheShy和Light的共同好友，共有95人。", "completion": "match(a:account where a.name='TheShy')-[e:friend]->(b)<-[e2:friend]-(c:account where c.name='Light') return b limit 95"}
{"prompt": "找出所有源头是person，目标是account，类型是own的边。", "completion": "match(a:person)-[e:own]->(b:account) return e"}
{"prompt": "请帮我找出所有与TheShy有转账关系的账号，以及这些账号之间的转账关系，并返回这些关系的ID。", "completion": "match(a where a.name = 'TheShy')-[e:transfer]->(b:account)-[e2:transfer]->(c:account) return c.id"}
{"prompt": "请帮我找出与华为公司和账号'TheShy'有关联的账号节点，并返回它们的ID。", "completion": "match(a:company where a.name='华为')-[e]->(b:account)<-[e2]-(c:account where c.name='TheShy') return b.id"}
{"prompt": "找出与贷款defaultName有存款和还款关系的账号，并返回它们的上次登录时间、贷款defaultName的id以及权重。", "completion": "match(a:loan where a.name='defaultName')-[e:deposit]->(b:account)<-[e2:repay]-(c:loan where c.name='defaultName') return a.id,b.lastLoginTime,c.weight"}
{"prompt": "找出与特定账户关联的所有贷款，包括那些与该账户存在存款关系的贷款，以及那些与该账户存在还款关系的贷款。", "completion": "match(a:account)-[e:repay]->(b:loan)-[e2:deposit]->(c:account)-[e3:repay]->(d:loan) return d"}
{"prompt": "能否帮我查一下LX001的账户？", "completion": "match(a:account where a.name = 'LX001') return a"}
{"prompt": "找出年龄降序的人。", "completion": "match(a:person) return a order by a.age desc"}
{"prompt": "找到杜若涵拥有的账户，返回该账户转账记录的最后登录时间。", "completion": "match(a:person where name = '杜若涵')-[e:own]->(b:account)-[e2:transfer]->(c:account) return c.lastLoginTime"}
{"prompt": "请帮我找出所有与person有关联的account节点，这些节点的lastLoginTime是1997年09月09日。然后返回这些节点的id和id的总和，以及value乘以52再减去0的结果。", "completion": "match(a:person)-[e]->(b:account where b.lastLoginTime = '1997-09-09') return b.id + b.id, b.value * 52 - 0"}
{"prompt": "提供一个Light转移账户，显示其他人员拥有的数量。", "completion": "match(a:account where a.name='Light')-[e:transfer]->(b:account)<-[e2:own]-(c:person) return COUNT(c)"}
{"prompt": "找出与贷款defaultName有申请关系的公司", "completion": "match(a:loan where a.name='defaultName')<-[e:apply]-(b:company) return b"}
{"prompt": "提供与腾讯有申请关系的贷款，以及与腾讯相关联的贷款。", "completion": "match(a:company where a.name = '腾讯')-[e:apply]->(b:loan),(a:company where a.name = '腾讯')<-[e2:apply]-(c:loan) return a, b, c"}
{"prompt": "请帮我查找与Faker账号相关的贷款，并查找与Faker还款相关的其他贷款，然后将它们返回。", "completion": "match(a:account where a.name = 'Faker')-[e]-(b:loan), (a:account)-[e2:repay]->(c:loan) return a, b, c"}
{"prompt": "请帮我查找所有用户的关系，或者这些关系中的关系。", "completion": "match(a:user)-[e:relation]->{1,2}(b) return b"}
{"prompt": "请帮我找出与名为李思思和何思思的用户标签相同的节点", "completion": "match(a:user where a.name='李思思')-[e:relation]->(b)<-[e2:relation]-(c:user where c.name='何思思') return b.name"}
{"prompt": "请帮我找出与Prescription_469和Prescription_450都有关联的62个用户节点", "completion": "match(a where a.name='Prescription_469')-[e]->(b:user)<-[e2]-(c where c.name='Prescription_450') return b limit 62"}
{"prompt": "返回Jimmy的朋友的朋友的伙伴的伙伴", "completion": "match(a:user where a.name='Jimmy')-[e:friend]->(b)-[e2:partner]->(c)-[e3:partner]->(d) return d"}
{"prompt": "请帮我找出名为Prescription_277且标签为处方的点，并返回它们的id和权重。", "completion": "match(a:prescription where a.name = 'Prescription_277') return a.id, a.weight"}
{"prompt": "返回按照name升序排列的，1999年07月29日创建或者重量在163到316之间的，数量为143的prescription。", "completion": "match(a:prescription where a.createTime = '1999-07-29' or (a.weight BETWEEN 163 AND 316)) return a order by a.name asc limit 143"}
{"prompt": "找出在2026年01月06日创建的所有与处方有关的节点，并返回它们的ID对99取余，然后除以891、58和37，最后再减去42得到的最小值。", "completion": "match(a:prescription)-[e]->(b:prescription where b.createTime = '2026-01-06') return b.id % 99 / 891 / 58 / 37, MIN(b.id - 42)"}
{"prompt": "获取与person相关的评论节点，按其id和名称进行分组，并返回id和名称。", "completion": "match(a:person)-[e:likes]-(b:comment) return b.id, b.name group by b.id, b.name"}
{"prompt": "从周红出发，通过观看标签的边，走2到5步到达的电影点。", "completion": "match(a:person where a.name='周红')-[e:watch]->{2,5}(b:film) return b"}
{"prompt": "请帮我查找所有film的friend，或者它们的朋友", "completion": "match(a:film)-[e:friend]->{1,2}(b) return b"}
{"prompt": "找出与Comment_133和Comment_401都有关联的点", "completion": "match(a:comment where a.name='Comment_133')-[e:belong]->(b)<-[e2:belong]-(c:comment where c.name='Comment_401') return b"}
{"prompt": "请帮我找出75个Person、周月和陈强共同的伙伴。", "completion": "match(a:person where a.name='周月')-[e:partner]->(b)<-[e2:partner]-(c:person where c.name='陈强') return b limit 75"}
{"prompt": "找出所有源点为电影院，目标点为电影且标签为上映的边。", "completion": "match(a:cinema)-[e:releases]->(b:film) return e"}
{"prompt": "找出所有与王强有watch关系的电影，以及这些电影与tag有has关系的点，并返回这些点的价值。", "completion": "match(a where a.name = '王强')-[e:watch]->(b:film)-[e2:has]->(c:tag) return c.value"}
{"prompt": "请找出与Comment_151有关系并和标签动作有关的评论节点，返回它们的名称和创建时间。", "completion": "match(a:comment where a.name='Comment_151')-[e]->(b:comment)<-[e2]-(c:tag where c.name='动作') return b.name, b.createTime"}
{"prompt": "请找出与评论Comment_119有关联，并且拥有悬疑标签的电影。并返回这些电影的名称、Comment_119的创建时间和悬疑标签的ID。", "completion": "match(a:comment where a.name='Comment_119')-[e:belong]->(b:film)<-[e2:has]-(c:tag where c.name='悬疑') return a.createTime,b.name,c.id"}
{"prompt": "找出与被标记为'person'的节点有创建关系的评论，以及这些评论与之有关联的电影，并且这些电影又与某些标签有拥有关系。", "completion": "match(a:person)-[e:creates]->(b:comment)-[e2:belong]->(c:film)-[e3:has]->(d:tag) return d"}
{"prompt": "帮我找一下名为Comment_328的评论", "completion": "match(a:comment where a.name = 'Comment_328') return a"}
{"prompt": "找出名为comment的点，并按名称升序排序。", "completion": "match(a:comment) return a order by a.name asc"}
{"prompt": "查询何建聪观看的电影，返回这些电影拥有的标签的ID和价值。", "completion": "match(a:person where name = '何建聪')-[e:watch]->(b:film)-[e2:has]->(c:tag) return c.id, c.value"}
{"prompt": "找出与电影院相关的空标签节点，然后返回这些节点价值除以444的最小值和对186取余的最大值。", "completion": "match(a:cinema)-[e]->(b:tag where (b.value is null)) return MIN(b.value / 444), MAX(b.value % 186)"}
{"prompt": "请帮我找出陈雪创造的评论中，被其他用户喜欢的数量。", "completion": "match(a:person where a.name='陈雪')-[e:creates]->(b:comment)<-[e2:likes]-(c:person) return COUNT(c)"}
{"prompt": "查询与Comment_199有likes关系的所有person", "completion": "match(a:comment where a.name='Comment_199')<-[e:likes]-(b:person) return b"}
{"prompt": "请提供与韩建聪有关的观影记录，以及与电影《我不是药神》相关的标签，并将两者一起返回。", "completion": "match(a:person where a.name = '韩建聪')-[e:watch]->(b:film),(c:film where c.name = '我不是药神')-[e2:has]->(d:tag) return a, b, c, d"}
{"prompt": "返回与ID为30的评论相关的人的朋友，以及与该人相关的其他人员。", "completion": "match(a:comment where id = '30')-[e]-(b:person)-[e2:friend]->(c), (b:person)-[e3:relation]->(d) return a, b, c, d"}
{"prompt": "请帮我找出与person节点相关的所有person节点，然后按照它们的id进行分组，并返回这些id。", "completion": "match(a:person)-[e:lover]-(b:person) return b.id group by b.id"}
{"prompt": "帮我查询从person吴雪出发，通过朋友关系，走过3跳或者4跳可以到达的人", "completion": "match(a:person where a.name='吴雪')-[e:friend]->{3,4}(b:person) return b"}
{"prompt": "请帮我查找person及其家族成员", "completion": "match(a:person)-[e:family]->{1,2}(b) return b"}
{"prompt": "找出与张红和黄伟都存在朋友关系的点", "completion": "match(a:person where a.name='张红')-[e:friend]->(b)<-[e2:friend]-(c:person where c.name='黄伟') return b"}
{"prompt": "返回马国强和李月这两位共同的父母，他们各自有180个人。", "completion": "match(a:person where a.name='马国强')-[e:parent]->(b)<-[e2:parent]-(c:person where c.name='李月') return b limit 180"}
{"prompt": "请帮我找出家人之间的person-to-person边", "completion": "match(a:person)-[e:family]->(b:person) return e"}
{"prompt": "请帮我找出和吴雪有家庭关系的人，以及这些人之间有朋友关系的点，并返回这些点的名字。", "completion": "match(a where a.name = '吴雪')-[e:family]->(b:person)-[e2:friend]->(c:person) return c.name"}
{"prompt": "请帮我找出与person李宏和person吴月都存在关系的person节点，并返回他们的gender和name", "completion": "match(a:person where a.name='李宏')-[e]->(b:person)<-[e2]-(c:person where c.name='吴月') return b.gender, b.name"}
{"prompt": "找到与赵轩和韩轩都有parent关系的人，并返回他们的薪水、年龄以及赵轩的年龄和韩轩的ID。", "completion": "match(a:person where a.name='赵轩')-[e:parent]->(b:person)<-[e2:parent]-(c:person where c.name='韩轩') return a.age,b.salary, b.age,c.id"}
{"prompt": "请帮我找出与我有同事关系的人，他们又与其他人有同事关系，并且这些人之间又有朋友关系。", "completion": "match(a:person)-[e:colleague]->(b:person)-[e2:colleague]->(c:person)-[e3:friend]->(d:person) return d"}
{"prompt": "帮我找一下叫吴红的人", "completion": "match(a:person where a.name = '吴红') return a"}
{"prompt": "找到所有标签为person的点，按照id从大到小排序。", "completion": "match(a:person) return a order by a.id desc"}
{"prompt": "查询与'黄科'有关的人的信息，包括他们的薪资、性别和年龄。", "completion": "match(a:person where name = '黄科')-[e:relates]->(b:person)-[e2:relates]->(c:person) return c.salary, c.gender, c.age"}
{"prompt": "返回所有与person有关联的年龄小于52岁的person节点，计算他们的age加上94后的总和，并找出他们height字段对187取余的结果中的最小值。", "completion": "match(a:person)-[e]->(b:person where b.age < 52) return SUM(b.age + 94), MIN(COUNT(b.height) % 187)"}
{"prompt": "查询与陈若涵有关的人，以及这些人被其他人认识的数量。", "completion": "match(a:person where a.name='陈若涵')-[e:relates]->(b:person)<-[e2:knows]-(c:person) return COUNT(c)"}
{"prompt": "找出与郑宏有联系的人", "completion": "match(a:person where a.name='郑宏')<-[e:knows]-(b:person) return b"}
{"prompt": "返回与黄建聪是同事的人，以及与郑科是朋友的人。", "completion": "match(a:person where a.name = '黄建聪')-[e:colleague]->(b:person),(c:person where c.name = '郑科')-[e2:friend]->(d:person) return a, b, c, d"}
{"prompt": "请帮我找出id为179的person的恋人，再帮我找出与该person相关的同事。", "completion": "match(a:person where id = '179')-[e]-(b:person)-[e2:lover]->(c), (b:person)-[e3:colleague]->(d) return a, b, c, d"}
{"prompt": "返回与用户相关的帖子节点，并按语言进行分组。", "completion": "match(a:user)-[e:publish]-(b:post) return b.lang group by b.lang"}
{"prompt": "从百度贴吧论坛出发，沿着包含类型的边走2到4步，找到person节点。", "completion": "match(a:forum where a.name='百度贴吧')-[e:contain]->{2,4}(b:person) return b"}
{"prompt": "向用户推荐他们的朋友，或者他们朋友的朋友", "completion": "match(a:user)-[e:partner]->{1,2}(b) return b"}
{"prompt": "找出吴雪和何建国都发布的点", "completion": "match(a:user where a.name='吴雪')-[e:publish]->(b)<-[e2:publish]-(c:user where c.name='何建国') return b"}
{"prompt": "找出用户何伟和吴红之间的关系", "completion": "match(a:user where a.name='何伟')-[e:relation]->(b)<-[e2:relation]-(c:user where c.name='吴红') return b limit 94"}
{"prompt": "返回所有源点为forum，目标点为person，且标签为contain的边。", "completion": "match(a:forum)-[e:contain]->(b:person) return e"}
{"prompt": "查询与杜红有发布关系的帖子，以及这些帖子所拥有的标签，返回这些标签的价值。", "completion": "match(a where a.name = '杜红')-[e:publish]->(b:post)-[e2:has]->(c:tag) return c.value"}
{"prompt": "请找出与Post_359和Post_203都有关联的post节点，并返回它们的语言和单词数量", "completion": "match(a:post where a.name='Post_359')-[e]->(b:post)<-[e2]-(c:post where c.name='Post_203') return b.lang, b.wordCount"}
{"prompt": "请帮我找出天涯论坛上有关古代的帖子，并返回这些帖子的字数、创建时间和它们所在论坛以及标签的价值。", "completion": "match(a:forum where a.name='天涯论坛')-[e:contain]->(b:post)<-[e2:has]-(c:tag where c.name='古代') return a.value,b.wordCount, b.createTime,c.value"}
{"prompt": "请帮我找出那些人数不为空且id小于99的论坛所包含的帖子及其对应的标签名称", "completion": "match(a:forum where (a.peopleNumber is not null) and a.id < 99)-[e:contain]->(b:post)-[e2:has]->(c:tag) return b.name as b_name, c.name as c_name"}
{"prompt": "请帮我找出所有标签为'悬疑'的点，包括它们的ID、名称和价值。", "completion": "match(a:tag where a.name = '悬疑') return a.id, a.name, a.value"}
{"prompt": "找出186个薪资和id都为空，但性别不是male的用户，并按照性别进行降序排序。", "completion": "match(a:user where (a.salary is not null) and (a.id is null) and a.gender <> 'male') return a order by a.gender desc limit 186"}
{"prompt": "获取所有源点为forum，边类型为contain的边。返回这些边的targetId减去776后的值，以及srcId除以160的余数。", "completion": "match(a:forum)-[e:contain]->(b) return e.targetId - e.targetId - 776, e.srcId % 160"}
{"prompt": "请帮我找出与论坛相关的标签，以及这些标签与其他帖子之间的'has'关系。", "completion": "match(a:forum where a.id = '119')-[e]-(b:tag)<-[e2:has]-(c:post) return b,c"}
{"prompt": "帮我查找天涯论坛中提到的人", "completion": "match(a:person)<-[e:contain]-(b:forum where b.name='天涯论坛') return a, b"}
{"prompt": "找出与'中国军事论坛'有关联的人员，以及与用户'马思思'有关联的帖子，并返回所有结果。", "completion": "match(a:forum where a.name = '中国军事论坛')-[e:contain]->(b:person),(c:user where c.name = '马思思')-[e2:publish]->(d:post) return a, b, c, d"}
{"prompt": "获取与person ID为183相关的forum的关系，然后获取与该forum相关的partner。", "completion": "match(a:person where id = '183')-[e]-(b:forum)-[e2:relation]->(c), (b:forum)-[e3:partner]->(d) return a, b, c, d"}
{"prompt": "请帮我找到与病人相关的处方节点，并按其ID和权重进行分组，最后返回ID和权重。", "completion": "match(a:patient)-[e:accept]-(b:prescription) return b.id, b.weight group by b.id, b.weight"}
{"prompt": "从医生黄强出发，通过归属关系的边，走三步到达的部门。", "completion": "match(a:doctor where a.name='黄强')-[e:belong]->{3,3}(b:department) return b"}
{"prompt": "找出所有员工及其朋友的朋友", "completion": "match(a:department)-[e:partner]->{1,2}(b) return b"}
{"prompt": "请帮我找出由医生李梅和马伟共同创建的点", "completion": "match(a:doctor where a.name='李梅')-[e:creates]->(b)<-[e2:creates]-(c:doctor where c.name='马伟') return b"}
{"prompt": "请帮我找出王强和杜红之间的101个关联，他们都是医生。", "completion": "match(a:doctor where a.name='王国强')-[e:relation]->(b)<-[e2:relation]-(c:doctor where c.name='杜红') return b limit 101"}
{"prompt": "请帮我找出所有由医生创建，指向处方的边。", "completion": "match(a:doctor)-[e:creates]->(b:prescription) return e"}
{"prompt": "请帮我找出所有与杜思思存在从属关系的部门，以及这些部门所拥有的医生节点。然后返回这些医生节点的高度信息。", "completion": "match(a where a.name = '杜思思')-[e:belong]->(b:department)-[e2:has]->(c:doctor) return c.height"}
{"prompt": "返回与department皮肤科和prescription Prescription_274都存在关系的patient节点，返回它们的id、age和height。", "completion": "match(a:department where a.name='皮肤科')-[e]->(b:patient)<-[e2]-(c:prescription where c.name='Prescription_274') return b.id, b.age, b.height"}
{"prompt": "查询与doctor周建聪有belong关系和与doctor王梅有has关系的department节点，并返回这些department的id、name和address以及doctor周建聪的名字和doctor王梅的性别。", "completion": "match(a:doctor where a.name='周建聪')-[e:belong]->(b:department)<-[e2:has]-(c:doctor where c.name='王梅') return a.name,b.id, b.name, b.address,c.gender"}
{"prompt": "请帮我找出与部门标签为department的点有has关系的医生，以及这些医生属于的部门，并且这些部门又与有has关系的医生。", "completion": "match(a:department)-[e:has]->(b:doctor)-[e2:belong]->(c:department)-[e3:has]->(d:doctor) return d"}
{"prompt": "请提供生理盐水药品", "completion": "match(a:medicine where a.name = '生理盐水') return a"}
{"prompt": "返回所有标记为'医生'的点，按照身高从高到低排序。", "completion": "match(a:doctor) return a order by a.height desc"}
{"prompt": "请告诉我医生李梅所在的部门，并返回该部门所有医生的性别。", "completion": "match(a:doctor where name = '李梅')-[e:belong]->(b:department)-[e2:has]->(c:doctor) return c.gender"}
{"prompt": "请帮我找到所有名为'阿莫新林'的medicine节点，这些节点与prescription有关。然后，我需要获取这些节点的weight除以27的结果，以及price对price取余后减去222、78和191的值。", "completion": "match(a:prescription)-[e]->(b:medicine where b.name = '阿莫新林') return b.weight / 27, b.price % b.price - 222 - 78 - 191"}
{"prompt": "请帮我查找医生王科开具的处方中，被其他患者接受的数量。", "completion": "match(a:doctor where a.name='王科')-[e:creates]->(b:prescription)<-[e2:accept]-(c:patient) return COUNT(c)"}
{"prompt": "找到与处方Prescription_474有创建关系的医生", "completion": "match(a:prescription where a.name='Prescription_474')<-[e:creates]-(b:doctor) return b"}
{"prompt": "请找出与处方Prescription_354有关联的所有药品，以及由医生徐宏创建的所有处方，并将它们全部返回。", "completion": "match(a:prescription where a.name = 'Prescription_354')-[e:contain]->(b:medicine),(c:doctor where c.name = '徐宏')-[e2:creates]->(d:prescription) return a, b, c, d"}
{"prompt": "请提供与ID为64的处方相关的部门合作伙伴，以及与该部门相关联的所有人员。", "completion": "match(a:prescription where id = '64')-[e]-(b:department)-[e2:partner]->(c), (b:department)-[e3:relation]->(d) return a, b, c, d"}
{"prompt": "请帮我找出与买家相关的订单节点，并按其ID和价值进行分组，返回ID和价值。", "completion": "match(a:buyer)-[e:cancel]-(b:orders) return b.id, b.value group by b.id, b.value"}
{"prompt": "帮我找buyer陈宏出发，通过look标签的边走三步到的goods点", "completion": "match(a:buyer where a.name='陈宏')-[e:look]->{3,3}(b:goods) return b"}
{"prompt": "查询所有买家的亲朋好友", "completion": "match(a:buyer)-[e:friend]->{1,2}(b) return b"}
{"prompt": "找出与buyer徐若涵和吴伟都存在consult关系的点", "completion": "match(a:buyer where a.name='徐若涵')-[e:consult]->(b)<-[e2:consult]-(c:buyer where c.name='吴伟') return b"}
{"prompt": "请帮我找出周宏和何思思的共同朋友，他们都是卖家。", "completion": "match(a:seller where a.name='周宏')-[e:friend]->(b)<-[e2:friend]-(c:seller where c.name='何思思') return b limit 107"}
{"prompt": "请帮我找出源点是buyer，目标点是goods，类型是look的边。", "completion": "match(a:buyer)-[e:look]->(b:goods) return e"}
{"prompt": "请帮我找出所有与周红存在取消关系的订单，以及这些订单中包含的商品点，并返回这些点的价值。", "completion": "match(a where a.name = '周红')-[e:cancel]->(b:orders)-[e2:contain]->(c:goods) return c.value"}
{"prompt": "请找出与Order_406有关联，同时与买家郑建聪有关联的seller节点，并返回它们的性别、身高和ID。", "completion": "match(a:orders where a.name='Order_406')-[e]->(b:seller)<-[e2]-(c:buyer where c.name='郑建聪') return b.gender, b.height, b.id"}
{"prompt": "请帮我找出与buyer郑若涵有consult关系，并且与goods杯子有has关系的seller节点。并返回这些seller的height、id、age以及buyer郑若涵和goods杯子的id", "completion": "match(a:buyer where a.name='郑若涵')-[e:consult]->(b:seller)<-[e2:has]-(c:goods where c.name='杯子') return a.id,b.height, b.id, b.age,c.id"}
{"prompt": "请帮我找出性别不是female且id乘以69再乘以68小于6321的买家创建的订单及其包含的商品名称", "completion": "match(a:buyer where a.gender <> 'famale' or a.id * 69 * 68 < 6321)-[e:creates]->(b:orders)-[e2:contain]->(c:goods) return b.name as b_name, c.name as c_name"}
{"prompt": "查询名为徐建聪且标签为seller的点的id、height和name。", "completion": "match(a:seller where a.name = '徐建聪') return a.id, a.height, a.name"}
{"prompt": "找出名字不为'苹果'，销量不大于661.96，且ID不为52的96个商品，并按名字升序排序。", "completion": "match(a:goods where a.id <> 52 and a.name <> '苹果' and a.sellerNumber <= 661.96) return a order by a.name asc limit 96"}
{"prompt": "找到所有与goods有关联的goods节点，如果这些节点的value不大于100，则返回这些节点中price最大值除以price后的余数和price乘以2366.09的结果。", "completion": "match(a:goods)-[e]->(b:goods where b.value <= 100) return MAX(b.price) % b.price, b.price * 2366.09"}
{"prompt": "获取Order_188包含的商品，这些商品在其他订单中出现的次数。", "completion": "match(a:orders where a.name='Order_188')-[e:contain]->(b:goods)<-[e2:contain]-(c:orders) return COUNT(c)"}
{"prompt": "查询与商品香蕉有has关系的所有卖家", "completion": "match(a:goods where a.name='香蕉')<-[e:has]-(b:seller) return b"}
{"prompt": "请提供与买家陈轩有关的创建订单，以及与买家何红有关的取消订单。", "completion": "match(a:buyer where a.name = '陈轩')-[e:creates]->(b:orders),(c:buyer where c.name = '何红')-[e2:cancel]->(d:orders) return a, b, c, d"}
{"prompt": "请帮我找出id为160的卖家的朋友，以及与该卖家有关系的朋友。", "completion": "match(a:seller where id = '160')-[e]-(b:seller)-[e2:friend]->(c), (b:seller)-[e3:friend]->(d) return a, b, c, d"}
{"prompt": "按category、createTime和id对book进行分组，然后计算每个组的wordCount。最后，根据wordCount从小到大对结果进行排序。", "completion": "match(a:book) return a.wordCount group by a.category, a.createTime, a.id order by a.wordCount asc"}
{"prompt": "找出所有读者的朋友，或者他们朋友的朋友", "completion": "match(a:reader)-[e:friend]->{1,2}(b) return b"}
{"prompt": "找出Jack和郑建国都认识的人", "completion": "match(a:author where a.name='Jack')-[e:knows]->(b)<-[e2:knows]-(c:author where c.name='郑建国') return b"}
{"prompt": "查询与韩若涵和吴雪都有关联的66本书。", "completion": "match(a where a.name='韩若涵')-[e]->(b:book)<-[e2]-(c where c.name='吴雪') return b limit 66"}
{"prompt": "找到author为何月所写的book，且该book与另一个book有关系。", "completion": "match(a:author where a.name = '何月')-[e:write]->(b:book)-[e2:relates]->(c:book) return c"}
{"prompt": "查询所有和'吴雪'以及'三体'相关的作者信息", "completion": "match(a:author where a.name='吴雪')-[e:knows]-(b:author)-[e2:write]-(c:book where c.name='三体') return b"}
{"prompt": "返回与编辑马建聪有关的朋友的联系人", "completion": "match(a:publisher where a.name='马建聪')-[e:friend]->(b)-[e2:relation]->(c)-[e3:relation]->(d) return d"}
{"prompt": "找出reader likes的身高大于168或者年龄大于等于70的book，以及这些book相关的book的名称。", "completion": "match(a:reader where a.height > 168 or COUNT(a.age) >= 70)-[e:likes]->(b:book)-[e2:relates]->(c:book) return b.name as b_name, c.name as c_name"}
{"prompt": "找出出版社名为何伟的点，返回它们的性别、薪水和年龄。", "completion": "match(a:publisher where a.name = '何伟') return a.gender, a.salary, a.age"}
{"prompt": "筛选出181位年龄非空且性别为女性的作家，按照性别从大到小排序。", "completion": "match(a:author where (a.age is not null) and a.gender = 'famale') return a order by a.gender desc limit 181"}
{"prompt": "找出所有作者知道的边，计算这些边中targetId除以75的余数最大的targetId，以及weight的总和。然后将这个结果加上115.58乘以13的结果。", "completion": "match(a:author)-[e:knows]->(b) return MAX(e.targetId % 75), SUM((SUM(e.weight) + 115.58) * 13)"}
{"prompt": "找出所有与这些书有编辑关联的书籍，以及这些书籍与其他编辑之间的发布关系", "completion": "match(a:publisher where a.id = '36')-[e]-(b:book)<-[e2:publish]-(c:publisher) return b,c"}
{"prompt": "查询与作家吴国强有联系的作家", "completion": "match(a:author where a.name='吴国强')<-[e:knows]-(b:author) return b"}
{"prompt": "查询与《呐喊》有关的编辑，然后查询《呐喊》引用的其他书籍，并将它们返回。", "completion": "match(a:book where a.name = '呐喊')-[e]-(b:publisher), (a:book)-[e2:refers]->(c:book) return a, b, c"}
{"prompt": "帮我按level和name对university进行分组，然后按照id升序排序并获取每个组的id", "completion": "match(a:university) return a.id group by a.level, a.name order by a.id asc"}
{"prompt": "找出与土木学院相关的所有学生，包括那些与相关者有关的学生。", "completion": "match(a:department where n.name=土木学院)-[e:relation]->{1,2}(b:student) return b"}
{"prompt": "找出张轩和吴若涵这两位老师共同的合作伙伴，共有196位。", "completion": "match(a:teacher where a.name='张轩')-[e:partner]->(b)<-[e2:partner]-(c:teacher where c.name='吴若涵') return b limit 196"}
{"prompt": "请帮我找出与四川大学有has关系，并且与孙宏老师有has关系的department节点。请返回这些department的id、value和name，以及四川大学的level和孙宏老师的name。", "completion": "match(a:university where a.name='四川大学')-[e:has]->(b:department)<-[e2:has]-(c:teacher where c.name='孙宏') return a.level,b.id, b.value, b.name,c.name"}
{"prompt": "请帮我找出所有label为'teacher'且name为'孙建国'的点，并返回它们的id和height。", "completion": "match(a:teacher where a.name = '孙建国') return a.id, a.height"}
{"prompt": "请帮我找出所有源点标签为department，边标签为has的边。返回这些边的targetId对173取余的结果以及srcId除以105后的个数。", "completion": "match(a:department)-[e:has]->(b) return e.targetId % 173, COUNT(e.srcId / 105)"}
{"prompt": "找出李若涵选的课程，被其他老师教的次数", "completion": "match(a:student where a.name='李若涵')-[e:selects]->(b:course)<-[e2:teach]-(c:teacher) return COUNT(c)"}
{"prompt": "找出与土木学院有has关系的大学", "completion": "match(a:department where a.name='土木学院')<-[e:has]-(b:university) return b"}
{"prompt": "请帮我查询与复旦大学有关的部门，以及与教师马红有关的课程，并将结果返回。", "completion": "match(a:university where a.name = '复旦大学')-[e:has]->(b:department),(c:teacher where c.name = '马红')-[e2:teach]->(d:course) return a, b, c, d"}
{"prompt": "返回与ID为71的教师相关的教师，再返回这些教师的关系人。", "completion": "match(a:teacher where id = '71')-[e]-(b:teacher)-[e2:relation]->(c), (b:teacher)-[e3:partner]->(d) return a, b, c, d"}
{"prompt": "请帮我按身高降序分组并查找所有的人，他们按照age、name和gender进行分类。", "completion": "match(a:person) return a.height group by a.age, a.name, a.gender order by a.height desc"}
{"prompt": "找出与名为张宏的人有朋友关系，或者有朋友的朋友关系的人。", "completion": "match(a:person where n.name=张宏)-[e:friend]->{1,2}(b:person) return b"}
{"prompt": "找出所有被名为赵月和赵科的点都喜欢的、label为person的节点", "completion": "match(a where a.name = '赵月')-[e:likes]->(b:person)<-[e2:likes]-(c where c.name = '赵科') return b"}
{"prompt": "找出周雪和张梅共同的朋友列表。", "completion": "match(a:person where a.name='周雪')-[e:friend]->(b)<-[e2:friend]-(c:person where c.name='张梅') return b.name"}
{"prompt": "请帮我找出与王思琪和赵月都有关系的30个人。", "completion": "match(a where a.name='王思琪')-[e]->(b:person)<-[e2]-(c where c.name='赵月') return b limit 30"}
{"prompt": "请帮我找出与103个类型为person的节点有knows关系的所有person节点，以及这些person节点之间的knows关系。", "completion": "match(a:person)-[e:knows]->(b:person)-[e2:knows]->(c:person) return c limit 103"}
{"prompt": "找出马伟认识并由其支付的人", "completion": "match(a:person where a.name = '马伟')-[e:knows]->(b:person)-[e2:pay]->(c:person) return c"}
{"prompt": "查询与周科和徐科都有关联的person节点", "completion": "match(a:person where a.name='周科')-[e:likes]-(b:person)-[e2:knows]-(c:person where c.name='徐科') return b"}
{"prompt": "查找与黄红朋友相关的人的朋友", "completion": "match(a:person where a.name='黄红')-[e:friend]->(b)-[e2:relation]->(c)-[e3:friend]->(d) return d"}
{"prompt": "找出薪水不为空的人知道的人的名字，以及这些人支付的人的名字。", "completion": "match(a:person where (a.salary is not null))-[e:knows]->(b:person)-[e2:pay]->(c:person) return b.name as b_name, c.name as c_name"}
{"prompt": "请帮我找出所有标签为person，名字是孙思琪的点，并返回它们的id、name和salary。", "completion": "match(a:person where a.name = '孙思琪') return a.id, a.name, a.salary"}
{"prompt": "请帮我找出薪资低于7136的前127个人，按照薪资从低到高排序", "completion": "match(a:person where a.salary < 7136) return a order by a.salary asc limit 127"}
{"prompt": "查询所有源点类型为person、边类型为pay的边，返回这些边的srcId乘以80再加上115.08再加上srcId的总和，以及targetId的最小值加上targetId的值。", "completion": "match(a:person)-[e:pay]->(b) return SUM(e.srcId * 80 + 115.08 + e.srcId), MIN(e.targetId) + e.targetId"}
{"prompt": "获取所有person及其喜欢的其他person", "completion": "match(a:person where a.id = '124')-[e]-(b:person)<-[e2:likes]-(c:person) return b,c"}
{"prompt": "找出王建聪喜欢的人", "completion": "match(a:person)<-[e:likes]-(b:person where b.name='王建聪') return a, b"}
{"prompt": "查询所有张月知道的人，然后查询张月被喜欢的人，将两者的结果一起返回。", "completion": "match(a where a.name = '张月')-[e:knows]->(b:person),(a where a.name = '张月')<-[e2:likes]-(c:person) return a, b, c"}
{"prompt": "帮我找出与黄雪有关联的支付人员，以及与黄雪有关联的所有人员", "completion": "match(a:person where a.name = '黄雪')-[e:pay]->(b:person),(a:person where a.name = '黄雪')<-[e2:pay]-(c:person) return a, b, c"}
{"prompt": "找出与郑红有关的人，再找出这些人中郑红认识的人，并将他们返回。", "completion": "match(a:person where a.name = '郑红')-[e]-(b:person), (a:person)-[e2:knows]->(c:person) return a, b, c"}
{"prompt": "请按value升序排列，找出所有以'name'分组的city。", "completion": "match(a:city) return a.value group by a.name order by a.value asc"}
{"prompt": "获取与名为'武汉'的城市有伙伴关系，或者有伙伴的伙伴关系的所有公司。", "completion": "match(a:city where n.name=武汉)-[e:partner]->{1,2}(b:company) return b"}
{"prompt": "找到同时被Bilibili和字节标记为城市的节点。", "completion": "match(a where a.name = 'Bilibili')-[e:belong]->(b:city)<-[e2:belong]-(c where c.name = '字节') return b"}
{"prompt": "找出拥有'城市'标签且位于深圳或天津的两个点的所有共同朋友。", "completion": "match(a:city where a.name='深圳')-[e:friend]->(b)<-[e2:friend]-(c:city where c.name='天津') return b.name"}
{"prompt": "请帮我找四个与字节跳动和阿里巴巴都有关联的country节点。", "completion": "match(a where a.name='字节')-[e]->(b:country)<-[e2]-(c where c.name='阿里') return b limit 4"}
{"prompt": "请帮我找出与63个类型为company的点有belong关系的城市，以及这些城市中有contain关系的大学。", "completion": "match(a:company)-[e:belong]->(b:city)-[e2:contain]->(c:university) return c limit 63"}
{"prompt": "找到与微软合作的大学节点，该节点又与另一家公司合作。", "completion": "match(a:company where a.name = '微软')-[e:cooperate]->(b:university)-[e2:cooperate]->(c:company) return c"}
{"prompt": "查询与公司蚂蚁集团和滴滴都相关的大学节点。", "completion": "match(a:company where a.name='蚂蚁集团')-[e:cooperate]-(b:university)-[e2:cooperate]-(c:company where c.name='滴滴') return b"}
{"prompt": "查询浙江大学关系中的朋友伙伴", "completion": "match(a:university where a.name='浙江大学')-[e:relation]->(b)-[e2:friend]->(c)-[e3:partner]->(d) return d"}
{"prompt": "找出company cooperate中value不大于414的university的名称，以及这些university所在的城市名称。", "completion": "match(a:company where a.value <= 414)-[e:cooperate]->(b:university)-[e2:belong]->(c:city) return b.name as b_name, c.name as c_name"}
{"prompt": "查询名为'杭州'的城市点，返回这些点的价值和名称。", "completion": "match(a:city where a.name = '杭州') return a.value, a.name"}
{"prompt": "查询满足以下条件的university：name为'武汉大学'，id在49到98之间，或者value大于397。按照level字段降序排序，并返回前102条数据。", "completion": "match(a:university where (a.name = '武汉大学' and (a.id BETWEEN 49 AND 98)) or a.value > 397) return a order by a.level desc limit 102"}
{"prompt": "找出所有源点标签为'university'，边标签为'belong'的边。计算这些边的weight的平均值减去131.59，然后将结果与f0乘以520的平均值相加。", "completion": "match(a:university)-[e:belong]->(b) return SUM(AVG(e.weight) - 131.59), AVG(e.f0 * 520)"}
{"prompt": "获取所有与大学有关联的城市，以及这些城市所包含的所有大学。", "completion": "match(a:university where a.id = '119')-[e]-(b:university)<-[e2:contain]-(c:city) return b,c"}
{"prompt": "找出位于美国的城市", "completion": "match(a:city)<-[e:contain]-(b:country where b.name='美国') return a, b"}
{"prompt": "请帮我查找在深圳的包含的公司和被包含的国家，一并返回。", "completion": "match(a where a.name = '深圳')-[e:contain]->(b:company),(a where a.name = '深圳')<-[e2:contain]-(c:country) return a, b, c"}
{"prompt": "找出包含'东京'的公司，然后找出与这些公司有关联的其他公司。", "completion": "match(a:city where a.name = '东京')-[e:contain]->(b:company),(a:city where a.name = '东京')<-[e2:contain]-(c:company) return a, b, c"}
{"prompt": "请找出与武汉大学相关城市及与其合作公司", "completion": "match(a:university where a.name = '武汉大学')-[e]-(b:city), (a:university)-[e2:cooperate]->(c:company) return a, b, c"}
{"prompt": "使用这个图:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex software ( id int ID, name varchar, lang varchar, stars int, openSource boolean, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge company_employee_person ( srcId int FROM company SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_creates_software ( srcId int FROM company SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge software_uses_software ( srcId int FROM software SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_belong_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_buy_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_commits_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ));查找公司谷歌 雇佣的person,返回person 购买的软件的id的求和值乘18的数量 ", "completion": "match(a:company where name = '谷歌')-[e:company_employee_person]->(b:person)-[e2:person_buy_software]->(c:software) return COUNT(SUM(c.id) * 18)"}
{"prompt": "使用这个图:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex software ( id int ID, name varchar, lang varchar, stars int, openSource boolean, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge company_employee_person ( srcId int FROM company SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_creates_software ( srcId int FROM company SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge software_uses_software ( srcId int FROM software SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_belong_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_buy_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_commits_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我查找名为Kafka的,id不是81,开源不是false的相关者,返回这些相关者的开源,和边的权重,目标点id", "completion": "match(a where a.name='Kafka')-[e:relation]->(b where b.id <> 81 and b.openSource <> false) return b.openSource,e.weight, e.targetId"}
{"prompt": "用这个schema:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex software ( id int ID, name varchar, lang varchar, stars int, openSource boolean, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge company_employee_person ( srcId int FROM company SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_creates_software ( srcId int FROM company SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge software_uses_software ( srcId int FROM software SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_belong_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_buy_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_commits_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ));给出person张轩knows的person节点buy的software", "completion": "match(a:person where a.name = '张轩')-[e:person_knows_person]->(b:person)-[e2:person_buy_software]->(c:software) return c"}
{"prompt": "使用这个图:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex software ( id int ID, name varchar, lang varchar, stars int, openSource boolean, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge company_employee_person ( srcId int FROM company SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_creates_software ( srcId int FROM company SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge software_uses_software ( srcId int FROM software SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_belong_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_buy_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_commits_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我查找全部和person点有提交关系的软件节点,且边满足条件源点id的求和值小于126.22,目标软件节点满足条件语言等于c", "completion": "match(a:person)-[e:person_commits_software where SUM(e.srcId) < 126.22]->(b:software where b.lang = 'c') return b"}
{"prompt": "用如下schema的图:CREATE GRAPH g ( Vertex film ( id int ID, name varchar, category varchar, value int ), Vertex cinema ( id int ID, name varchar, address varchar, size int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex comment ( id int ID, name varchar, createTime bigint, wordCount int ), Vertex tag ( id int ID, name varchar, value int ), Edge person_likes_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean ), Edge cinema_releases_film ( srcId int FROM cinema SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_watch_film ( srcId int FROM person SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge film_has_tag ( srcId int FROM film SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_creates_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge comment_belong_film ( srcId int FROM comment SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ));找出从person何若涵出发,经过类型为person_likes_comment的边,走1跳到达的评论点", "completion": "match(a:person where a.name='何若涵')-[e:person_likes_comment]->{1,1}(b:comment) return b"}
{"prompt": "给定图的schema如下:CREATE GRAPH g ( Vertex film ( id int ID, name varchar, category varchar, value int ), Vertex cinema ( id int ID, name varchar, address varchar, size int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex comment ( id int ID, name varchar, createTime bigint, wordCount int ), Vertex tag ( id int ID, name varchar, value int ), Edge person_likes_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean ), Edge cinema_releases_film ( srcId int FROM cinema SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_watch_film ( srcId int FROM person SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge film_has_tag ( srcId int FROM film SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_creates_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge comment_belong_film ( srcId int FROM comment SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ));查询和film变形金刚有关的comment,称为X,再查询和这个X有关联的其他tag,以及和X有关联的cinema", "completion": "match(a:film where a.name = '变形金刚')-[e]-(b:comment), (b:comment)-[e2]-(c:tag),(b:comment)-[e3]-(d:cinema) return a, b, c, d"}
{"prompt": "使用这个图:CREATE GRAPH g ( Vertex film ( id int ID, name varchar, category varchar, value int ), Vertex cinema ( id int ID, name varchar, address varchar, size int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex comment ( id int ID, name varchar, createTime bigint, wordCount int ), Vertex tag ( id int ID, name varchar, value int ), Edge person_likes_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean ), Edge cinema_releases_film ( srcId int FROM cinema SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_watch_film ( srcId int FROM person SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge film_has_tag ( srcId int FROM film SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_creates_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge comment_belong_film ( srcId int FROM comment SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ));查找全部tag以id,name,value分组的name, 根据name降序排序", "completion": "match(a:tag) return a.name group by a.id, a.name, a.value order by a.name desc"}
{"prompt": "给定图的schema如下:CREATE GRAPH g ( Vertex film ( id int ID, name varchar, category varchar, value int ), Vertex cinema ( id int ID, name varchar, address varchar, size int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex comment ( id int ID, name varchar, createTime bigint, wordCount int ), Vertex tag ( id int ID, name varchar, value int ), Edge person_likes_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean ), Edge cinema_releases_film ( srcId int FROM cinema SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_watch_film ( srcId int FROM person SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge film_has_tag ( srcId int FROM film SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_creates_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge comment_belong_film ( srcId int FROM comment SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我找出以creates关系关联了comment Comment_343的person", "completion": "match(a:comment where a.name='Comment_343')<-[e:person_creates_comment]-(b:person) return b"}
{"prompt": "给定图的schema如下:CREATE GRAPH g ( Vertex book ( id int ID, name varchar, id int ID, name varchar, category varchar, price int, wordCount int, createTime bigint ), Vertex publisher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex reader ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex author ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge author_write_book ( srcId int FROM author SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge publisher_publish_book ( srcId int FROM publisher SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge book_refers_book ( srcId int FROM book SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge reader_likes_book ( srcId int FROM reader SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge author_knows_author ( srcId int FROM author SOURCE ID, targetId int FROM author DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我查找与名为孤城和白夜行的点共同knows的,标签为book的节点", "completion": "match(a where a.name = '孤城')-[e:knows]->(b:book)<-[e2:knows]-(c where c.name = '白夜行') return b"}
{"prompt": "给定图的schema如下:CREATE GRAPH g ( Vertex book ( id int ID, name varchar, id int ID, name varchar, category varchar, price int, wordCount int, createTime bigint ), Vertex publisher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex reader ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex author ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge author_write_book ( srcId int FROM author SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge publisher_publish_book ( srcId int FROM publisher SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge book_refers_book ( srcId int FROM book SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge reader_likes_book ( srcId int FROM reader SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge author_knows_author ( srcId int FROM author SOURCE ID, targetId int FROM author DESTINATION ID, weight double, f0 int, f1 boolean ));查询标签为书的全部点,并根据id从大到小排列", "completion": "match(a:book) return a order by a.id desc"}
{"prompt": "给定图的schema如下:CREATE GRAPH g ( Vertex book ( id int ID, name varchar, id int ID, name varchar, category varchar, price int, wordCount int, createTime bigint ), Vertex publisher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex reader ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex author ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge author_write_book ( srcId int FROM author SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge publisher_publish_book ( srcId int FROM publisher SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge book_refers_book ( srcId int FROM book SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge reader_likes_book ( srcId int FROM reader SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge author_knows_author ( srcId int FROM author SOURCE ID, targetId int FROM author DESTINATION ID, weight double, f0 int, f1 boolean ));帮我查询20个id小于等于4的书,根据创建时间升序排列", "completion": "match(a:book where a.id <= 4) return a order by a.createTime asc limit 20"}
{"prompt": "使用这个图:CREATE GRAPH g ( Vertex book ( id int ID, name varchar, id int ID, name varchar, category varchar, price int, wordCount int, createTime bigint ), Vertex publisher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex reader ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex author ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge author_write_book ( srcId int FROM author SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge publisher_publish_book ( srcId int FROM publisher SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge book_refers_book ( srcId int FROM book SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge reader_likes_book ( srcId int FROM reader SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge author_knows_author ( srcId int FROM author SOURCE ID, targetId int FROM author DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我查找和编辑周建国有关的读者,称为X,再请帮我查找和这个X有关联的其他编辑,以及和X有关联的作家", "completion": "match(a:publisher where a.name = '周建国')-[e]-(b:reader), (b:reader)-[e2]-(c:publisher),(b:reader)-[e3]-(d:author) return a, b, c, d"}
{"prompt": "用如下schema的图:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex country ( id int ID, name varchar, area int, peopleNumber int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Vertex city ( id int ID, name varchar, area int, peopleNumber int, value int ), Edge country_contain_city ( srcId int FROM country SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_belong_country ( srcId int FROM city SOURCE ID, targetId int FROM country DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_cooperate_university ( srcId int FROM company SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_university ( srcId int FROM city SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_belong_city ( srcId int FROM university SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_belong_city ( srcId int FROM company SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_cooperate_company ( srcId int FROM university SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_company ( srcId int FROM city SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我查找大学中国科技大学的全部标签等于伙伴的边,并根据目标点id从大到小排列,返回76个", "completion": "match(a:university where a.name = '中国科技大学')-[e:partner]->(b) return b order by e.targetId desc limit 76"}
{"prompt": "用如下schema的图:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex country ( id int ID, name varchar, area int, peopleNumber int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Vertex city ( id int ID, name varchar, area int, peopleNumber int, value int ), Edge country_contain_city ( srcId int FROM country SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_belong_country ( srcId int FROM city SOURCE ID, targetId int FROM country DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_cooperate_university ( srcId int FROM company SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_university ( srcId int FROM city SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_belong_city ( srcId int FROM university SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_belong_city ( srcId int FROM company SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_cooperate_company ( srcId int FROM university SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_company ( srcId int FROM city SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ));计算所有country的id加3的求和值", "completion": "match(a:country) return SUM(a.id + 3)"}
{"prompt": "用这个schema:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex country ( id int ID, name varchar, area int, peopleNumber int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Vertex city ( id int ID, name varchar, area int, peopleNumber int, value int ), Edge country_contain_city ( srcId int FROM country SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_belong_country ( srcId int FROM city SOURCE ID, targetId int FROM country DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_cooperate_university ( srcId int FROM company SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_university ( srcId int FROM city SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_belong_city ( srcId int FROM university SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_belong_city ( srcId int FROM company SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_cooperate_company ( srcId int FROM university SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_company ( srcId int FROM city SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我找出city武汉的所有类型是partner的边,并根据weight降序排列,返回54个", "completion": "match(a:city where a.name = '武汉')-[e:partner]->(b) return b order by e.weight desc limit 54"}
{"prompt": "使用这个图:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex country ( id int ID, name varchar, area int, peopleNumber int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Vertex city ( id int ID, name varchar, area int, peopleNumber int, value int ), Edge country_contain_city ( srcId int FROM country SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_belong_country ( srcId int FROM city SOURCE ID, targetId int FROM country DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_cooperate_university ( srcId int FROM company SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_university ( srcId int FROM city SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_belong_city ( srcId int FROM university SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_belong_city ( srcId int FROM company SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_cooperate_company ( srcId int FROM university SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_company ( srcId int FROM city SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ));给出全部和名为巴黎的城市有伙伴关系,或有伙伴的伙伴关系的公司", "completion": "match(a:city where n.name=巴黎)-[e:partner]->{1,2}(b:company) return b"}
{"prompt": "用如下schema的图:CREATE GRAPH g ( Vertex seller ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex buyer ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex orders ( id int ID, name varchar, price double, value int ), Vertex goods ( id int ID, name varchar, category varchar, price double, sellerNumber double, value int ), Edge orders_contain_goods ( srcId int FROM orders SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_cancel_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge seller_has_goods ( srcId int FROM seller SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_look_goods ( srcId int FROM buyer SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_creates_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge buyer_consult_seller ( srcId int FROM buyer SOURCE ID, targetId int FROM seller DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));查询名为周宏和孙轩的,标签等于buyer的点公共的partner节点的名单", "completion": "match(a:buyer where a.name='周宏')-[e:partner]->(b)<-[e2:partner]-(c:buyer where c.name='孙轩') return b.name"}
{"prompt": "使用这个图:CREATE GRAPH g ( Vertex seller ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex buyer ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex orders ( id int ID, name varchar, price double, value int ), Vertex goods ( id int ID, name varchar, category varchar, price double, sellerNumber double, value int ), Edge orders_contain_goods ( srcId int FROM orders SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_cancel_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge seller_has_goods ( srcId int FROM seller SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_look_goods ( srcId int FROM buyer SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_creates_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge buyer_consult_seller ( srcId int FROM buyer SOURCE ID, targetId int FROM seller DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));查询名为陈强的点creates的全部orders,并对这些点的name进行求和", "completion": "match(a where a.name='陈强')-[e:buyer_creates_orders]->(b:orders) return SUM(b.name)"}
{"prompt": "用如下schema的图:CREATE GRAPH g ( Vertex seller ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex buyer ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex orders ( id int ID, name varchar, price double, value int ), Vertex goods ( id int ID, name varchar, category varchar, price double, sellerNumber double, value int ), Edge orders_contain_goods ( srcId int FROM orders SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_cancel_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge seller_has_goods ( srcId int FROM seller SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_look_goods ( srcId int FROM buyer SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_creates_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge buyer_consult_seller ( srcId int FROM buyer SOURCE ID, targetId int FROM seller DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));返回源点类型是卖家,目标点类型是商品,类型是seller_has_goods的边", "completion": "match(a:seller)-[e:seller_has_goods]->(b:goods) return e"}
{"prompt": "用这个schema:CREATE GRAPH g ( Vertex seller ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex buyer ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex orders ( id int ID, name varchar, price double, value int ), Vertex goods ( id int ID, name varchar, category varchar, price double, sellerNumber double, value int ), Edge orders_contain_goods ( srcId int FROM orders SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_cancel_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge seller_has_goods ( srcId int FROM seller SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_look_goods ( srcId int FROM buyer SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_creates_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge buyer_consult_seller ( srcId int FROM buyer SOURCE ID, targetId int FROM seller DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));帮我查询与卖家徐雪有seller_has_goods关系的1跳以内的环", "completion": "match(a:seller where name = '徐雪')-[e:seller_has_goods]->{0,0}(b)->(a) return a.id, b.id as b_id"}
{"prompt": "使用这个图:CREATE GRAPH g ( Vertex account ( id int ID, name varchar, createTime bigint, lastLoginTime bigint, isBlock boolean, value int ), Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex loan ( id int ID, amount double, weight int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_own_account ( srcId int FROM person SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean ), Edge loan_deposit_account ( srcId int FROM loan SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge company_apply_loan ( srcId int FROM company SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge account_transfer_account ( srcId int FROM account SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_apply_loan ( srcId int FROM person SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_invest_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_repay_loan ( srcId int FROM account SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));给出被person李思琪拥有的账号", "completion": "match(a:account)<-[e:person_own_account]-(b:person where b.name='李思琪') return a, b"}
{"prompt": "给定图的schema如下:CREATE GRAPH g ( Vertex account ( id int ID, name varchar, createTime bigint, lastLoginTime bigint, isBlock boolean, value int ), Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex loan ( id int ID, amount double, weight int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_own_account ( srcId int FROM person SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean ), Edge loan_deposit_account ( srcId int FROM loan SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge company_apply_loan ( srcId int FROM company SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge account_transfer_account ( srcId int FROM account SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_apply_loan ( srcId int FROM person SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_invest_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_repay_loan ( srcId int FROM account SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));找出公司的3度以内的环", "completion": "match(a:company)->{0,2}(b)->(a) return a.id, b.id as b_id"}
{"prompt": "用如下schema的图:CREATE GRAPH g ( Vertex account ( id int ID, name varchar, createTime bigint, lastLoginTime bigint, isBlock boolean, value int ), Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex loan ( id int ID, amount double, weight int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_own_account ( srcId int FROM person SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean ), Edge loan_deposit_account ( srcId int FROM loan SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge company_apply_loan ( srcId int FROM company SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge account_transfer_account ( srcId int FROM account SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_apply_loan ( srcId int FROM person SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_invest_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_repay_loan ( srcId int FROM account SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));返回标签为loan的全部点,并根据id降序排列", "completion": "match(a:loan) return a order by a.id desc"}
{"prompt": "用如下schema的图:CREATE GRAPH g ( Vertex account ( id int ID, name varchar, createTime bigint, lastLoginTime bigint, isBlock boolean, value int ), Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex loan ( id int ID, amount double, weight int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_own_account ( srcId int FROM person SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean ), Edge loan_deposit_account ( srcId int FROM loan SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge company_apply_loan ( srcId int FROM company SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge account_transfer_account ( srcId int FROM account SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_apply_loan ( srcId int FROM person SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_invest_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_repay_loan ( srcId int FROM account SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));找出类型为company的点,并根据id升序排列", "completion": "match(a:company) return a order by a.id asc"}
{"prompt": "使用这个图:CREATE GRAPH g ( Vertex doctor ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex department ( id int ID, name varchar, address varchar, weight int ), Vertex patient ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex medicine ( id int ID, name varchar, price int, category varchar, weight int ), Edge doctor_creates_prescription ( srcId int FROM doctor SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge patient_accept_prescription ( srcId int FROM patient SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_diagnose_patient ( srcId int FROM doctor SOURCE ID, targetId int FROM patient DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge prescription_contain_medicine ( srcId int FROM prescription SOURCE ID, targetId int FROM medicine DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_doctor ( srcId int FROM department SOURCE ID, targetId int FROM doctor DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_belong_department ( srcId int FROM doctor SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ));查找全部名为外科的点拥有的医生", "completion": "match(a where a.name='外科')-[e:department_has_doctor]->(b:doctor) return b"}
{"prompt": "给定图的schema如下:CREATE GRAPH g ( Vertex doctor ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex department ( id int ID, name varchar, address varchar, weight int ), Vertex patient ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex medicine ( id int ID, name varchar, price int, category varchar, weight int ), Edge doctor_creates_prescription ( srcId int FROM doctor SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge patient_accept_prescription ( srcId int FROM patient SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_diagnose_patient ( srcId int FROM doctor SOURCE ID, targetId int FROM patient DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge prescription_contain_medicine ( srcId int FROM prescription SOURCE ID, targetId int FROM medicine DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_doctor ( srcId int FROM department SOURCE ID, targetId int FROM doctor DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_belong_department ( srcId int FROM doctor SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ));帮我查询17个部门内科和耳鼻喉科,共同的相关者", "completion": "match(a:department where a.name='内科')-[e:relation]->(b)<-[e2:relation]-(c:department where c.name='耳鼻喉科') return b limit 17"}
{"prompt": "用这个schema:CREATE GRAPH g ( Vertex doctor ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex department ( id int ID, name varchar, address varchar, weight int ), Vertex patient ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex medicine ( id int ID, name varchar, price int, category varchar, weight int ), Edge doctor_creates_prescription ( srcId int FROM doctor SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge patient_accept_prescription ( srcId int FROM patient SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_diagnose_patient ( srcId int FROM doctor SOURCE ID, targetId int FROM patient DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge prescription_contain_medicine ( srcId int FROM prescription SOURCE ID, targetId int FROM medicine DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_doctor ( srcId int FROM department SOURCE ID, targetId int FROM doctor DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_belong_department ( srcId int FROM doctor SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ));查询id小于等于28,名字不等于眼科且权重在16到885之间的节点", "completion": "match(a where a.id <= 28 and a.name <> '眼科' and (a.weight BETWEEN 16 AND 885)) return a"}
{"prompt": "用如下schema的图:CREATE GRAPH g ( Vertex doctor ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex department ( id int ID, name varchar, address varchar, weight int ), Vertex patient ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex medicine ( id int ID, name varchar, price int, category varchar, weight int ), Edge doctor_creates_prescription ( srcId int FROM doctor SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge patient_accept_prescription ( srcId int FROM patient SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_diagnose_patient ( srcId int FROM doctor SOURCE ID, targetId int FROM patient DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge prescription_contain_medicine ( srcId int FROM prescription SOURCE ID, targetId int FROM medicine DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_doctor ( srcId int FROM department SOURCE ID, targetId int FROM doctor DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_belong_department ( srcId int FROM doctor SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我找出部门拥有的医生,返回其源点的权重对667取余的个数,以及目标点的id除37的值", "completion": "match(a:department)-[e:department_has_doctor]->(b:doctor) return COUNT(a.weight % 667), b.id / 37"}
{"prompt": "给定图的schema如下:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_pay_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_likes_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));找出以喜欢关系关联了person周月的person", "completion": "match(a:person where a.name='周月')<-[e:person_likes_person]-(b:person) return b"}
{"prompt": "使用这个图:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_pay_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_likes_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));查找159个person陈若涵和张建国,共同的伙伴", "completion": "match(a:person where a.name='陈若涵')-[e:partner]->(b)<-[e2:partner]-(c:person where c.name='张建国') return b limit 159"}
{"prompt": "使用这个图:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_pay_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_likes_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));返回全部和名为杜国强的person有朋友关系,或有朋友的朋友关系的person", "completion": "match(a:person where n.name=杜国强)-[e:friend]->{1,2}(b:person) return b"}
{"prompt": "用如下schema的图:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_pay_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_likes_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));查找person赵轩的朋友的朋友的相关者", "completion": "match(a:person where a.name='赵轩')-[e:friend]->(b)-[e2:friend]->(c)-[e3:relation]->(d) return d"}
{"prompt": "使用这个图:CREATE GRAPH g ( Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge repository_has_user ( srcId int FROM repository SOURCE ID, targetId int FROM user DESTINATION ID, weight double, f0 int, f1 boolean ), Edge issue_belong_repository ( srcId int FROM issue SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_creates_issue ( srcId int FROM user SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_creates_issue ( srcId int FROM user SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_likes_repository ( srcId int FROM user SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ), Edge repository_has_issue ( srcId int FROM repository SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean ), Edge repository_has_issue ( srcId int FROM repository SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean ), Edge issue_belong_repository ( srcId int FROM issue SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ));计算所有处方的权重除441对331取余的值", "completion": "match(a:prescription) return a.weight / 441 % 331"}
{"prompt": "用如下schema的图:CREATE GRAPH g ( Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge repository_has_user ( srcId int FROM repository SOURCE ID, targetId int FROM user DESTINATION ID, weight double, f0 int, f1 boolean ), Edge issue_belong_repository ( srcId int FROM issue SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_creates_issue ( srcId int FROM user SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_creates_issue ( srcId int FROM user SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_likes_repository ( srcId int FROM user SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ), Edge repository_has_issue ( srcId int FROM repository SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean ), Edge repository_has_issue ( srcId int FROM repository SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean ), Edge issue_belong_repository ( srcId int FROM issue SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ));找出用户赵建国的所有标签为伙伴的边,并根据f0升序排列,返回69个", "completion": "match(a:user where a.name = '赵建国')-[e:partner]->(b) return b order by e.f0 asc limit 69"}
{"prompt": "用这个schema:CREATE GRAPH g ( Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge repository_has_user ( srcId int FROM repository SOURCE ID, targetId int FROM user DESTINATION ID, weight double, f0 int, f1 boolean ), Edge issue_belong_repository ( srcId int FROM issue SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_creates_issue ( srcId int FROM user SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_creates_issue ( srcId int FROM user SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_likes_repository ( srcId int FROM user SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ), Edge repository_has_issue ( srcId int FROM repository SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean ), Edge repository_has_issue ( srcId int FROM repository SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean ), Edge issue_belong_repository ( srcId int FROM issue SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ));帮我查询user的三角的环,边类型是user_likes_repository, 并返回这些点的id", "completion": "match(a:user)-[e:user_likes_repository]->(b)-[e2:user_likes_repository]-(c)->(a) return a,b.id as b_id,c.id as c_id"}
{"prompt": "用如下schema的图:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_lover_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_colleague_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_family_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_parent_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_friend_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我找出全部person以height,name,gender分组的salary, 根据salary从大到小排序", "completion": "match(a:person) return a.salary group by a.height, a.name, a.gender order by a.salary desc"}
{"prompt": "给定图的schema如下:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_lover_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_colleague_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_family_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_parent_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_friend_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));给出全部person以性别分组的薪资, 根据薪资降序排序", "completion": "match(a:person) return a.salary group by a.gender order by a.salary desc"}
{"prompt": "用这个schema:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_lover_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_colleague_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_family_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_parent_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_friend_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));给出所有id为164的person关联的person,和以认识关系关联了这些person的其他person", "completion": "match(a:person where a.id = '164')-[e]-(b:person)<-[e2:knows]-(c:person) return b,c"}
{"prompt": "给定图的schema如下:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_lover_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_colleague_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_family_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_parent_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_friend_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我找出和person孙轩有关的person,称为X,再请帮我找出和这个X有关联的其他person,以及和X有关联的person", "completion": "match(a:person where a.name = '孙轩')-[e]-(b:person), (b:person)-[e2]-(c:person),(b:person)-[e3]-(d:person) return a, b, c, d"}
{"prompt": "使用这个图:CREATE GRAPH g ( Vertex forum ( id int ID, name varchar, peopleNumber int, createTime bigint, value int ), Vertex post ( id int ID, name varchar, lang varchar, createTime bigint, wordCount int, value int ), Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex tag ( id int ID, name varchar, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge forum_contain_post ( srcId int FROM forum SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_likes_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge post_has_tag ( srcId int FROM post SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge forum_contain_person ( srcId int FROM forum SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_publish_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));返回26个名为Post_438的点拥有的标签为标签的节点,且其名字等于喜剧,价值不为空", "completion": "match(a where a.name='Post_438')-[e:post_has_tag]->(b:tag where b.name = '喜剧' and (b.value is not null)) return b limit 26"}
{"prompt": "给定图的schema如下:CREATE GRAPH g ( Vertex forum ( id int ID, name varchar, peopleNumber int, createTime bigint, value int ), Vertex post ( id int ID, name varchar, lang varchar, createTime bigint, wordCount int, value int ), Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex tag ( id int ID, name varchar, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge forum_contain_post ( srcId int FROM forum SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_likes_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge post_has_tag ( srcId int FROM post SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge forum_contain_person ( srcId int FROM forum SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_publish_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));给出论坛天涯论坛包含的person,被其他论坛包含的数量", "completion": "match(a:forum where a.name='天涯论坛')-[e:forum_contain_person]->(b:person)<-[e2:forum_contain_person]-(c:forum) return COUNT(c)"}
{"prompt": "用如下schema的图:CREATE GRAPH g ( Vertex forum ( id int ID, name varchar, peopleNumber int, createTime bigint, value int ), Vertex post ( id int ID, name varchar, lang varchar, createTime bigint, wordCount int, value int ), Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex tag ( id int ID, name varchar, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge forum_contain_post ( srcId int FROM forum SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_likes_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge post_has_tag ( srcId int FROM post SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge forum_contain_person ( srcId int FROM forum SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_publish_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));找出与user赵思思有user_publish_post关系的1跳以内的环", "completion": "match(a:user where name = '赵思思')-[e:user_publish_post]->{0,0}(b)->(a) return a.id, b.id as b_id"}
{"prompt": "给定图的schema如下:CREATE GRAPH g ( Vertex forum ( id int ID, name varchar, peopleNumber int, createTime bigint, value int ), Vertex post ( id int ID, name varchar, lang varchar, createTime bigint, wordCount int, value int ), Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex tag ( id int ID, name varchar, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge forum_contain_post ( srcId int FROM forum SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_likes_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge post_has_tag ( srcId int FROM post SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge forum_contain_person ( srcId int FROM forum SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_publish_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));找出所有和名为百度贴吧的论坛有朋友关系,或有朋友的朋友关系的person", "completion": "match(a:forum where n.name=百度贴吧)-[e:friend]->{1,2}(b:person) return b"}
{"prompt": "给定图的schema如下:CREATE GRAPH g ( Vertex course ( id int ID, name varchar, credit int, courseHour int, value int ), Vertex teacher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex student ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, size int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Edge department_has_teacher ( srcId int FROM department SOURCE ID, targetId int FROM teacher DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_student ( srcId int FROM department SOURCE ID, targetId int FROM student DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_has_department ( srcId int FROM university SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ), Edge teacher_teach_course ( srcId int FROM teacher SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ), Edge student_selects_course ( srcId int FROM student SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ));给出所有id为84的teacher关联的teacher,和以has关系关联了这些teacher的其他department", "completion": "match(a:teacher where a.id = '84')-[e]-(b:teacher)<-[e2:department_has_teacher]-(c:department) return b,c"}
{"prompt": "用如下schema的图:CREATE GRAPH g ( Vertex course ( id int ID, name varchar, credit int, courseHour int, value int ), Vertex teacher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex student ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, size int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Edge department_has_teacher ( srcId int FROM department SOURCE ID, targetId int FROM teacher DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_student ( srcId int FROM department SOURCE ID, targetId int FROM student DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_has_department ( srcId int FROM university SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ), Edge teacher_teach_course ( srcId int FROM teacher SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ), Edge student_selects_course ( srcId int FROM student SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ));给出与university北京大学存在university_has_department关系,且与student赵月存在department_has_student关系的department节点，返回这些department的value,name,及university北京大学的level,及student赵月的age", "completion": "match(a:university where a.name='北京大学')-[e:university_has_department]->(b:department)<-[e2:department_has_student]-(c:student where c.name='赵月') return a.level,b.value, b.name,c.age"}
{"prompt": "使用这个图:CREATE GRAPH g ( Vertex course ( id int ID, name varchar, credit int, courseHour int, value int ), Vertex teacher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex student ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, size int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Edge department_has_teacher ( srcId int FROM department SOURCE ID, targetId int FROM teacher DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_student ( srcId int FROM department SOURCE ID, targetId int FROM student DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_has_department ( srcId int FROM university SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ), Edge teacher_teach_course ( srcId int FROM teacher SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ), Edge student_selects_course ( srcId int FROM student SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ));查询和department有关联的teacher节点,并根据其gender分组,返回gender,以及salary的最大值对4574取余对96取余的值", "completion": "match(a:department)-[e:department_has_teacher]-(b:teacher) return b.gender, MAX(b.salary) % 4574 % 96 group by b.gender"}
{"prompt": "给定图的schema如下:CREATE GRAPH g ( Vertex course ( id int ID, name varchar, credit int, courseHour int, value int ), Vertex teacher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex student ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, size int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Edge department_has_teacher ( srcId int FROM department SOURCE ID, targetId int FROM teacher DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_student ( srcId int FROM department SOURCE ID, targetId int FROM student DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_has_department ( srcId int FROM university SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ), Edge teacher_teach_course ( srcId int FROM teacher SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ), Edge student_selects_course ( srcId int FROM student SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ));帮我查询和department土木学院有关的teacher,再帮我查询和土木学院department_has_teacher的其他teacher,返回它们", "completion": "match(a:department where a.name = '土木学院')-[e]-(b:teacher), (a:department)-[e2:department_has_teacher]->(c:teacher) return a, b, c"}
{"prompt": "使用这个图:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex software ( id int ID, name varchar, lang varchar, stars int, openSource boolean, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge company_employee_person ( srcId int FROM company SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_creates_software ( srcId int FROM company SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge software_uses_software ( srcId int FROM software SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_belong_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_buy_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_commits_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下9个查询:1: 请帮我查找和person有关联的software节点,并根据其openSource分组,返回openSource,以及stars减421的和;2: 请帮我找出全部名为Redis的,开源不等于false,名字等于Zookeeper的朋友,返回这些朋友的星数,和边的f1,目标点id,f0;3: 请帮我查找和软件Redis有关的person,称为X,再请帮我查找和这个X有关联的其他公司,以及和X有关联的公司;4: 请帮我查找与person周强有关,且与软件Flink有关系的person节点;5: 查询和软件有关联的软件节点,并根据其星数,开源分组,返回星数,开源,以及id加85的个数;6: 帮我查询165个id大于等于9或价值为空,且价值大于212的软件,根据id从大到小排列;7: 请帮我找出被software Hadoop uses的software;8: 请帮我查找192个与Calcite和Redis都存在关系的公司节点;9: 给出id为124的person关联的person,和以雇佣关系关联了这些person的其他公司;", "completion": "查询语句为:1: match(a:person)-[e:person_commits_software]-(b:software) return b.openSource, SUM(b.stars - 421) group by b.openSource;2: match(a where a.name='Redis')-[e:friend]->(b where b.openSource <> false and b.name = 'Zookeeper') return b.stars,e.f1, e.targetId, e.f0;3: match(a:software where a.name = 'Redis')-[e]-(b:person), (b:person)-[e2]-(c:company),(b:person)-[e3]-(d:company) return a, b, c, d;4: match(a:person where a.name='周强')-[e:person_knows_person]-(b:person)-[e2:person_buy_software]-(c:software where c.name='Flink') return b;5: match(a:software)-[e:software_uses_software]-(b:software) return b.stars, b.openSource, COUNT(b.id + 85) group by b.stars, b.openSource;6: match(a:software where (a.id >= 9 or (a.value is null)) and a.value > 212) return a order by a.id desc limit 165;7: match(a:software)<-[e:software_uses_software]-(b:software where b.name='Hadoop') return a, b;8: match(a where a.name='Calcite')-[e]->(b:company)<-[e2]-(c where c.name='Redis') return b limit 192;9: match(a:person where a.id = '124')-[e]-(b:person)<-[e2:company_employee_person]-(c:company) return b,c;"}
{"prompt": "使用这个图:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex software ( id int ID, name varchar, lang varchar, stars int, openSource boolean, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge company_employee_person ( srcId int FROM company SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_creates_software ( srcId int FROM company SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge software_uses_software ( srcId int FROM software SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_belong_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_buy_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_commits_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下9个查询:1: 查询148个名为杜伟的点认识的类型为person的节点,且节点年龄大于等于47且年龄小于等于54;2: 给出与名为陈月和杜伟的点共同knows的,标签等于person的节点;3: 请帮我查找所有公司以价值分组的id, 根据id升序排序;4: 查找43个name是腾讯的company,根据peopleNumber降序排列;5: 查询类型为software的所有点,并根据lang降序排列;6: 查找和person有关联的person节点,并根据其薪资分组,返回薪资,以及薪资加薪资的值;7: 请帮我找出源点id为67或性别不是famale或年龄不是50,边类型是person_belong_company,且源点id小于146的边,返回这些边的权重加122.91的平均值;8: 给出类型是person,名为杜建国的点,返回这些点的age;9: 帮我查询前34个label为person_buy_software的边;", "completion": "查询语句为:1: match(a where a.name='杜伟')-[e:person_knows_person]->(b:person where b.age >= 47 and b.age <= 54) return b limit 148;2: match(a where a.name = '陈月')-[e:person_knows_person]->(b:person)<-[e2:person_knows_person]-(c where c.name = '杜伟') return b;3: match(a:company) return a.id group by a.value order by a.id asc;4: match(a:company where a.name = '腾讯') return a order by a.peopleNumber desc limit 43;5: match(a:software) return a order by a.lang desc;6: match(a:person)-[e:person_knows_person]-(b:person) return b.salary, b.salary + b.salary group by b.salary;7: match(a where a.id = 67 or a.gender <> 'famale' or a.age <> 50)-[e:person_belong_company where e.srcId < 146]->(b) return AVG(e.weight + 122.91);8: match(a:person where a.name = '杜建国') return a.age;9: match(a)-[e:person_buy_software]->(b) return e limit 34;"}
{"prompt": "给定图的schema如下:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex software ( id int ID, name varchar, lang varchar, stars int, openSource boolean, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge company_employee_person ( srcId int FROM company SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_creates_software ( srcId int FROM company SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge software_uses_software ( srcId int FROM software SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_belong_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_buy_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_commits_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下4个查询:1: 返回全部公司以名字,人数分组的id, 根据id从小到大排序;2: 请帮我查找从person赵国强出发,经过label为person_belong_company的边,走3到5度到达的company点;3: 给出与person张思琪有关系的company, 返回和这些company有关联的person的,age除age加180的最大值;4: 找出全部和company腾讯之间有company_creates_software关系的software;", "completion": "查询语句为:1: match(a:company) return a.id group by a.name, a.peopleNumber order by a.id asc;2: match(a:person where a.name='赵国强')-[e:person_belong_company]->{3,5}(b:company) return b;3: match(a:person where a.name= '张思琪')-[e]-(b:company)-[e2]-(c:person) return MAX(c.age / c.age + 180);4: match(a:company where a.name='腾讯')-[e:company_creates_software]->(b:software) return b;"}
{"prompt": "给定图的schema如下:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex software ( id int ID, name varchar, lang varchar, stars int, openSource boolean, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge company_employee_person ( srcId int FROM company SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_creates_software ( srcId int FROM company SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge software_uses_software ( srcId int FROM software SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_belong_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_buy_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_commits_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下5个查询:1: 请帮我查找id为45的点的年龄;2: 查询和公司蚂蚁集团有1到4跳关系的公司;3: 返回所有与公司谷歌有关系的公司的名字;4: 返回所有与公司蚂蚁集团有关系的person的性别;5: 请帮我找出和公司华为有关的公司,再请帮我找出和华为company_employee_person的其他person,返回它们;", "completion": "查询语句为:1: match(a where a.id = '45') return a.age;2: match(a:company where a.name='蚂蚁集团')-[e]->{1,4}(b:company) return b;3: match(a:company where a.name='谷歌')-[e]-(b:company) return b.name;4: match(a:company where a.name='蚂蚁集团')-[e]-(b:person) return b.gender;5: match(a:company where a.name = '华为')-[e]-(b:company), (a:company)-[e2:company_employee_person]->(c:person) return a, b, c;"}
{"prompt": "使用这个图:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex software ( id int ID, name varchar, lang varchar, stars int, openSource boolean, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge company_employee_person ( srcId int FROM company SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_creates_software ( srcId int FROM company SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge software_uses_software ( srcId int FROM software SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_belong_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_buy_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_commits_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ));生成7个查询语句:1: 请帮我找出公司腾讯 雇佣的person,返回person 购买的软件的价值加632的值 ;2: 帮我查询person张强commits的software,被其他company creates的数量;3: 找出以buy关系关联了software Geaflow的person;4: 请帮我找出以提交关系关联了软件Mysql的person;5: 请帮我查找以提交关系关联了软件Mysql的person;6: 给出label为公司的点,返回108个;7: 返回软件以星数分组的id, 根据id从大到小排序;", "completion": "查询语句为:1: match(a:company where name = '腾讯')-[e:company_employee_person]->(b:person)-[e2:person_buy_software]->(c:software) return c.value + 632;2: match(a:person where a.name='张强')-[e:person_commits_software]->(b:software)<-[e2:company_creates_software]-(c:company) return COUNT(c);3: match(a:software where a.name='Geaflow')<-[e:person_buy_software]-(b:person) return b;4: match(a:software where a.name='Mysql')<-[e:person_commits_software]-(b:person) return b;5: match(a:software where a.name='Mysql')<-[e:person_commits_software]-(b:person) return b;6: match(a:company) return a limit 108;7: match(a:software) return a.id group by a.stars order by a.id desc;"}
{"prompt": "给定图的schema如下:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex software ( id int ID, name varchar, lang varchar, stars int, openSource boolean, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge company_employee_person ( srcId int FROM company SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_creates_software ( srcId int FROM company SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge software_uses_software ( srcId int FROM software SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_belong_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_buy_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_commits_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ));生成6个查询语句:1: 请帮我找出和software SprintBoot有关的person,再请帮我找出和 SprintBoot software_uses_software的其他software,返回它们;2: 帮我查询177个与杜建国和马思思都存在关系的软件节点;3: 帮我查询person马强的所有类型是relation的边,并根据weight降序排列,返回31个;4: 给出和person吴国强有关的person,再给出和吴国强person_commits_software的其他software,返回它们;5: 请帮我找出以创造关系关联了软件Redis的公司;6: 请帮我找出以雇佣关系关联了person黄思思的公司;", "completion": "查询语句为:1: match(a:software where a.name = 'SprintBoot')-[e]-(b:person), (a:software)-[e2:software_uses_software]->(c:software) return a, b, c;2: match(a where a.name='杜建国')-[e]->(b:software)<-[e2]-(c where c.name='马思思') return b limit 177;3: match(a:person where a.name = '马强')-[e:relation]->(b) return b order by e.weight desc limit 31;4: match(a:person where a.name = '吴国强')-[e]-(b:person), (a:person)-[e2:person_commits_software]->(c:software) return a, b, c;5: match(a:software where a.name='Redis')<-[e:company_creates_software]-(b:company) return b;6: match(a:person where a.name='黄思思')<-[e:company_employee_person]-(b:company) return b;"}
{"prompt": "用如下schema的图:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex software ( id int ID, name varchar, lang varchar, stars int, openSource boolean, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge company_employee_person ( srcId int FROM company SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_creates_software ( srcId int FROM company SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge software_uses_software ( srcId int FROM software SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_belong_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_buy_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_commits_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ));生成5个查询语句:1: 找出所有源点类型是person,边类型是person_knows_person,以及满足条件f1等于195或f0是719或权重在143.12到147.28之间的边;2: 返回标签为软件的点;3: 返回和person郑红有关的软件,再返回和郑红person_belong_company的其他公司,返回它们;4: 返回全部id为31的software关联的person,和以employee关系关联了这些person的其他company;5: 查找全部person的partner,或其partner的partner;", "completion": "查询语句为:1: match(a:person)-[e:person_knows_person where e.f1 = 195 or e.f0 = 719 or (e.weight BETWEEN 143.12 AND 147.28)]->(b) return e;2: match(a:software) return a;3: match(a:person where a.name = '郑红')-[e]-(b:software), (a:person)-[e2:person_belong_company]->(c:company) return a, b, c;4: match(a:software where a.id = '31')-[e]-(b:person)<-[e2:company_employee_person]-(c:company) return b,c;5: match(a:person)-[e:partner]->{1,2}(b) return b;"}
{"prompt": "使用这个图:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex software ( id int ID, name varchar, lang varchar, stars int, openSource boolean, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge company_employee_person ( srcId int FROM company SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_creates_software ( srcId int FROM company SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge software_uses_software ( srcId int FROM software SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_belong_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_buy_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_commits_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ));生成4个查询语句:1: 查找全部名为马思思的,名字是杜轩或薪资小于等于5610的朋友,返回这些朋友的年龄,和边的权重;2: 查询前18个满足条件name不等于Calcite的software;3: 返回全部与company Bilibili有关系的software的name;4: 找出person徐宏 属于的公司,返回公司 雇佣的person的id减54的值 ;", "completion": "查询语句为:1: match(a where a.name='马思思')-[e:friend]->(b where b.name = '杜轩' or b.salary <= 5610) return b.age,e.weight;2: match(a:software where a.name <> 'Calcite') return a limit 18;3: match(a:company where a.name='Bilibili')-[e]-(b:software) return b.name;4: match(a:person where name = '徐宏')-[e:person_belong_company]->(b:company)-[e2:company_employee_person]->(c:person) return c.id - 54;"}
{"prompt": "使用这个图:CREATE GRAPH g ( Vertex film ( id int ID, name varchar, category varchar, value int ), Vertex cinema ( id int ID, name varchar, address varchar, size int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex comment ( id int ID, name varchar, createTime bigint, wordCount int ), Vertex tag ( id int ID, name varchar, value int ), Edge person_likes_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean ), Edge cinema_releases_film ( srcId int FROM cinema SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_watch_film ( srcId int FROM person SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge film_has_tag ( srcId int FROM film SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_creates_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge comment_belong_film ( srcId int FROM comment SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下9个查询:1: 查找与person杜红有person_watch_film关系的1度的环;2: 查找所有源点大小在290到540之间,目标点类别等于喜剧,名字不是功夫,类别不等于科幻,且标签等于cinema_releases_film的边;3: 帮我查询前133个满足条件value不是85,id大于等于7且id在18到41之间的film;4: 查询comment Comment_461 belong的film,返回film has的tag的id对51取余的值 ;5: 返回所有和名为Comment_277的评论有相关者关系,或有相关者的相关者关系的电影;6: 请帮我找出类型为comment_belong_film,且f0对600取余的求和值小于等于131或f0为606或f1是false的边;7: 返回名为孙雪的点的,名字等于建国大业或类别等于历史的相关者,返回这些相关者的id,和边的源点id,时间戳;8: 查找person陈建聪创造的评论,被其他person创造的数量;9: 请帮我查找和person有关联的comment节点,并根据其createTime分组,返回createTime,以及wordCount除wordCount的值;", "completion": "查询语句为:1: match(a:person where name = '杜红')-[e:person_watch_film]->{0,0}(b)->(a) return a.id, b.id as b_id;2: match(a where (a.size BETWEEN 290 AND 540))-[e:cinema_releases_film]->(b where b.category = '喜剧' and b.name <> '功夫' and b.category <> '科幻') return e;3: match(a:film where a.value <> 85 and a.id >= 7 and (a.id BETWEEN 18 AND 41)) return a limit 133;4: match(a:comment where name = 'Comment_461')-[e:comment_belong_film]->(b:film)-[e2:film_has_tag]->(c:tag) return c.id % 51;5: match(a:comment where n.name=Comment_277)-[e:relation]->{1,2}(b:film) return b;6: match(a)-[e:comment_belong_film where SUM(e.f0 % 600) <= 131 or e.f0 = 606 or e.f1 = false]->(b) return e;7: match(a where a.name='孙雪')-[e:relation]->(b where b.name = '建国大业' or b.category = '历史') return b.id,e.srcId, e.timeStamp;8: match(a:person where a.name='陈建聪')-[e:person_creates_comment]->(b:comment)<-[e2:person_creates_comment]-(c:person) return COUNT(c);9: match(a:person)-[e:person_creates_comment]-(b:comment) return b.createTime, b.wordCount / b.wordCount group by b.createTime;"}
{"prompt": "给定图的schema如下:CREATE GRAPH g ( Vertex film ( id int ID, name varchar, category varchar, value int ), Vertex cinema ( id int ID, name varchar, address varchar, size int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex comment ( id int ID, name varchar, createTime bigint, wordCount int ), Vertex tag ( id int ID, name varchar, value int ), Edge person_likes_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean ), Edge cinema_releases_film ( srcId int FROM cinema SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_watch_film ( srcId int FROM person SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge film_has_tag ( srcId int FROM film SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_creates_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge comment_belong_film ( srcId int FROM comment SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下5个查询:1: 查找address不等于C栋的节点;2: 请帮我找出全部源点标签为电影,边标签为film_has_tag的边,返回这些边的源点id乘80乘182.98的平均值,和目标点id对目标点id取余的个数;3: 找出和名为变形金刚的film有partner关系,或有partner的partner关系的tag;4: 给出所有person的朋友,或其朋友的朋友;5: 找出film绿巨人的全部friend,的targetId除83的值;", "completion": "查询语句为:1: match(a where a.address <> 'C栋') return a;2: match(a:film)-[e:film_has_tag]->(b) return AVG(e.srcId * 80 * 182.98), COUNT(e.targetId % e.targetId);3: match(a:film where n.name=变形金刚)-[e:partner]->{1,2}(b:tag) return b;4: match(a:person)-[e:friend]->{1,2}(b) return b;5: match(a:film where a.name= '绿巨人')-[e:friend]->(b) return e.targetId / 83;"}
{"prompt": "用如下schema的图:CREATE GRAPH g ( Vertex film ( id int ID, name varchar, category varchar, value int ), Vertex cinema ( id int ID, name varchar, address varchar, size int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex comment ( id int ID, name varchar, createTime bigint, wordCount int ), Vertex tag ( id int ID, name varchar, value int ), Edge person_likes_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean ), Edge cinema_releases_film ( srcId int FROM cinema SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_watch_film ( srcId int FROM person SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge film_has_tag ( srcId int FROM film SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_creates_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge comment_belong_film ( srcId int FROM comment SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下5个查询:1: 返回43个名字是古代,名字等于科幻,价值为空的标签,根据价值降序排列;2: 查询与名为Comment_211和Comment_145的点共同属于的,label为电影的节点;3: 请帮我找出被电影泰坦尼克号拥有的标签;4: 帮我查询被电影院大众影院上映的电影;5: 帮我查询名为Comment_400的comment;", "completion": "查询语句为:1: match(a:tag where a.name = '古代' and a.name = '科幻' and (a.value is null)) return a order by a.value desc limit 43;2: match(a where a.name = 'Comment_211')-[e:comment_belong_film]->(b:film)<-[e2:comment_belong_film]-(c where c.name = 'Comment_145') return b;3: match(a:tag)<-[e:film_has_tag]-(b:film where b.name='泰坦尼克号') return a, b;4: match(a:film)<-[e:cinema_releases_film]-(b:cinema where b.name='大众影院') return a, b;5: match(a:comment where a.name = 'Comment_400') return a;"}
{"prompt": "使用这个图:CREATE GRAPH g ( Vertex film ( id int ID, name varchar, category varchar, value int ), Vertex cinema ( id int ID, name varchar, address varchar, size int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex comment ( id int ID, name varchar, createTime bigint, wordCount int ), Vertex tag ( id int ID, name varchar, value int ), Edge person_likes_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean ), Edge cinema_releases_film ( srcId int FROM cinema SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_watch_film ( srcId int FROM person SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge film_has_tag ( srcId int FROM film SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_creates_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge comment_belong_film ( srcId int FROM comment SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下4个查询:1: 找出标签等于标签的全部点,并根据名字升序排列;2: 帮我查询和person吴强有person_likes_comment关系的评论,以及和评论Comment_384有comment_belong_film关系的电影,将它们都返回;3: 查询源点label为电影院,边label为cinema_releases_film,且f1不等于48的边;4: 查询和film有关联的tag节点,并根据其name分组,返回name,以及id除id的值;", "completion": "查询语句为:1: match(a:tag) return a order by a.name asc;2: match(a:person where a.name = '吴强')-[e:person_likes_comment]->(b:comment),(c:comment where c.name = 'Comment_384')-[e2:comment_belong_film]->(d:film)return a, b, c, d;3: match(a:cinema)-[e:cinema_releases_film where e.f1 <> 48]->(b) return e;4: match(a:film)-[e:film_has_tag]-(b:tag) return b.name, b.id / b.id group by b.name;"}
{"prompt": "给定图的schema如下:CREATE GRAPH g ( Vertex film ( id int ID, name varchar, category varchar, value int ), Vertex cinema ( id int ID, name varchar, address varchar, size int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex comment ( id int ID, name varchar, createTime bigint, wordCount int ), Vertex tag ( id int ID, name varchar, value int ), Edge person_likes_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean ), Edge cinema_releases_film ( srcId int FROM cinema SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_watch_film ( srcId int FROM person SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge film_has_tag ( srcId int FROM film SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_creates_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge comment_belong_film ( srcId int FROM comment SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ));生成5个查询语句:1: 查询源点标签等于film,目标点标签等于tag,标签等于film_has_tag的边;2: 请帮我查找全部和标签科幻有3跳或4跳关系的评论;3: 给出与名为UME和大众影院的点共同releases的,标签为film的节点;4: 给出cinema好视影院的标签为partner的边,并根据srcId从大到小排列,返回53个;5: 找出电影我不是药神的类型为相关者的边,并根据f1降序排列,返回198个;", "completion": "查询语句为:1: match(a:film)-[e:film_has_tag]->(b:tag) return e;2: match(a:tag where a.name='科幻')-[e]->{3,4}(b:comment) return b;3: match(a where a.name = 'UME')-[e:cinema_releases_film]->(b:film)<-[e2:cinema_releases_film]-(c where c.name = '大众影院') return b;4: match(a:cinema where a.name = '好视影院')-[e:partner]->(b) return b order by e.srcId desc limit 53;5: match(a:film where a.name = '我不是药神')-[e:relation]->(b) return b order by e.f1 desc limit 198;"}
{"prompt": "用这个schema:CREATE GRAPH g ( Vertex film ( id int ID, name varchar, category varchar, value int ), Vertex cinema ( id int ID, name varchar, address varchar, size int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex comment ( id int ID, name varchar, createTime bigint, wordCount int ), Vertex tag ( id int ID, name varchar, value int ), Edge person_likes_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean ), Edge cinema_releases_film ( srcId int FROM cinema SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_watch_film ( srcId int FROM person SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge film_has_tag ( srcId int FROM film SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_creates_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge comment_belong_film ( srcId int FROM comment SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ));生成9个查询语句:1: 帮我查询和film有关联的tag节点,并根据其name,value分组,返回name,value,以及id的最大值减96的数量;2: 请帮我找出和cinema人人影城有cinema_releases_film关系的film,再请帮我找出以cinema_releases_film关系关联了人人影城的film;3: 返回person creates的comment,返回其源点的age加21的最大值,以及目标点的wordCount除536加459的求和值;4: 请帮我找出全部film以name,value分组的name, 根据name从小到大排序;5: 请帮我查找全部和评论Comment_230有3到6跳关系的评论;6: 返回前64个salary不为空或age小于17或age大于151的person;7: 找出电影院以大小,id分组的名字, 根据名字升序排序;8: 查找全部源点label为cinema,边label为cinema_releases_film的边,返回这些边的srcId除20乘124的最小值,和weight除129.40的和;9: 查找全部与cinema有关系的tag节点,且tag节点的value小于689,并返回这些点的value除826的最大值,以及id的和乘id的值;", "completion": "查询语句为:1: match(a:film)-[e:film_has_tag]-(b:tag) return b.name, b.value, COUNT(MAX(b.id) - 96) group by b.name, b.value;2: match(a:cinema where a.name = '人人影城')-[e:cinema_releases_film]->(b:film),(a:cinema where a.name = '人人影城')<-[e2:cinema_releases_film]-(c:film)return a, b, c;3: match(a:person)-[e:person_creates_comment]->(b:comment) return MAX(a.age + 21), SUM(b.wordCount / 536 + 459);4: match(a:film) return a.name group by a.name, a.value order by a.name asc;5: match(a:comment where a.name='Comment_230')-[e]->{3,6}(b:comment) return b;6: match(a:person where (a.salary is not null) or a.age < 17 or a.age > 151) return a limit 64;7: match(a:cinema) return a.name group by a.size, a.id order by a.name asc;8: match(a:cinema)-[e:cinema_releases_film]->(b) return MIN(e.srcId / 20 * 124), SUM(e.weight / 129.40);9: match(a:cinema)-[e]->(b:tag where b.value < 689) return MAX(b.value / 826), SUM(b.id) * b.id;"}
{"prompt": "用如下schema的图:CREATE GRAPH g ( Vertex film ( id int ID, name varchar, category varchar, value int ), Vertex cinema ( id int ID, name varchar, address varchar, size int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex comment ( id int ID, name varchar, createTime bigint, wordCount int ), Vertex tag ( id int ID, name varchar, value int ), Edge person_likes_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean ), Edge cinema_releases_film ( srcId int FROM cinema SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_watch_film ( srcId int FROM person SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge film_has_tag ( srcId int FROM film SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_creates_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge comment_belong_film ( srcId int FROM comment SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ));生成7个查询语句:1: 请帮我查找与comment Comment_103和Comment_337都存在comment_belong_film关系的点;2: 给出类型为评论的所有点,并根据名字从小到大排列;3: 请帮我找出和评论有关联的电影节点,并根据其类别,价值分组,返回类别,价值,以及id对id取余的求和值;4: 请帮我查找全部和person何思琪之间有person_creates_comment关系的comment;5: 请帮我查找所有名为横店影院的点releases的film;6: 请帮我查找评论Comment_246 属于的电影,返回电影 拥有的标签的价值对898取余的值 ;7: 查找名为黄思琪的点喜欢的全部评论,并对这些点的创建时间进行求和;", "completion": "查询语句为:1: match(a:comment where a.name='Comment_103')-[e:comment_belong_film]->(b)<-[e2:comment_belong_film]-(c:comment where c.name='Comment_337') return b;2: match(a:comment) return a order by a.name asc;3: match(a:comment)-[e:comment_belong_film]-(b:film) return b.category, b.value, SUM(b.id % b.id) group by b.category, b.value;4: match(a:person where a.name='何思琪')-[e:person_creates_comment]->(b:comment) return b;5: match(a where a.name='横店影院')-[e:cinema_releases_film]->(b:film) return b;6: match(a:comment where name = 'Comment_246')-[e:comment_belong_film]->(b:film)-[e2:film_has_tag]->(c:tag) return c.value % 898;7: match(a where a.name='黄思琪')-[e:person_likes_comment]->(b:comment) return SUM(b.createTime);"}
{"prompt": "给定图的schema如下:CREATE GRAPH g ( Vertex book ( id int ID, name varchar, id int ID, name varchar, category varchar, price int, wordCount int, createTime bigint ), Vertex publisher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex reader ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex author ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge author_write_book ( srcId int FROM author SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge publisher_publish_book ( srcId int FROM publisher SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge book_refers_book ( srcId int FROM book SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge reader_likes_book ( srcId int FROM reader SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge author_knows_author ( srcId int FROM author SOURCE ID, targetId int FROM author DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下6个查询:1: 查找书呐喊关联的书,被其他编辑发布的数量;2: 查询和读者吴伟有关系的作家节点,返回这些点的性别;3: 返回与名为张轩和周红的点共同喜欢的,类型为书的节点;4: 查找所有和读者Amily之间有reader_likes_book关系的书;5: 返回所有源点label为读者,边label为reader_likes_book,且源点id不为空或f1等于true的边;6: 找出和book罪与罚有book_refers_book关系的book,再找出以book_refers_book关系关联了罪与罚的book;", "completion": "查询语句为:1: match(a:book where a.name='呐喊')-[e:relates]->(b:book)<-[e2:publisher_publish_book]-(c:publisher) return COUNT(c);2: match(a:reader where a.name='吴伟')-[e]-(b:author) return b.gender;3: match(a where a.name = '张轩')-[e:reader_likes_book]->(b:book)<-[e2:reader_likes_book]-(c where c.name = '周红') return b;4: match(a:reader where a.name='Amily')-[e:reader_likes_book]->(b:book) return b;5: match(a:reader)-[e:reader_likes_book where (e.srcId is not null) or e.f1 = true]->(b) return e;6: match(a:book where a.name = '罪与罚')-[e:book_refers_book]->(b:book),(a:book where a.name = '罪与罚')<-[e2:book_refers_book]-(c:book)return a, b, c;"}
{"prompt": "用这个schema:CREATE GRAPH g ( Vertex book ( id int ID, name varchar, id int ID, name varchar, category varchar, price int, wordCount int, createTime bigint ), Vertex publisher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex reader ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex author ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge author_write_book ( srcId int FROM author SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge publisher_publish_book ( srcId int FROM publisher SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge book_refers_book ( srcId int FROM book SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge reader_likes_book ( srcId int FROM reader SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge author_knows_author ( srcId int FROM author SOURCE ID, targetId int FROM author DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下5个查询:1: 返回和作家有关联的作家节点,并根据其年龄,id分组,返回年龄,id,以及年龄乘57的求和值;2: 请帮我找出全部源点label为作家,边label为author_knows_author的边,返回这些边的源点id对36取余的值,和f0减986的值;3: 查询和publisher有关联的book节点,并根据其price,wordCount,category分组,返回price,wordCount,category,以及id加38的值;4: 请帮我查找所有读者以id,身高,性别分组的名字, 根据名字从小到大排序;5: 找出书以价格,类别,名字分组的名字, 根据名字降序排序;", "completion": "查询语句为:1: match(a:author)-[e:author_knows_author]-(b:author) return b.age, b.id, SUM(b.age * 57) group by b.age, b.id;2: match(a:author)-[e:author_knows_author]->(b) return e.srcId % 36, e.f0 - 986;3: match(a:publisher)-[e:publisher_publish_book]-(b:book) return b.price, b.wordCount, b.category, b.id + 38 group by b.price, b.wordCount, b.category;4: match(a:reader) return a.name group by a.id, a.height, a.gender order by a.name asc;5: match(a:book) return a.name group by a.price, a.category, a.name order by a.name desc;"}
{"prompt": "给定图的schema如下:CREATE GRAPH g ( Vertex book ( id int ID, name varchar, id int ID, name varchar, category varchar, price int, wordCount int, createTime bigint ), Vertex publisher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex reader ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex author ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge author_write_book ( srcId int FROM author SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge publisher_publish_book ( srcId int FROM publisher SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge book_refers_book ( srcId int FROM book SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge reader_likes_book ( srcId int FROM reader SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge author_knows_author ( srcId int FROM author SOURCE ID, targetId int FROM author DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下4个查询:1: 查找源点salary为空或gender是male,且age大于64,边类型为author_write_book,且targetId大于188,timeStamp是2019年02月02日且srcId的求和值乘77除150是171的边,返回这些边的weight的平均值减147.11的值;2: 请帮我查找所有书以创建时间,名字分组的价格, 根据价格从大到小排序;3: 请帮我找出全部编辑的伙伴,或其伙伴的伙伴;4: 返回身高不为空且身高是163的作家认识的作家的名称,以及这些作家 撰写的书的名称;", "completion": "查询语句为:1: match(a where ((a.salary is null) or a.gender = 'male') and a.age > 64)-[e:author_write_book where e.targetId > 188 and e.timeStamp = '2019-02-02' and SUM(e.srcId) * 77 / 150 = 171]->(b) return AVG(e.weight) - 147.11;2: match(a:book) return a.price group by a.createTime, a.name order by a.price desc;3: match(a:publisher)-[e:partner]->{1,2}(b) return b;4: match(a:author where (a.height is not null) and a.height = 163)-[e:author_knows_author]->(b:author)-[e2:author_write_book]->(c:book) return b.name as b_name, c.name as c_name;"}
{"prompt": "用如下schema的图:CREATE GRAPH g ( Vertex book ( id int ID, name varchar, id int ID, name varchar, category varchar, price int, wordCount int, createTime bigint ), Vertex publisher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex reader ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex author ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge author_write_book ( srcId int FROM author SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge publisher_publish_book ( srcId int FROM publisher SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge book_refers_book ( srcId int FROM book SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge reader_likes_book ( srcId int FROM reader SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge author_knows_author ( srcId int FROM author SOURCE ID, targetId int FROM author DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下7个查询:1: 查询从编辑马若涵出发,经过label为publisher_publish_book的边,走1到3跳到达的书点;2: 查找所有源点标签为publisher,边标签为publisher_publish_book,以及f1不是false的边;3: 查询143个age大于等于5或salary不等于2197的reader,根据age升序排列;4: 找出前199个label为book_refers_book的边;5: 查找名为李轩的作家,以及与其有关的读者,并返回李轩的名字和这些读者的薪资;6: 找出book罪与罚的全部refers,的f0乘700的数量;7: 查找7个作家赵红和张思思,共同的相关者;", "completion": "查询语句为:1: match(a:publisher where a.name='马若涵')-[e:publisher_publish_book]->{1,3}(b:book) return b;2: match(a:publisher)-[e:publisher_publish_book where e.f1 <> false]->(b) return e;3: match(a:reader where a.age >= 5 or a.salary <> 2197) return a order by a.age asc limit 143;4: match(a)-[e:book_refers_book]->(b) return e limit 199;5: match(a:author where name = '李轩')-[e]-(b:reader) return a.name, b.salary;6: match(a:book where a.name= '罪与罚')-[e:book_refers_book]->(b) return COUNT(e.f0 * 700);7: match(a:author where a.name='赵红')-[e:relation]->(b)<-[e2:relation]-(c:author where c.name='张思思') return b limit 7;"}
{"prompt": "使用这个图:CREATE GRAPH g ( Vertex book ( id int ID, name varchar, id int ID, name varchar, category varchar, price int, wordCount int, createTime bigint ), Vertex publisher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex reader ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex author ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge author_write_book ( srcId int FROM author SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge publisher_publish_book ( srcId int FROM publisher SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge book_refers_book ( srcId int FROM book SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge reader_likes_book ( srcId int FROM reader SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge author_knows_author ( srcId int FROM author SOURCE ID, targetId int FROM author DESTINATION ID, weight double, f0 int, f1 boolean ));生成9个查询语句:1: 请帮我查找publisher的三角的环,边类型为publisher_publish_book, 并返回这些点的id;2: 给出121个薪资不为空且名字不是徐雪且性别是male的读者,根据薪资升序排列;3: 查询所有编辑以名字,性别分组的年龄, 根据年龄降序排序;4: 查找全部和book罪与罚有3跳关系的book;5: 查找和publisher有关联的book节点,并根据其name,id,createTime分组,返回name,id,createTime,以及price的最大值减82对945取余的最小值;6: 请帮我找出147个与何宏和黄建国都存在关系的作家节点;7: 请帮我找出编辑黄思琪的所有相关者,的weight的最小值对106.55取余的值;8: 给出110个与陈宏和黄科都存在关系的读者节点;9: 帮我查询读者的朋友,或其朋友的朋友;", "completion": "查询语句为:1: match(a:publisher)-[e:publisher_publish_book]->(b)-[e2:publisher_publish_book]-(c)->(a) return a,b.id as b_id,c.id as c_id;2: match(a:reader where (a.salary is not null) and a.name <> '徐雪' and a.gender = 'male') return a order by a.salary asc limit 121;3: match(a:publisher) return a.age group by a.name, a.gender order by a.age desc;4: match(a:book where a.name='罪与罚')-[e]->{3,3}(b:book) return b;5: match(a:publisher)-[e:publisher_publish_book]-(b:book) return b.name, b.id, b.createTime, MIN(MAX(b.price) - 82 % 945) group by b.name, b.id, b.createTime;6: match(a where a.name='何宏')-[e]->(b:author)<-[e2]-(c where c.name='黄建国') return b limit 147;7: match(a:publisher where a.name= '黄思琪')-[e:relation]->(b) return MIN(e.weight) % 106.55;8: match(a where a.name='陈宏')-[e]->(b:reader)<-[e2]-(c where c.name='黄科') return b limit 110;9: match(a:reader)-[e:friend]->{1,2}(b) return b;"}
{"prompt": "用这个schema:CREATE GRAPH g ( Vertex book ( id int ID, name varchar, id int ID, name varchar, category varchar, price int, wordCount int, createTime bigint ), Vertex publisher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex reader ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex author ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge author_write_book ( srcId int FROM author SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge publisher_publish_book ( srcId int FROM publisher SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge book_refers_book ( srcId int FROM book SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge reader_likes_book ( srcId int FROM reader SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge author_knows_author ( srcId int FROM author SOURCE ID, targetId int FROM author DESTINATION ID, weight double, f0 int, f1 boolean ));生成4个查询语句:1: 返回和作家周建聪有3到6跳关系的读者;2: 查询所有和book三体有1到3跳关系的author;3: 帮我查询名为徐建国的作家,以及与其有关的书,并返回徐建国的性别和这些书的id;4: 查询全部id为153的reader关联的book,和以knows关系关联了这些book的其他book;", "completion": "查询语句为:1: match(a:author where a.name='周建聪')-[e]->{3,6}(b:reader) return b;2: match(a:book where a.name='三体')-[e]->{1,3}(b:author) return b;3: match(a:author where name = '徐建国')-[e]-(b:book) return a.gender, b.id;4: match(a:reader where a.id = '153')-[e]-(b:book)<-[e2:knows]-(c:book) return b,c;"}
{"prompt": "给定图的schema如下:CREATE GRAPH g ( Vertex book ( id int ID, name varchar, id int ID, name varchar, category varchar, price int, wordCount int, createTime bigint ), Vertex publisher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex reader ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex author ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge author_write_book ( srcId int FROM author SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge publisher_publish_book ( srcId int FROM publisher SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge book_refers_book ( srcId int FROM book SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge reader_likes_book ( srcId int FROM reader SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge author_knows_author ( srcId int FROM author SOURCE ID, targetId int FROM author DESTINATION ID, weight double, f0 int, f1 boolean ));生成8个查询语句:1: 返回所有读者以年龄分组的年龄, 根据年龄降序排序;2: 请帮我查找全部和名为郑轩的读者有伙伴关系,或有伙伴的伙伴关系的书;3: 帮我查询book以name分组的name, 根据name降序排序;4: 返回源点薪资小于7092,薪资在3569到4289之间,性别是male,边标签为reader_likes_book,且f0为空或目标点id为空或f0除f0是167.26的边,返回这些边的权重减191.03的最小值;5: 返回类型是author,名为徐雪的点,返回这些点的height;6: 请帮我查找author孙若涵 write的book,返回book knows的book的id除64的值 ;7: 给出55个薪资大于等于8802或名字不等于赵红,且名字不等于马月的编辑,根据身高降序排列;8: 返回所有和名为周思琪的author有relation关系,或有relation的relation关系的author;", "completion": "查询语句为:1: match(a:reader) return a.age group by a.age order by a.age desc;2: match(a:reader where n.name=郑轩)-[e:partner]->{1,2}(b:book) return b;3: match(a:book) return a.name group by a.name order by a.name desc;4: match(a where a.salary < 7092 and (a.salary BETWEEN 3569 AND 4289) and a.gender = 'male')-[e:reader_likes_book where (e.f0 is null) or (e.targetId is null) or e.f0 / e.f0 = 167.26]->(b) return MIN(e.weight - 191.03);5: match(a:author where a.name = '徐雪') return a.height;6: match(a:author where name = '孙若涵')-[e:author_write_book]->(b:book)-[e2:knows]->(c:book) return c.id / 64;7: match(a:publisher where (a.salary >= 8802 or a.name <> '赵红') and a.name <> '马月') return a order by a.height desc limit 55;8: match(a:author where n.name=周思琪)-[e:relation]->{1,2}(b:author) return b;"}
{"prompt": "使用这个图:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex country ( id int ID, name varchar, area int, peopleNumber int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Vertex city ( id int ID, name varchar, area int, peopleNumber int, value int ), Edge country_contain_city ( srcId int FROM country SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_belong_country ( srcId int FROM city SOURCE ID, targetId int FROM country DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_cooperate_university ( srcId int FROM company SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_university ( srcId int FROM city SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_belong_city ( srcId int FROM university SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_belong_city ( srcId int FROM company SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_cooperate_company ( srcId int FROM university SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_company ( srcId int FROM city SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下4个查询:1: 查询id为115的点的价值,名字,id;2: 找出和company Bilibili有company_cooperate_university关系的university,再找出以company_cooperate_university关系关联了 Bilibili的university;3: 查找类型是公司的全部点,并根据规格从小到大排列;4: 帮我查询id为184的city关联的company,和以cooperate关系关联了这些company的其他university;", "completion": "查询语句为:1: match(a where a.id = '115') return a.value, a.name, a.id;2: match(a:company where a.name = 'Bilibili')-[e:company_cooperate_university]->(b:university),(a:company where a.name = 'Bilibili')<-[e2:company_cooperate_university]-(c:university)return a, b, c;3: match(a:company) return a order by a.scale asc;4: match(a:city where a.id = '184')-[e]-(b:company)<-[e2:university_cooperate_company]-(c:university) return b,c;"}
{"prompt": "使用这个图:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex country ( id int ID, name varchar, area int, peopleNumber int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Vertex city ( id int ID, name varchar, area int, peopleNumber int, value int ), Edge country_contain_city ( srcId int FROM country SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_belong_country ( srcId int FROM city SOURCE ID, targetId int FROM country DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_cooperate_university ( srcId int FROM company SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_university ( srcId int FROM city SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_belong_city ( srcId int FROM university SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_belong_city ( srcId int FROM company SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_cooperate_company ( srcId int FROM university SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_company ( srcId int FROM city SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下7个查询:1: 找出源点人数是8246或名字的个数小于等于7839或id小于等于75,边label为city_contain_university,且满足条件f0大于等于713且源点id小于等于28,或f0大于等于868的边,返回这些边的源点id除12的最小值;2: 找出label为国家,名为法国的点,返回这些点的价值,人数;3: 请帮我查找前43个名字大于等于876或面积大于91673或价值大于等于62686的国家;4: 查询国家以名字,人数分组的人数, 根据人数从大到小排序;5: 查询和城市有关联的国家节点,并根据其名字分组,返回名字,以及人数减33299的最大值;6: 请帮我查找所有与城市上海有关系的公司的价值;7: 请帮我找出公司微软 属于的城市,返回城市 包含的公司的人数除978对842取余的最小值 ;", "completion": "查询语句为:1: match(a where a.peopleNumber = 8246 or COUNT(a.name) <= 7839 or a.id <= 75)-[e:city_contain_university where (e.f0 >= 713 and e.srcId <= 28) or e.f0 >= 868]->(b) return MIN(e.srcId / 12);2: match(a:country where a.name = '法国') return a.value, a.peopleNumber;3: match(a:country where a.name >= 876 or a.area > 91673 or a.value >= 62686) return a limit 43;4: match(a:country) return a.peopleNumber group by a.name, a.peopleNumber order by a.peopleNumber desc;5: match(a:city)-[e:city_belong_country]-(b:country) return b.name, MAX(b.peopleNumber - 33299) group by b.name;6: match(a:city where a.name='上海')-[e]-(b:company) return b.value;7: match(a:company where name = '微软')-[e:company_belong_city]->(b:city)-[e2:city_contain_company]->(c:company) return MIN(c.peopleNumber / 978 % 842);"}
{"prompt": "用如下schema的图:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex country ( id int ID, name varchar, area int, peopleNumber int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Vertex city ( id int ID, name varchar, area int, peopleNumber int, value int ), Edge country_contain_city ( srcId int FROM country SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_belong_country ( srcId int FROM city SOURCE ID, targetId int FROM country DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_cooperate_university ( srcId int FROM company SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_university ( srcId int FROM city SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_belong_city ( srcId int FROM university SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_belong_city ( srcId int FROM company SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_cooperate_company ( srcId int FROM university SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_company ( srcId int FROM city SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下6个查询:1: 找出与城市巴黎有关系的国家, 返回和这些国家有关联的公司的,价值加705的值;2: 返回与country澳大利亚有country_contain_city关系的1跳的环;3: 请帮我查找类型是公司,名为Bilibili的点,返回这些点的规格,价值,名字;4: 返回与城市重庆和广州都存在city_contain_university关系的点;5: 查找名为俄罗斯的国家,以及与其有关的城市,并返回俄罗斯的id和这些城市的人数;6: 查询31个和标签为company的点有company_cooperate_university关系的university,并且和这些university有university_cooperate_company关系的company;", "completion": "查询语句为:1: match(a:city where a.name= '巴黎')-[e]-(b:country)-[e2]-(c:company) return c.value + 705;2: match(a:country where name = '澳大利亚')-[e:country_contain_city]->{0,0}(b)->(a) return a.id, b.id as b_id;3: match(a:company where a.name = 'Bilibili') return a.scale, a.value, a.name;4: match(a:city where a.name='重庆')-[e:city_contain_university]->(b)<-[e2:city_contain_university]-(c:city where c.name='广州') return b;5: match(a:country where name = '俄罗斯')-[e]-(b:city) return a.id, b.peopleNumber;6: match(a:company)-[e:company_cooperate_university]->(b:university)-[e2:university_cooperate_company]->(c:company) return c limit 31;"}
{"prompt": "用如下schema的图:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex country ( id int ID, name varchar, area int, peopleNumber int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Vertex city ( id int ID, name varchar, area int, peopleNumber int, value int ), Edge country_contain_city ( srcId int FROM country SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_belong_country ( srcId int FROM city SOURCE ID, targetId int FROM country DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_cooperate_university ( srcId int FROM company SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_university ( srcId int FROM city SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_belong_city ( srcId int FROM university SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_belong_city ( srcId int FROM company SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_cooperate_company ( srcId int FROM university SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_company ( srcId int FROM city SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下5个查询:1: 给出和university华中科技大学有university_cooperate_company关系的company,再给出以university_cooperate_company关系关联了华中科技大学的company;2: 给出被城市纽约包含的公司;3: 查找和类型是company的点有company_belong_city关系的city,以及和这些city有city_contain_company关系的company,以及和这些company有company_belong_city关系的city;4: 请帮我查找全部源点类型为国家,边类型为country_contain_city,以及目标点id等于168的边;5: 计算所有公司的value的求和值加124的值;", "completion": "查询语句为:1: match(a:university where a.name = '华中科技大学')-[e:university_cooperate_company]->(b:company),(a:university where a.name = '华中科技大学')<-[e2:university_cooperate_company]-(c:company)return a, b, c;2: match(a:company)<-[e:city_contain_company]-(b:city where b.name='纽约') return a, b;3: match(a:company)-[e:company_belong_city]->(b:city)-[e2:city_contain_company]->(c:company)-[e3:company_belong_city]->(d:city) return d;4: match(a:country)-[e:country_contain_city where e.targetId = 168]->(b) return e;5: match(a:company) return SUM(a.value) + 124;"}
{"prompt": "给定图的schema如下:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex country ( id int ID, name varchar, area int, peopleNumber int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Vertex city ( id int ID, name varchar, area int, peopleNumber int, value int ), Edge country_contain_city ( srcId int FROM country SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_belong_country ( srcId int FROM city SOURCE ID, targetId int FROM country DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_cooperate_university ( srcId int FROM company SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_university ( srcId int FROM city SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_belong_city ( srcId int FROM university SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_belong_city ( srcId int FROM company SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_cooperate_company ( srcId int FROM university SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_company ( srcId int FROM city SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ));生成4个查询语句:1: 给出和公司阿里有关的城市,称为X,再给出和这个X有关联的其他城市,以及和X有关联的公司;2: 给出名为巴黎和东京的,标签为城市的点公共的伙伴节点的名单;3: 请帮我找出与大学浙江大学有university_cooperate_company关系的3跳的环;4: 帮我查询和城市天津有city_belong_country关系的国家,再帮我查询以city_contain_company关系关联了天津的公司;", "completion": "查询语句为:1: match(a:company where a.name = '阿里')-[e]-(b:city), (b:city)-[e2]-(c:city),(b:city)-[e3]-(d:company) return a, b, c, d;2: match(a:city where a.name='巴黎')-[e:partner]->(b)<-[e2:partner]-(c:city where c.name='东京') return b.name;3: match(a:university where name = '浙江大学')-[e:university_cooperate_company]->{2,2}(b)->(a) return a.id, b.id as b_id;4: match(a:city where a.name = '天津')-[e:city_belong_country]->(b:country),(a:city where a.name = '天津')<-[e2:city_contain_company]-(c:company)return a, b, c;"}
{"prompt": "给定图的schema如下:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex country ( id int ID, name varchar, area int, peopleNumber int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Vertex city ( id int ID, name varchar, area int, peopleNumber int, value int ), Edge country_contain_city ( srcId int FROM country SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_belong_country ( srcId int FROM city SOURCE ID, targetId int FROM country DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_cooperate_university ( srcId int FROM company SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_university ( srcId int FROM city SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_belong_city ( srcId int FROM university SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_belong_city ( srcId int FROM company SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_cooperate_company ( srcId int FROM university SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_company ( srcId int FROM city SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ));生成3个查询语句:1: 请帮我找出与company华为和滴滴都存在company_cooperate_university关系的点;2: 请帮我找出城市属于的国家,返回其源点的人数减8891的值,以及目标点的id加99对694取余加57136减27001的值;3: 请帮我查找name是Bilibili或name不等于Bilibili的company cooperate的university的名称,以及这些university belong的city的名称;", "completion": "查询语句为:1: match(a:company where a.name='华为')-[e:company_cooperate_university]->(b)<-[e2:company_cooperate_university]-(c:company where c.name='滴滴') return b;2: match(a:city)-[e:city_belong_country]->(b:country) return a.peopleNumber - 8891, b.id + 99 % 694 + 57136 - 27001;3: match(a:company where a.name = 'Bilibili' or a.name <> 'Bilibili')-[e:company_cooperate_university]->(b:university)-[e2:university_belong_city]->(c:city) return b.name as b_name, c.name as c_name;"}
{"prompt": "用这个schema:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex country ( id int ID, name varchar, area int, peopleNumber int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Vertex city ( id int ID, name varchar, area int, peopleNumber int, value int ), Edge country_contain_city ( srcId int FROM country SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_belong_country ( srcId int FROM city SOURCE ID, targetId int FROM country DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_cooperate_university ( srcId int FROM company SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_university ( srcId int FROM city SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_belong_city ( srcId int FROM university SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_belong_city ( srcId int FROM company SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_cooperate_company ( srcId int FROM university SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_company ( srcId int FROM city SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ));生成9个查询语句:1: 查询和公司阿里有company_cooperate_university关系的大学,以及和公司美团有company_belong_city关系的城市,将它们都返回;2: 查找名为美团的点cooperate的university;3: 帮我查询标签为university_cooperate_company,以及满足条件源点id不为空且目标点id大于等于80,源点id在65到132之间的边;4: 查询所有源点类型为company,边类型为company_belong_city的边,返回这些边的weight除198.74除798除154.13加177减199.90的最大值,和targetId除39的值;5: 请帮我查找全部id为178的country关联的university,和以contain关系关联了这些university的其他city;6: 返回university四川大学 belong的city,返回city contain的university的level减2的求和值 ;7: 查询类型为country_contain_city,并且满足条件源点id小于120,源点id大于等于135且权重等于125.44的边;8: 请帮我查找全部标签为城市的点;9: 帮我查询与城市上海和巴黎都存在city_contain_company关系的点;", "completion": "查询语句为:1: match(a:company where a.name = '阿里')-[e:company_cooperate_university]->(b:university),(c:company where c.name = '美团')-[e2:company_belong_city]->(d:city)return a, b, c, d;2: match(a where a.name='美团')-[e:company_cooperate_university]->(b:university) return b;3: match(a)-[e:university_cooperate_company where (e.srcId is not null) and e.targetId >= 80 and (e.srcId BETWEEN 65 AND 132)]->(b) return e;4: match(a:company)-[e:company_belong_city]->(b) return MAX(e.weight / 198.74 / 798 / 154.13 + 177 - 199.90), e.targetId / 39;5: match(a:country where a.id = '178')-[e]-(b:university)<-[e2:city_contain_university]-(c:city) return b,c;6: match(a:university where name = '四川大学')-[e:university_belong_city]->(b:city)-[e2:city_contain_university]->(c:university) return SUM(c.level - 2);7: match(a)-[e:country_contain_city where e.srcId < 120 and e.srcId >= 135 and e.weight = 125.44]->(b) return e;8: match(a:city) return a;9: match(a:city where a.name='上海')-[e:city_contain_company]->(b)<-[e2:city_contain_company]-(c:city where c.name='巴黎') return b;"}
{"prompt": "用这个schema:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex country ( id int ID, name varchar, area int, peopleNumber int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Vertex city ( id int ID, name varchar, area int, peopleNumber int, value int ), Edge country_contain_city ( srcId int FROM country SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_belong_country ( srcId int FROM city SOURCE ID, targetId int FROM country DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_cooperate_university ( srcId int FROM company SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_university ( srcId int FROM city SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_belong_city ( srcId int FROM university SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_belong_city ( srcId int FROM company SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_cooperate_company ( srcId int FROM university SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_company ( srcId int FROM city SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ));生成8个查询语句:1: 返回university复旦大学的所有类型是partner的边,并根据f1升序排列,返回180个;2: 请帮我找出和大学有关联的城市节点,并根据其id,人数分组,返回id,人数,以及id的最大值对23取余除61509的求和值;3: 返回所有和名为华中科技大学的university有friend关系,或有friend的friend关系的company;4: 返回所有country以area分组的peopleNumber, 根据peopleNumber升序排序;5: 请帮我查找所有与国家日本有关系的国家的名字;6: 帮我查询前144个类型是city_belong_country的边;7: 计算所有公司的人数减886减71的最大值;8: 返回全部源点类型是大学,目标点类型是城市,类型是university_belong_city的边;", "completion": "查询语句为:1: match(a:university where a.name = '复旦大学')-[e:partner]->(b) return b order by e.f1 asc limit 180;2: match(a:university)-[e:university_belong_city]-(b:city) return b.id, b.peopleNumber, SUM(MAX(b.id) % 23 / 61509) group by b.id, b.peopleNumber;3: match(a:university where n.name=华中科技大学)-[e:friend]->{1,2}(b:company) return b;4: match(a:country) return a.peopleNumber group by a.area order by a.peopleNumber asc;5: match(a:country where a.name='日本')-[e]-(b:country) return b.name;6: match(a)-[e:city_belong_country]->(b) return e limit 144;7: match(a:company) return MAX(a.peopleNumber - 886 - 71);8: match(a:university)-[e:university_belong_city]->(b:city) return e;"}
{"prompt": "用这个schema:CREATE GRAPH g ( Vertex seller ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex buyer ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex orders ( id int ID, name varchar, price double, value int ), Vertex goods ( id int ID, name varchar, category varchar, price double, sellerNumber double, value int ), Edge orders_contain_goods ( srcId int FROM orders SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_cancel_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge seller_has_goods ( srcId int FROM seller SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_look_goods ( srcId int FROM buyer SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_creates_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge buyer_consult_seller ( srcId int FROM buyer SOURCE ID, targetId int FROM seller DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));执行以下5个查询:1: 请帮我查找名为短袖的商品,以及与其有关的订单,并返回短袖的价值和这些订单的价格;2: 帮我查询buyer consult的seller,返回其源点的salary除3810除45的个数,以及目标点的salary对4055取余的值;3: 请帮我找出源点id不为空或名字不是赵国强,且名字为赵红,边label为buyer_look_goods,且目标点id为空的边,返回这些边的f0除792的值;4: 给出与buyer韩雪存在buyer_creates_orders关系,且与goods鞋子存在orders_contain_goods关系的orders节点，返回这些orders的price,value,及buyer韩雪的id,及goods鞋子的value;5: 查找名为杜雪的,id等于76的partner,返回这些partner的name,和边的targetId,timeStamp;", "completion": "查询语句为:1: match(a:goods where name = '短袖')-[e]-(b:orders) return a.value, b.price;2: match(a:buyer)-[e:buyer_consult_seller]->(b:seller) return COUNT(a.salary / 3810 / 45), b.salary % 4055;3: match(a where ((a.id is not null) or a.name <> '赵国强') and a.name = '赵红')-[e:buyer_look_goods where (e.targetId is null)]->(b) return e.f0 / 792;4: match(a:buyer where a.name='韩雪')-[e:buyer_creates_orders]->(b:orders)<-[e2:orders_contain_goods]-(c:goods where c.name='鞋子') return a.id,b.price, b.value,c.value;5: match(a where a.name='杜雪')-[e:partner]->(b where b.id = 76) return b.name,e.targetId, e.timeStamp;"}
{"prompt": "用这个schema:CREATE GRAPH g ( Vertex seller ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex buyer ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex orders ( id int ID, name varchar, price double, value int ), Vertex goods ( id int ID, name varchar, category varchar, price double, sellerNumber double, value int ), Edge orders_contain_goods ( srcId int FROM orders SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_cancel_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge seller_has_goods ( srcId int FROM seller SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_look_goods ( srcId int FROM buyer SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_creates_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge buyer_consult_seller ( srcId int FROM buyer SOURCE ID, targetId int FROM seller DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));执行以下3个查询:1: 找出189个名为Order_409的点包含的类型为商品的节点,且其类别等于食品且价格不等于2203.71;2: 查询label为订单的点,并根据价格从小到大排列;3: 请帮我查找订单以价格,价值,名字分组的id, 根据id从小到大排序;", "completion": "查询语句为:1: match(a where a.name='Order_409')-[e:orders_contain_goods]->(b:goods where b.category = '食品' and b.price <> 2203.71) return b limit 189;2: match(a:orders) return a order by a.price asc;3: match(a:orders) return a.id group by a.price, a.value, a.name order by a.id asc;"}
{"prompt": "用这个schema:CREATE GRAPH g ( Vertex seller ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex buyer ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex orders ( id int ID, name varchar, price double, value int ), Vertex goods ( id int ID, name varchar, category varchar, price double, sellerNumber double, value int ), Edge orders_contain_goods ( srcId int FROM orders SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_cancel_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge seller_has_goods ( srcId int FROM seller SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_look_goods ( srcId int FROM buyer SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_creates_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge buyer_consult_seller ( srcId int FROM buyer SOURCE ID, targetId int FROM seller DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));执行以下7个查询:1: 请帮我找出前198个满足条件id小于48,价值为空,或价格大于4927.86的订单;2: 请帮我找出102个买家张雪和黄雪,共同的伙伴;3: 请帮我找出所有Order_475的点contain的goods,然后请帮我找出Order_475被creates的buyer,一起返回;4: 请帮我查找名为韩科和张梅的,类型为buyer的点公共的partner节点的名单;5: 给出全部买家以id,年龄分组的身高, 根据身高从大到小排序;6: 请帮我找出buyer郑科的全部friend,的srcId乘175的值;7: 给出全部和商品书有关系的买家节点,返回这些点的id,年龄,性别;", "completion": "查询语句为:1: match(a:orders where (a.id < 48 and (a.value is null)) or a.price > 4927.86) return a limit 198;2: match(a:buyer where a.name='张雪')-[e:partner]->(b)<-[e2:partner]-(c:buyer where c.name='黄雪') return b limit 102;3: match(a where a.name = 'Order_475')-[e:orders_contain_goods]->(b:goods),(a where a.name = 'Order_475')<-[e2:buyer_creates_orders]-(c:buyer) return a, b, c;4: match(a:buyer where a.name='韩科')-[e:partner]->(b)<-[e2:partner]-(c:buyer where c.name='张梅') return b.name;5: match(a:buyer) return a.height group by a.id, a.age order by a.height desc;6: match(a:buyer where a.name= '郑科')-[e:friend]->(b) return e.srcId * 175;7: match(a:goods where a.name='书')-[e]-(b:buyer) return b.id, b.age, b.gender;"}
{"prompt": "使用这个图:CREATE GRAPH g ( Vertex seller ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex buyer ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex orders ( id int ID, name varchar, price double, value int ), Vertex goods ( id int ID, name varchar, category varchar, price double, sellerNumber double, value int ), Edge orders_contain_goods ( srcId int FROM orders SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_cancel_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge seller_has_goods ( srcId int FROM seller SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_look_goods ( srcId int FROM buyer SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_creates_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge buyer_consult_seller ( srcId int FROM buyer SOURCE ID, targetId int FROM seller DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));执行以下9个查询:1: 找出卖家的2度以内的环;2: 返回所有和订单Order_349有关系的买家节点,返回这些点的性别,id;3: 帮我查询以creates关系关联了orders Order_283的buyer;4: 返回orders contain的goods,返回其源点的value除517的值,以及目标点的price的数量乘3065.05乘48的值;5: 查找卖家郑月的朋友,的权重减118.80的数量;6: 返回和buyer有关联的goods节点,并根据其price分组,返回price,以及id对94取余的个数;7: 帮我查询和buyer杜强有buyer_creates_orders关系的orders,再帮我查询以buyer_look_goods关系关联了杜强的goods;8: 找出与买家陈轩有buyer_look_goods关系的1度以内的环;9: 请帮我查找buyer杜思思的partner,的f0加640的值;", "completion": "查询语句为:1: match(a:seller)->{0,1}(b)->(a) return a.id, b.id as b_id;2: match(a:orders where a.name='Order_349')-[e]-(b:buyer) return b.gender, b.id;3: match(a:orders where a.name='Order_283')<-[e:buyer_creates_orders]-(b:buyer) return b;4: match(a:orders)-[e:orders_contain_goods]->(b:goods) return a.value / 517, COUNT(b.price) * 3065.05 * 48;5: match(a:seller where a.name= '郑月')-[e:friend]->(b) return COUNT(e.weight - 118.80);6: match(a:buyer)-[e:buyer_look_goods]-(b:goods) return b.price, COUNT(b.id % 94) group by b.price;7: match(a:buyer where a.name = '杜强')-[e:buyer_creates_orders]->(b:orders),(a:buyer where a.name = '杜强')<-[e2:buyer_look_goods]-(c:goods)return a, b, c;8: match(a:buyer where name = '陈轩')-[e:buyer_look_goods]->{0,0}(b)->(a) return a.id, b.id as b_id;9: match(a:buyer where a.name= '杜思思')-[e:partner]->(b) return e.f0 + 640;"}
{"prompt": "给定图的schema如下:CREATE GRAPH g ( Vertex seller ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex buyer ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex orders ( id int ID, name varchar, price double, value int ), Vertex goods ( id int ID, name varchar, category varchar, price double, sellerNumber double, value int ), Edge orders_contain_goods ( srcId int FROM orders SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_cancel_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge seller_has_goods ( srcId int FROM seller SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_look_goods ( srcId int FROM buyer SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_creates_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge buyer_consult_seller ( srcId int FROM buyer SOURCE ID, targetId int FROM seller DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));生成5个查询语句:1: 找出和订单Order_396有orders_contain_goods关系的商品,再找出以orders_contain_goods关系关联了Order_396的商品;2: 计算所有订单的id的平均值除17的最小值;3: 找出全部与seller陈轩有关系的goods的value;4: 给出全部和buyer点有cancel关系的orders节点,且边满足条件srcId小于等于43,目标orders节点value小于590;5: 给出buyer徐思思look的goods,被其他seller has的数量;", "completion": "查询语句为:1: match(a:orders where a.name = 'Order_396')-[e:orders_contain_goods]->(b:goods),(a:orders where a.name = 'Order_396')<-[e2:orders_contain_goods]-(c:goods)return a, b, c;2: match(a:orders) return MIN(AVG(a.id) / 17);3: match(a:seller where a.name='陈轩')-[e]-(b:goods) return b.value;4: match(a:buyer)-[e:buyer_cancel_orders where e.srcId <= 43]->(b:orders where b.value < 590) return b;5: match(a:buyer where a.name='徐思思')-[e:buyer_look_goods]->(b:goods)<-[e2:seller_has_goods]-(c:seller) return COUNT(c);"}
{"prompt": "用这个schema:CREATE GRAPH g ( Vertex seller ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex buyer ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex orders ( id int ID, name varchar, price double, value int ), Vertex goods ( id int ID, name varchar, category varchar, price double, sellerNumber double, value int ), Edge orders_contain_goods ( srcId int FROM orders SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_cancel_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge seller_has_goods ( srcId int FROM seller SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_look_goods ( srcId int FROM buyer SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_creates_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge buyer_consult_seller ( srcId int FROM buyer SOURCE ID, targetId int FROM seller DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));生成4个查询语句:1: 给出标签为卖家的所有点,并根据薪资从大到小排列;2: 请帮我查找以cancel关系关联了orders Order_496的buyer;3: 查询买家取消的订单,返回其源点的id加77的和,以及目标点的价格对1023.11取余的最小值;4: 查找以contain关系关联了goods手机的orders;", "completion": "查询语句为:1: match(a:seller) return a order by a.salary desc;2: match(a:orders where a.name='Order_496')<-[e:buyer_cancel_orders]-(b:buyer) return b;3: match(a:buyer)-[e:buyer_cancel_orders]->(b:orders) return SUM(a.id + 77), MIN(b.price % 1023.11);4: match(a:goods where a.name='手机')<-[e:orders_contain_goods]-(b:orders) return b;"}
{"prompt": "给定图的schema如下:CREATE GRAPH g ( Vertex seller ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex buyer ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex orders ( id int ID, name varchar, price double, value int ), Vertex goods ( id int ID, name varchar, category varchar, price double, sellerNumber double, value int ), Edge orders_contain_goods ( srcId int FROM orders SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_cancel_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge seller_has_goods ( srcId int FROM seller SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_look_goods ( srcId int FROM buyer SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_creates_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge buyer_consult_seller ( srcId int FROM buyer SOURCE ID, targetId int FROM seller DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));生成3个查询语句:1: 给出和seller杜建国有关的orders,称为X,再给出和这个X有关联的其他goods,以及和X有关联的goods;2: 给出和seller杜国强有seller_has_goods关系的goods,以及和buyer吴红有buyer_consult_seller关系的seller,将它们都返回;3: 请帮我查找与订单Order_302有orders_contain_goods关系的2跳以内的环;", "completion": "查询语句为:1: match(a:seller where a.name = '杜建国')-[e]-(b:orders), (b:orders)-[e2]-(c:goods),(b:orders)-[e3]-(d:goods) return a, b, c, d;2: match(a:seller where a.name = '杜国强')-[e:seller_has_goods]->(b:goods),(c:buyer where c.name = '吴红')-[e2:buyer_consult_seller]->(d:seller)return a, b, c, d;3: match(a:orders where name = 'Order_302')-[e:orders_contain_goods]->{0,1}(b)->(a) return a.id, b.id as b_id;"}
{"prompt": "用这个schema:CREATE GRAPH g ( Vertex seller ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex buyer ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex orders ( id int ID, name varchar, price double, value int ), Vertex goods ( id int ID, name varchar, category varchar, price double, sellerNumber double, value int ), Edge orders_contain_goods ( srcId int FROM orders SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_cancel_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge seller_has_goods ( srcId int FROM seller SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_look_goods ( srcId int FROM buyer SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_creates_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge buyer_consult_seller ( srcId int FROM buyer SOURCE ID, targetId int FROM seller DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));生成7个查询语句:1: 查找13个和类型为buyer的点有buyer_creates_orders关系的orders,且和这些orders有orders_contain_goods关系的goods;2: 请帮我找出所有卖家以身高分组的性别, 根据性别从大到小排序;3: 查找全部源点label为buyer,边label为buyer_look_goods,以及满足条件targetId为空的边;4: 返回类型是buyer的点,并根据age从大到小排列;5: 请帮我查找orders contain的goods,返回其源点的id乘97的个数,以及目标点的sellerNumber减1616.16乘sellerNumber的值;6: 查找买家赵建聪创造的订单,被其他买家创造的数量;7: 给出以has关系关联了goods键盘的seller;", "completion": "查询语句为:1: match(a:buyer)-[e:buyer_creates_orders]->(b:orders)-[e2:orders_contain_goods]->(c:goods) return c limit 13;2: match(a:seller) return a.gender group by a.height order by a.gender desc;3: match(a:buyer)-[e:buyer_look_goods where (e.targetId is null)]->(b) return e;4: match(a:buyer) return a order by a.age desc;5: match(a:orders)-[e:orders_contain_goods]->(b:goods) return COUNT(a.id * 97), (b.sellerNumber - 1616.16) * b.sellerNumber;6: match(a:buyer where a.name='赵建聪')-[e:buyer_creates_orders]->(b:orders)<-[e2:buyer_creates_orders]-(c:buyer) return COUNT(c);7: match(a:goods where a.name='键盘')<-[e:seller_has_goods]-(b:seller) return b;"}
{"prompt": "用如下schema的图:CREATE GRAPH g ( Vertex account ( id int ID, name varchar, createTime bigint, lastLoginTime bigint, isBlock boolean, value int ), Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex loan ( id int ID, amount double, weight int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_own_account ( srcId int FROM person SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean ), Edge loan_deposit_account ( srcId int FROM loan SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge company_apply_loan ( srcId int FROM company SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge account_transfer_account ( srcId int FROM account SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_apply_loan ( srcId int FROM person SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_invest_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_repay_loan ( srcId int FROM account SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));执行以下9个查询:1: 帮我查询前41个createTime等于2027年10月29日,value在46到957之间的account;2: 帮我查询和类型是person的点有person_invest_company关系的公司,且和这些公司有company_apply_loan关系的贷款,且和这些贷款有loan_deposit_account关系的账号;3: 找出label为账号的点,并根据价值从小到大排列;4: 找出和贷款有关联的账号节点,并根据其是否冻结,上次登录时间,名字分组,返回是否冻结,上次登录时间,名字,以及id的最小值乘17的最大值;5: 找出所有源点类型为account,边类型为account_transfer_account,以及targetId不等于62的边;6: 给出person的三角的环,边标签为person_apply_loan, 并返回这些点的id;7: 查询从loan defaultName出发,经过类型为loan_deposit_account的边,走1到3度到达的account点;8: 给出所有源点类型为person,边类型为person_apply_loan的边,返回这些边的权重加131.89的值,和weight的最大值除160.98的数量;9: 查询person的三角的环,边标签等于person_own_account, 并返回这些点的id;", "completion": "查询语句为:1: match(a:account where a.createTime = '2027-10-29' and (a.value BETWEEN 46 AND 957)) return a limit 41;2: match(a:person)-[e:person_invest_company]->(b:company)-[e2:company_apply_loan]->(c:loan)-[e3:loan_deposit_account]->(d:account) return d;3: match(a:account) return a order by a.value asc;4: match(a:loan)-[e:loan_deposit_account]-(b:account) return b.isBlock, b.lastLoginTime, b.name, MAX(MIN(b.id) * 17) group by b.isBlock, b.lastLoginTime, b.name;5: match(a:account)-[e:account_transfer_account where e.targetId <> 62]->(b) return e;6: match(a:person)-[e:person_apply_loan]->(b)-[e2:person_apply_loan]-(c)->(a) return a,b.id as b_id,c.id as c_id;7: match(a:loan where a.name='defaultName')-[e:loan_deposit_account]->{1,3}(b:account) return b;8: match(a:person)-[e:person_apply_loan]->(b) return e.weight + 131.89, COUNT(MAX(e.weight) / 160.98);9: match(a:person)-[e:person_own_account]->(b)-[e2:person_own_account]-(c)->(a) return a,b.id as b_id,c.id as c_id;"}
{"prompt": "使用这个图:CREATE GRAPH g ( Vertex account ( id int ID, name varchar, createTime bigint, lastLoginTime bigint, isBlock boolean, value int ), Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex loan ( id int ID, amount double, weight int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_own_account ( srcId int FROM person SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean ), Edge loan_deposit_account ( srcId int FROM loan SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge company_apply_loan ( srcId int FROM company SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge account_transfer_account ( srcId int FROM account SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_apply_loan ( srcId int FROM person SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_invest_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_repay_loan ( srcId int FROM account SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));执行以下5个查询:1: 请帮我找出与名为defaultName和defaultName1的点共同deposit的,label为account的节点;2: 查询源点类型为person,目标点类型为company,类型为person_invest_company的边;3: 请帮我找出源点上次登录时间不等于2021年01月07日,边label为account_transfer_account,且f1等于true的边,返回这些边的源点id减46的值;4: 给出名为XXD的账号,以及与其有关的贷款,并返回XXD的id和这些贷款的权重;5: 请帮我查找公司的3跳以内的环;", "completion": "查询语句为:1: match(a where a.name = 'defaultName')-[e:loan_deposit_account]->(b:account)<-[e2:loan_deposit_account]-(c where c.name = 'defaultName1') return b;2: match(a:person)-[e:person_invest_company]->(b:company) return e;3: match(a where a.lastLoginTime <> '2021-01-07')-[e:account_transfer_account where e.f1 = true]->(b) return e.srcId - 46;4: match(a:account where name = 'XXD')-[e]-(b:loan) return a.id, b.weight;5: match(a:company)->{0,2}(b)->(a) return a.id, b.id as b_id;"}
{"prompt": "使用这个图:CREATE GRAPH g ( Vertex account ( id int ID, name varchar, createTime bigint, lastLoginTime bigint, isBlock boolean, value int ), Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex loan ( id int ID, amount double, weight int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_own_account ( srcId int FROM person SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean ), Edge loan_deposit_account ( srcId int FROM loan SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge company_apply_loan ( srcId int FROM company SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge account_transfer_account ( srcId int FROM account SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_apply_loan ( srcId int FROM person SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_invest_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_repay_loan ( srcId int FROM account SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));执行以下7个查询:1: 返回24个创建时间不是2024年08月18日或是否冻结是true,且id大于74的账号,根据价值从小到大排列;2: 查找和company蚂蚁集团有关系的person节点,返回这些点的gender;3: 查询名为微软和Bilibili的,标签等于company的点公共的partner节点的名单;4: 查找前109个类型为person_invest_company的边;5: 返回类型是account的所有点,并根据id从大到小排列;6: 请帮我找出account以isBlock,createTime分组的createTime, 根据createTime升序排序;7: 给出与账号Geaflow123有关系的公司, 返回和这些公司有关联的person的,身高加171的最小值;", "completion": "查询语句为:1: match(a:account where (a.createTime <> '2024-08-18' or a.isBlock = true) and a.id > 74) return a order by a.value asc limit 24;2: match(a:company where a.name='蚂蚁集团')-[e]-(b:person) return b.gender;3: match(a:company where a.name='微软')-[e:partner]->(b)<-[e2:partner]-(c:company where c.name='Bilibili') return b.name;4: match(a)-[e:person_invest_company]->(b) return e limit 109;5: match(a:account) return a order by a.id desc;6: match(a:account) return a.createTime group by a.isBlock, a.createTime order by a.createTime asc;7: match(a:account where a.name= 'Geaflow123')-[e]-(b:company)-[e2]-(c:person) return MIN(c.height + 171);"}
{"prompt": "给定图的schema如下:CREATE GRAPH g ( Vertex account ( id int ID, name varchar, createTime bigint, lastLoginTime bigint, isBlock boolean, value int ), Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex loan ( id int ID, amount double, weight int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_own_account ( srcId int FROM person SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean ), Edge loan_deposit_account ( srcId int FROM loan SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge company_apply_loan ( srcId int FROM company SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge account_transfer_account ( srcId int FROM account SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_apply_loan ( srcId int FROM person SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_invest_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_repay_loan ( srcId int FROM account SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));执行以下5个查询:1: 请帮我找出名为Geaflow123和XXD的,label为account的点公共的relation节点的名单;2: 请帮我找出满足条件gender等于male且height对176取余小于175,salary乘1113大于等于2100的节点;3: 请帮我找出名为defaultName和defaultName1的,label为loan的点公共的friend节点的名单;4: 找出全部loan的partner,或其partner的partner;5: 请帮我查找源点年龄小于等于90或性别是famale,边类型是person_invest_company,且满足条件时间戳为1997年11月25日的边,返回这些边的目标点id减75乘38的最大值;", "completion": "查询语句为:1: match(a:account where a.name='Geaflow123')-[e:relation]->(b)<-[e2:relation]-(c:account where c.name='XXD') return b.name;2: match(a where a.gender = 'male' and a.height % 176 < 175 and a.salary * 1113 >= 2100) return a;3: match(a:loan where a.name='defaultName')-[e:friend]->(b)<-[e2:friend]-(c:loan where c.name='defaultName1') return b.name;4: match(a:loan)-[e:partner]->{1,2}(b) return b;5: match(a where a.age <= 90 or a.gender = 'famale')-[e:person_invest_company where e.timeStamp = '1997-11-25']->(b) return MAX((e.targetId - 75) * 38);"}
{"prompt": "用这个schema:CREATE GRAPH g ( Vertex account ( id int ID, name varchar, createTime bigint, lastLoginTime bigint, isBlock boolean, value int ), Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex loan ( id int ID, amount double, weight int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_own_account ( srcId int FROM person SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean ), Edge loan_deposit_account ( srcId int FROM loan SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge company_apply_loan ( srcId int FROM company SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge account_transfer_account ( srcId int FROM account SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_apply_loan ( srcId int FROM person SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_invest_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_repay_loan ( srcId int FROM account SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));生成9个查询语句:1: 帮我查询和person有关联的账号节点,并根据其价值,上次登录时间分组,返回价值,上次登录时间,以及id的数量减87乘价值的值;2: 找出名为徐强和郑雪的,标签等于person的点公共的partner节点的名单;3: 查询和贷款defaultName有关系的账号节点,返回这些点的价值,名字,上次登录时间;4: 返回公司Bilibili的所有类型是相关者的边,并根据f0从大到小排列,返回120个;5: 帮我查询与person陈雪有关系的账号, 返回和这些账号有关联的person的,id加85的值;6: 查询所有loan的friend,或其friend的friend;7: 请帮我找出81个名为周月的点申请的标签等于贷款的节点,且节点权重不为空或权重在429到481之间;8: 返回贷款存款的账号,返回其源点的权重加906对1141.78取余的和,以及目标点的id的最小值减9的值;9: 给出账号Geaflow123转账的账号,被其他贷款存款的数量;", "completion": "查询语句为:1: match(a:person)-[e:person_own_account]-(b:account) return b.value, b.lastLoginTime, (COUNT(b.id) - 87) * b.value group by b.value, b.lastLoginTime;2: match(a:person where a.name='徐强')-[e:partner]->(b)<-[e2:partner]-(c:person where c.name='郑雪') return b.name;3: match(a:loan where a.name='defaultName')-[e]-(b:account) return b.value, b.name, b.lastLoginTime;4: match(a:company where a.name = 'Bilibili')-[e:relation]->(b) return b order by e.f0 desc limit 120;5: match(a:person where a.name= '陈雪')-[e]-(b:account)-[e2]-(c:person) return c.id + 85;6: match(a:loan)-[e:friend]->{1,2}(b) return b;7: match(a where a.name='周月')-[e:person_apply_loan]->(b:loan where (b.weight is not null) or (b.weight BETWEEN 429 AND 481)) return b limit 81;8: match(a:loan)-[e:loan_deposit_account]->(b:account) return SUM(a.weight + 906 % 1141.78), MIN(b.id) - 9;9: match(a:account where a.name='Geaflow123')-[e:account_transfer_account]->(b:account)<-[e2:loan_deposit_account]-(c:loan) return COUNT(c);"}
{"prompt": "使用这个图:CREATE GRAPH g ( Vertex account ( id int ID, name varchar, createTime bigint, lastLoginTime bigint, isBlock boolean, value int ), Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex loan ( id int ID, amount double, weight int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_own_account ( srcId int FROM person SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean ), Edge loan_deposit_account ( srcId int FROM loan SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge company_apply_loan ( srcId int FROM company SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge account_transfer_account ( srcId int FROM account SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_apply_loan ( srcId int FROM person SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_invest_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_repay_loan ( srcId int FROM account SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));生成3个查询语句:1: 查询id为79的点的创建时间,价值,id;2: 请帮我查找账号Zeus的伙伴的伙伴的伙伴;3: 返回42个和标签等于account的点有account_transfer_account关系的account,以及和这些account有account_transfer_account关系的account;", "completion": "查询语句为:1: match(a where a.id = '79') return a.createTime, a.value, a.id;2: match(a:account where a.name='Zeus')-[e:partner]->(b)-[e2:partner]->(c)-[e3:partner]->(d) return d;3: match(a:account)-[e:account_transfer_account]->(b:account)-[e2:account_transfer_account]->(c:account) return c limit 42;"}
{"prompt": "用这个schema:CREATE GRAPH g ( Vertex account ( id int ID, name varchar, createTime bigint, lastLoginTime bigint, isBlock boolean, value int ), Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex loan ( id int ID, amount double, weight int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_own_account ( srcId int FROM person SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean ), Edge loan_deposit_account ( srcId int FROM loan SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge company_apply_loan ( srcId int FROM company SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge account_transfer_account ( srcId int FROM account SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_apply_loan ( srcId int FROM person SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_invest_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_repay_loan ( srcId int FROM account SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));生成9个查询语句:1: 查找和公司Bilibili有关的person,再查找和Bilibili company_apply_loan的其他贷款,返回它们;2: 返回person黄若涵的全部label为friend的边,并根据targetId升序排列,返回9个;3: 请帮我找出和person张思思有person_own_account关系的账号,以及和person黄思琪有person_own_account关系的账号,将它们都返回;4: 找出和公司有关联的贷款节点,并根据其id分组,返回id,以及id加69的值;5: 请帮我查找账号BIN还款的贷款,被其他账号还款的数量;6: 给出14个person王伟和徐思思,共同的相关者;7: 查询前22个类型是person_apply_loan的边;8: 查找被person韩强申请的贷款;9: 帮我查询137个age大于75或id不为空的person,根据name升序排列;", "completion": "查询语句为:1: match(a:company where a.name = 'Bilibili')-[e]-(b:person), (a:company)-[e2:company_apply_loan]->(c:loan) return a, b, c;2: match(a:person where a.name = '黄若涵')-[e:friend]->(b) return b order by e.targetId asc limit 9;3: match(a:person where a.name = '张思思')-[e:person_own_account]->(b:account),(c:person where c.name = '黄思琪')-[e2:person_own_account]->(d:account)return a, b, c, d;4: match(a:company)-[e:company_apply_loan]-(b:loan) return b.id, b.id + 69 group by b.id;5: match(a:account where a.name='BIN')-[e:account_repay_loan]->(b:loan)<-[e2:account_repay_loan]-(c:account) return COUNT(c);6: match(a:person where a.name='王伟')-[e:relation]->(b)<-[e2:relation]-(c:person where c.name='徐思思') return b limit 14;7: match(a)-[e:person_apply_loan]->(b) return e limit 22;8: match(a:loan)<-[e:person_apply_loan]-(b:person where b.name='韩强') return a, b;9: match(a:person where a.age > 75 or (a.id is not null)) return a order by a.name asc limit 137;"}
{"prompt": "使用这个图:CREATE GRAPH g ( Vertex account ( id int ID, name varchar, createTime bigint, lastLoginTime bigint, isBlock boolean, value int ), Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex loan ( id int ID, amount double, weight int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_own_account ( srcId int FROM person SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean ), Edge loan_deposit_account ( srcId int FROM loan SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge company_apply_loan ( srcId int FROM company SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge account_transfer_account ( srcId int FROM account SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_apply_loan ( srcId int FROM person SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_invest_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_repay_loan ( srcId int FROM account SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));生成9个查询语句:1: 请帮我查找标签为person的全部点,并根据年龄降序排列;2: 请帮我查找152个规格不是small的公司,根据id升序排列;3: 返回person的partner,或其partner的partner;4: 返回源点类型是account,目标点类型是account,类型是account_transfer_account的边;5: 找出全部贷款的朋友,或其朋友的朋友;6: 请帮我找出从account BIN出发,经过标签等于account_repay_loan的边,走2跳到达的loan点;7: 返回所有id为147的person关联的account,和以transfer关系关联了这些account的其他account;8: 找出全部与贷款defaultName有关系的账号的是否冻结;9: 返回名为华为的,id为空,权重大于等于7404.82的朋友,返回这些朋友的权重,和边的f0;", "completion": "查询语句为:1: match(a:person) return a order by a.age desc;2: match(a:company where a.scale <> 'small') return a order by a.id asc limit 152;3: match(a:person)-[e:partner]->{1,2}(b) return b;4: match(a:account)-[e:account_transfer_account]->(b:account) return e;5: match(a:loan)-[e:friend]->{1,2}(b) return b;6: match(a:account where a.name='BIN')-[e:account_repay_loan]->{2,2}(b:loan) return b;7: match(a:person where a.id = '147')-[e]-(b:account)<-[e2:account_transfer_account]-(c:account) return b,c;8: match(a:loan where a.name='defaultName')-[e]-(b:account) return b.isBlock;9: match(a where a.name='华为')-[e:friend]->(b where (b.id is null) and b.weight >= 7404.82) return b.weight,e.f0;"}
{"prompt": "用如下schema的图:CREATE GRAPH g ( Vertex doctor ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex department ( id int ID, name varchar, address varchar, weight int ), Vertex patient ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex medicine ( id int ID, name varchar, price int, category varchar, weight int ), Edge doctor_creates_prescription ( srcId int FROM doctor SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge patient_accept_prescription ( srcId int FROM patient SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_diagnose_patient ( srcId int FROM doctor SOURCE ID, targetId int FROM patient DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge prescription_contain_medicine ( srcId int FROM prescription SOURCE ID, targetId int FROM medicine DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_doctor ( srcId int FROM department SOURCE ID, targetId int FROM doctor DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_belong_department ( srcId int FROM doctor SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下6个查询:1: 返回和医生韩强有doctor_creates_prescription关系的处方,再返回以doctor_belong_department关系关联了韩强的部门;2: 查找与病人黄建聪和李若涵都存在patient_accept_prescription关系的点;3: 查询名为阿司匹林的medicine,以及与其有关的doctor,并返回阿司匹林的name和这些doctor的salary;4: 给出所有Prescription_241的点contain的medicine,然后给出Prescription_241被creates的doctor,一起返回;5: 查找病人吴梅接受的处方,被其他病人接受的数量;6: 返回所有和医生张月有2到5度关系的医生;", "completion": "查询语句为:1: match(a:doctor where a.name = '韩强')-[e:doctor_creates_prescription]->(b:prescription),(a:doctor where a.name = '韩强')<-[e2:doctor_belong_department]-(c:department)return a, b, c;2: match(a:patient where a.name='黄建聪')-[e:patient_accept_prescription]->(b)<-[e2:patient_accept_prescription]-(c:patient where c.name='李若涵') return b;3: match(a:medicine where name = '阿司匹林')-[e]-(b:doctor) return a.name, b.salary;4: match(a where a.name = 'Prescription_241')-[e:prescription_contain_medicine]->(b:medicine),(a where a.name = 'Prescription_241')<-[e2:doctor_creates_prescription]-(c:doctor) return a, b, c;5: match(a:patient where a.name='吴梅')-[e:patient_accept_prescription]->(b:prescription)<-[e2:patient_accept_prescription]-(c:patient) return COUNT(c);6: match(a:doctor where a.name='张月')-[e]->{2,5}(b:doctor) return b;"}
{"prompt": "给定图的schema如下:CREATE GRAPH g ( Vertex doctor ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex department ( id int ID, name varchar, address varchar, weight int ), Vertex patient ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex medicine ( id int ID, name varchar, price int, category varchar, weight int ), Edge doctor_creates_prescription ( srcId int FROM doctor SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge patient_accept_prescription ( srcId int FROM patient SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_diagnose_patient ( srcId int FROM doctor SOURCE ID, targetId int FROM patient DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge prescription_contain_medicine ( srcId int FROM prescription SOURCE ID, targetId int FROM medicine DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_doctor ( srcId int FROM department SOURCE ID, targetId int FROM doctor DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_belong_department ( srcId int FROM doctor SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下3个查询:1: 请帮我查找id为123的patient有关的doctor的partner, 再请帮我查找和doctor有关系的partner;2: 查找与doctor何建国和马国强都存在doctor_diagnose_patient关系的点;3: 请帮我找出与名为张思思和郑月的点共同诊断的,类型为病人的节点;", "completion": "查询语句为:1: match(a:patient where id = '123')-[e]-(b:doctor)-[e2:partner]->(c), (b:doctor)-[e3:partner]->(d) return a, b, c, d;2: match(a:doctor where a.name='何建国')-[e:doctor_diagnose_patient]->(b)<-[e2:doctor_diagnose_patient]-(c:doctor where c.name='马国强') return b;3: match(a where a.name = '张思思')-[e:doctor_diagnose_patient]->(b:patient)<-[e2:doctor_diagnose_patient]-(c where c.name = '郑月') return b;"}
{"prompt": "用这个schema:CREATE GRAPH g ( Vertex doctor ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex department ( id int ID, name varchar, address varchar, weight int ), Vertex patient ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex medicine ( id int ID, name varchar, price int, category varchar, weight int ), Edge doctor_creates_prescription ( srcId int FROM doctor SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge patient_accept_prescription ( srcId int FROM patient SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_diagnose_patient ( srcId int FROM doctor SOURCE ID, targetId int FROM patient DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge prescription_contain_medicine ( srcId int FROM prescription SOURCE ID, targetId int FROM medicine DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_doctor ( srcId int FROM department SOURCE ID, targetId int FROM doctor DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_belong_department ( srcId int FROM doctor SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下4个查询:1: 请帮我找出被医生周伟创造的处方;2: 请帮我找出医生吴梅创造的处方,被其他病人接受的数量;3: 查询部门的伙伴,或其伙伴的伙伴;4: 帮我查询所有放射科的点拥有的医生,然后帮我查询放射科被属于的医生,一起返回;", "completion": "查询语句为:1: match(a:prescription)<-[e:doctor_creates_prescription]-(b:doctor where b.name='周伟') return a, b;2: match(a:doctor where a.name='吴梅')-[e:doctor_creates_prescription]->(b:prescription)<-[e2:patient_accept_prescription]-(c:patient) return COUNT(c);3: match(a:department)-[e:partner]->{1,2}(b) return b;4: match(a where a.name = '放射科')-[e:department_has_doctor]->(b:doctor),(a where a.name = '放射科')<-[e2:doctor_belong_department]-(c:doctor) return a, b, c;"}
{"prompt": "使用这个图:CREATE GRAPH g ( Vertex doctor ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex department ( id int ID, name varchar, address varchar, weight int ), Vertex patient ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex medicine ( id int ID, name varchar, price int, category varchar, weight int ), Edge doctor_creates_prescription ( srcId int FROM doctor SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge patient_accept_prescription ( srcId int FROM patient SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_diagnose_patient ( srcId int FROM doctor SOURCE ID, targetId int FROM patient DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge prescription_contain_medicine ( srcId int FROM prescription SOURCE ID, targetId int FROM medicine DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_doctor ( srcId int FROM department SOURCE ID, targetId int FROM doctor DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_belong_department ( srcId int FROM doctor SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下3个查询:1: 请帮我找出以belong关系关联了department眼科的doctor;2: 查找医生赵宏创造的处方,被其他医生创造的数量;3: 查询和病人点有接受关系的处方节点,且边满足条件源点id是99,目标处方节点权重等于178;", "completion": "查询语句为:1: match(a:department where a.name='眼科')<-[e:doctor_belong_department]-(b:doctor) return b;2: match(a:doctor where a.name='赵宏')-[e:doctor_creates_prescription]->(b:prescription)<-[e2:doctor_creates_prescription]-(c:doctor) return COUNT(c);3: match(a:patient)-[e:patient_accept_prescription where e.srcId = 99]->(b:prescription where b.weight = 178) return b;"}
{"prompt": "用如下schema的图:CREATE GRAPH g ( Vertex doctor ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex department ( id int ID, name varchar, address varchar, weight int ), Vertex patient ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex medicine ( id int ID, name varchar, price int, category varchar, weight int ), Edge doctor_creates_prescription ( srcId int FROM doctor SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge patient_accept_prescription ( srcId int FROM patient SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_diagnose_patient ( srcId int FROM doctor SOURCE ID, targetId int FROM patient DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge prescription_contain_medicine ( srcId int FROM prescription SOURCE ID, targetId int FROM medicine DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_doctor ( srcId int FROM department SOURCE ID, targetId int FROM doctor DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_belong_department ( srcId int FROM doctor SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ));生成5个查询语句:1: 请帮我查找70个与韩国强和何思思都存在关系的医生节点;2: 查询所有名为Prescription_321的,weight在21到77之间或id不等于43的friend,返回这些friend的category,和边的targetId,f1;3: 找出department急诊部的所有标签为friend的边,并根据srcId降序排列,返回95个;4: 查找名为王科和吴梅的,label为doctor的点公共的relation节点的名单;5: 请帮我查找病人孙思琪的伙伴的相关者的伙伴;", "completion": "查询语句为:1: match(a where a.name='韩国强')-[e]->(b:doctor)<-[e2]-(c where c.name='何思思') return b limit 70;2: match(a where a.name='Prescription_321')-[e:friend]->(b where (b.weight BETWEEN 21 AND 77) or b.id <> 43) return b.category,e.targetId, e.f1;3: match(a:department where a.name = '急诊部')-[e:friend]->(b) return b order by e.srcId desc limit 95;4: match(a:doctor where a.name='王科')-[e:relation]->(b)<-[e2:relation]-(c:doctor where c.name='吴梅') return b.name;5: match(a:patient where a.name='孙思琪')-[e:partner]->(b)-[e2:relation]->(c)-[e3:partner]->(d) return d;"}
{"prompt": "用这个schema:CREATE GRAPH g ( Vertex doctor ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex department ( id int ID, name varchar, address varchar, weight int ), Vertex patient ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex medicine ( id int ID, name varchar, price int, category varchar, weight int ), Edge doctor_creates_prescription ( srcId int FROM doctor SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge patient_accept_prescription ( srcId int FROM patient SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_diagnose_patient ( srcId int FROM doctor SOURCE ID, targetId int FROM patient DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge prescription_contain_medicine ( srcId int FROM prescription SOURCE ID, targetId int FROM medicine DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_doctor ( srcId int FROM department SOURCE ID, targetId int FROM doctor DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_belong_department ( srcId int FROM doctor SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ));生成7个查询语句:1: 帮我查询周建聪的点创造的处方,然后帮我查询周建聪被拥有的部门,一起返回;2: 请帮我找出医生孙若涵的所有标签为伙伴的边,并根据f1从大到小排列,返回65个;3: 返回prescription Prescription_129的所有partner,的f0的和减658加189的个数;4: 帮我查询136个处方Prescription_229和Prescription_175,共同的相关者;5: 查询全部源点类型为处方,边类型为prescription_contain_medicine的边,返回这些边的权重除194.05的平均值,和权重加147.13的数量;6: 请帮我查找与处方Prescription_188和Prescription_432都存在prescription_contain_medicine关系的点;7: 返回类型是处方的全部点,并根据id降序排列;", "completion": "查询语句为:1: match(a where a.name = '周建聪')-[e:doctor_creates_prescription]->(b:prescription),(a where a.name = '周建聪')<-[e2:department_has_doctor]-(c:department) return a, b, c;2: match(a:doctor where a.name = '孙若涵')-[e:partner]->(b) return b order by e.f1 desc limit 65;3: match(a:prescription where a.name= 'Prescription_129')-[e:partner]->(b) return COUNT(SUM(e.f0) - 658 + 189);4: match(a:prescription where a.name='Prescription_229')-[e:relation]->(b)<-[e2:relation]-(c:prescription where c.name='Prescription_175') return b limit 136;5: match(a:prescription)-[e:prescription_contain_medicine]->(b) return AVG(e.weight / 194.05), COUNT(e.weight + 147.13);6: match(a:prescription where a.name='Prescription_188')-[e:prescription_contain_medicine]->(b)<-[e2:prescription_contain_medicine]-(c:prescription where c.name='Prescription_432') return b;7: match(a:prescription) return a order by a.id desc;"}
{"prompt": "用这个schema:CREATE GRAPH g ( Vertex doctor ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex department ( id int ID, name varchar, address varchar, weight int ), Vertex patient ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex medicine ( id int ID, name varchar, price int, category varchar, weight int ), Edge doctor_creates_prescription ( srcId int FROM doctor SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge patient_accept_prescription ( srcId int FROM patient SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_diagnose_patient ( srcId int FROM doctor SOURCE ID, targetId int FROM patient DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge prescription_contain_medicine ( srcId int FROM prescription SOURCE ID, targetId int FROM medicine DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_doctor ( srcId int FROM department SOURCE ID, targetId int FROM doctor DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_belong_department ( srcId int FROM doctor SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ));生成8个查询语句:1: 查询名为黄宏的patient;2: 请帮我查找与医生李思思有doctor_diagnose_patient关系的3跳以内的环;3: 查询以接受关系关联了处方Prescription_434的病人;4: 找出41个名为韩红的点属于的标签为部门的节点,且节点地址不是C栋;5: 帮我查询标签为department的点,返回194个;6: 帮我查询和department急诊部有department_has_doctor关系的doctor,再帮我查询以department_has_doctor关系关联了急诊部的doctor;7: 找出98个身高为空且性别为famale,或年龄乘36的最小值为90的病人,根据名字升序排列;8: 帮我查询名为郑若涵的,weight小于等于464,createTime是2007年04月07日的partner,返回这些partner的name,和边的targetId,f1,weight;", "completion": "查询语句为:1: match(a:patient where a.name = '黄宏') return a;2: match(a:doctor where name = '李思思')-[e:doctor_diagnose_patient]->{0,2}(b)->(a) return a.id, b.id as b_id;3: match(a:prescription where a.name='Prescription_434')<-[e:patient_accept_prescription]-(b:patient) return b;4: match(a where a.name='韩红')-[e:doctor_belong_department]->(b:department where b.address <> 'C栋') return b limit 41;5: match(a:department) return a limit 194;6: match(a:department where a.name = '急诊部')-[e:department_has_doctor]->(b:doctor),(a:department where a.name = '急诊部')<-[e2:department_has_doctor]-(c:doctor)return a, b, c;7: match(a:patient where ((a.height is null) and a.gender = 'famale') or MIN(a.age * 36) = 90) return a order by a.name asc limit 98;8: match(a where a.name='郑若涵')-[e:partner]->(b where b.weight <= 464 and b.createTime = '2007-04-07') return b.name,e.targetId, e.f1, e.weight;"}
{"prompt": "给定图的schema如下:CREATE GRAPH g ( Vertex doctor ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex department ( id int ID, name varchar, address varchar, weight int ), Vertex patient ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex medicine ( id int ID, name varchar, price int, category varchar, weight int ), Edge doctor_creates_prescription ( srcId int FROM doctor SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge patient_accept_prescription ( srcId int FROM patient SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_diagnose_patient ( srcId int FROM doctor SOURCE ID, targetId int FROM patient DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge prescription_contain_medicine ( srcId int FROM prescription SOURCE ID, targetId int FROM medicine DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_doctor ( srcId int FROM department SOURCE ID, targetId int FROM doctor DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_belong_department ( srcId int FROM doctor SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ));生成4个查询语句:1: 找出全部部门以id,权重分组的id, 根据id从小到大排序;2: 找出前129个标签为patient_accept_prescription的边;3: 返回和医生徐建聪有doctor_diagnose_patient关系的病人,再返回以doctor_diagnose_patient关系关联了徐建聪的病人;4: 查找所有源点类型为doctor,边类型为doctor_creates_prescription的边,返回这些边的weight减weight乘174的数量,和weight除154.86的数量;", "completion": "查询语句为:1: match(a:department) return a.id group by a.id, a.weight order by a.id asc;2: match(a)-[e:patient_accept_prescription]->(b) return e limit 129;3: match(a:doctor where a.name = '徐建聪')-[e:doctor_diagnose_patient]->(b:patient),(a:doctor where a.name = '徐建聪')<-[e2:doctor_diagnose_patient]-(c:patient)return a, b, c;4: match(a:doctor)-[e:doctor_creates_prescription]->(b) return COUNT((e.weight - e.weight) * 174), COUNT(e.weight / 154.86);"}
{"prompt": "给定图的schema如下:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_pay_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_likes_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下9个查询:1: 请帮我找出名为何思思的person;2: 查找和标签为person的点有person_knows_person关系的person,以及和这些person有person_knows_person关系的person,以及和这些person有person_pay_person关系的person;3: 请帮我查找全部id为153的person关联的person,和以knows关系关联了这些person的其他person;4: 查找全部源点类型为person,边类型为person_pay_person的边,返回这些边的目标点id乘31除115的值,和权重减173.24的值;5: 帮我查询名为黄国强和韩宏的,标签等于person的点公共的partner节点的名单;6: 请帮我查找名为孙红和孙宏的,标签等于person的点公共的朋友节点的名单;7: 帮我查询类型为person的所有点,并根据gender降序排列;8: 给出所有与person郑雪有关系的person的id;9: 请帮我查找类型为person,名为周科的点,返回这些点的名字;", "completion": "查询语句为:1: match(a:person where a.name = '何思思') return a;2: match(a:person)-[e:person_knows_person]->(b:person)-[e2:person_knows_person]->(c:person)-[e3:person_pay_person]->(d:person) return d;3: match(a:person where a.id = '153')-[e]-(b:person)<-[e2:person_knows_person]-(c:person) return b,c;4: match(a:person)-[e:person_pay_person]->(b) return e.targetId * 31 / 115, e.weight - 173.24;5: match(a:person where a.name='黄国强')-[e:partner]->(b)<-[e2:partner]-(c:person where c.name='韩宏') return b.name;6: match(a:person where a.name='孙红')-[e:friend]->(b)<-[e2:friend]-(c:person where c.name='孙宏') return b.name;7: match(a:person) return a order by a.gender desc;8: match(a:person where a.name='郑雪')-[e]-(b:person) return b.id;9: match(a:person where a.name = '周科') return a.name;"}
{"prompt": "用这个schema:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_pay_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_likes_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下8个查询:1: 找出id为102的点的年龄,名字,性别;2: 请帮我查找和person有关联的person节点,并根据其gender分组,返回gender,以及salary加6367加54乘5016的数量;3: 给出和person点有likes关系的person节点,且边满足条件f0大于等于965,目标person节点name不是王强;4: 查询全部person的friend,或其friend的friend;5: 给出全部label为person的点;6: 查询和person徐思思有person_knows_person关系的person,再查询以person_likes_person关系关联了徐思思的person;7: 查询person knows的person,返回其源点的id乘85的求和值,以及目标点的id的平均值除16的值;8: 给出和person郑建聪有person_pay_person关系的person,以及和person韩宏有person_pay_person关系的person,将它们都返回;", "completion": "查询语句为:1: match(a where a.id = '102') return a.age, a.name, a.gender;2: match(a:person)-[e:person_pay_person]-(b:person) return b.gender, COUNT((b.salary + 6367 + 54) * 5016) group by b.gender;3: match(a:person)-[e:person_likes_person where e.f0 >= 965]->(b:person where b.name <> '王强') return b;4: match(a:person)-[e:friend]->{1,2}(b) return b;5: match(a:person) return a;6: match(a:person where a.name = '徐思思')-[e:person_knows_person]->(b:person),(a:person where a.name = '徐思思')<-[e2:person_likes_person]-(c:person)return a, b, c;7: match(a:person)-[e:person_knows_person]->(b:person) return SUM(a.id * 85), AVG(b.id) / 16;8: match(a:person where a.name = '郑建聪')-[e:person_pay_person]->(b:person),(c:person where c.name = '韩宏')-[e2:person_pay_person]->(d:person)return a, b, c, d;"}
{"prompt": "使用这个图:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_pay_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_likes_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下3个查询:1: 查询和person有关联的person节点,并根据其名字,性别,薪资分组,返回名字,性别,薪资,以及年龄加92的和;2: 找出age小于73且name为王梅的person likes的person的名称,以及这些person knows的person的名称;3: 返回id是3的节点;", "completion": "查询语句为:1: match(a:person)-[e:person_knows_person]-(b:person) return b.name, b.gender, b.salary, SUM(b.age + 92) group by b.name, b.gender, b.salary;2: match(a:person where a.age < 73 and a.name = '王梅')-[e:person_likes_person]->(b:person)-[e2:person_knows_person]->(c:person) return b.name as b_name, c.name as c_name;3: match(a where a.id = 3) return a;"}
{"prompt": "给定图的schema如下:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_pay_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_likes_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下3个查询:1: 给出名为陈强的person,以及与其有关的person,并返回陈强的age和这些person的id;2: 请帮我查找与person马轩有person_likes_person关系的2度的环;3: 查询和person周雪有关的person,称为X,再查询和这个X有关联的其他person,以及和X有关联的person;", "completion": "查询语句为:1: match(a:person where name = '陈强')-[e]-(b:person) return a.age, b.id;2: match(a:person where name = '马轩')-[e:person_likes_person]->{1,1}(b)->(a) return a.id, b.id as b_id;3: match(a:person where a.name = '周雪')-[e]-(b:person), (b:person)-[e2]-(c:person),(b:person)-[e3]-(d:person) return a, b, c, d;"}
{"prompt": "使用这个图:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_pay_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_likes_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));生成6个查询语句:1: 请帮我查找所有和person点有knows关系的person节点,且边满足条件f1是true,目标person节点满足条件salary小于等于3019;2: 找出和person孙思琪有关的person,再找出和孙思琪person_pay_person的其他person,返回它们;3: 找出与person陈国强和孙宏都存在person_likes_person关系的点;4: 给出源点名字是赵国强或性别等于famale,且名字为Amily,边标签为person_likes_person,且f0为空且f1等于false的边,返回这些边的f0加f0除874的值;5: 查找person Sam的标签为相关者的边,并根据权重降序排列,返回107个;6: 找出名为赵红的点支付的person;", "completion": "查询语句为:1: match(a:person)-[e:person_knows_person where e.f1 = true]->(b:person where b.salary <= 3019) return b;2: match(a:person where a.name = '孙思琪')-[e]-(b:person), (a:person)-[e2:person_pay_person]->(c:person) return a, b, c;3: match(a:person where a.name='陈国强')-[e:person_likes_person]->(b)<-[e2:person_likes_person]-(c:person where c.name='孙宏') return b;4: match(a where (a.name = '赵国强' or a.gender = 'famale') and a.name = 'Amily')-[e:person_likes_person where (e.f0 is null) and e.f1 = false]->(b) return (e.f0 + e.f0) / 874;5: match(a:person where a.name = 'Sam')-[e:relation]->(b) return b order by e.weight desc limit 107;6: match(a where a.name='赵红')-[e:person_pay_person]->(b:person) return b;"}
{"prompt": "用如下schema的图:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_pay_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_likes_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));生成4个查询语句:1: 查询与person赵宏有关系的person, 返回和这些person有关联的person的,年龄减74除73的值;2: 请帮我查找所有源点类型为person,边类型为person_pay_person,以及f0不为空的边;3: 请帮我找出person孙伟likes的person,被其他person pay的数量;4: 找出所有源点名字不等于何雪且id不是28且id不为空,目标点id大于4,名字不等于吴强,或名字不等于孙强,且标签为person_pay_person的边;", "completion": "查询语句为:1: match(a:person where a.name= '赵宏')-[e]-(b:person)-[e2]-(c:person) return (c.age - 74) / 73;2: match(a:person)-[e:person_pay_person where (e.f0 is not null)]->(b) return e;3: match(a:person where a.name='孙伟')-[e:person_likes_person]->(b:person)<-[e2:person_pay_person]-(c:person) return COUNT(c);4: match(a where a.name <> '何雪' and a.id <> 28 and (a.id is not null))-[e:person_pay_person]->(b where (b.id > 4 and b.name <> '吴强') or b.name <> '孙强') return e;"}
{"prompt": "给定图的schema如下:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_pay_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_likes_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));生成3个查询语句:1: 请帮我查找126个与孙思思和孙建国都存在关系的person节点;2: 给出名为吴月的点的,性别为male,名字不是杜科的相关者,返回这些相关者的性别,和边的f1;3: 返回与person马月有关,且与person韩思琪有关系的person节点;", "completion": "查询语句为:1: match(a where a.name='孙思思')-[e]->(b:person)<-[e2]-(c where c.name='孙建国') return b limit 126;2: match(a where a.name='吴月')-[e:relation]->(b where b.gender = 'male' and b.name <> '杜科') return b.gender,e.f1;3: match(a:person where a.name='马月')-[e:person_knows_person]-(b:person)-[e2:person_knows_person]-(c:person where c.name='韩思琪') return b;"}
{"prompt": "使用这个图:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_pay_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_likes_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));生成5个查询语句:1: 返回和person陈科之间有person_likes_person关系的person;2: 找出名为赵建国和孙若涵的,标签为person的点公共的伙伴节点的名单;3: 查询person韩伟 likes的person,返回person pay的person的height除167的值 ;4: 查找全部person以年龄分组的年龄, 根据年龄从小到大排序;5: 帮我查询person喜欢的person,返回其源点的年龄对52取余的值,以及目标点的id加33的值;", "completion": "查询语句为:1: match(a:person where a.name='陈科')-[e:person_likes_person]->(b:person) return b;2: match(a:person where a.name='赵建国')-[e:partner]->(b)<-[e2:partner]-(c:person where c.name='孙若涵') return b.name;3: match(a:person where name = '韩伟')-[e:person_likes_person]->(b:person)-[e2:person_pay_person]->(c:person) return c.height / 167;4: match(a:person) return a.age group by a.age order by a.age asc;5: match(a:person)-[e:person_likes_person]->(b:person) return a.age % 52, b.id + 33;"}
{"prompt": "用如下schema的图:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_lover_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_colleague_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_family_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_parent_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_friend_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下6个查询:1: 找出所有名为吴红的点knows的person;2: 查询所有person以身高,薪资,名字分组的年龄, 根据年龄升序排序;3: 请帮我查找源点类型为person,边类型为person_parent_person的边,返回这些边的源点id加26的最小值,和目标点id对191取余的值;4: 查询全部和person点有relates关系的person节点,且边满足条件targetId的和乘112不等于74,目标person节点name等于徐红;5: 找出从person马国强出发,经过标签为person_colleague_person的边,走2度或3度到达的person点;6: 给出全部和名为黄建国的person有同事关系,或有同事的同事关系的person;", "completion": "查询语句为:1: match(a where a.name='吴红')-[e:knows]->(b:person) return b;2: match(a:person) return a.age group by a.height, a.salary, a.name order by a.age asc;3: match(a:person)-[e:person_parent_person]->(b) return MIN(e.srcId + 26), e.targetId % 191;4: match(a:person)-[e:relates where SUM(e.targetId) * 112 <> 74]->(b:person where b.name = '徐红') return b;5: match(a:person where a.name='马国强')-[e:person_colleague_person]->{2,3}(b:person) return b;6: match(a:person where n.name=黄建国)-[e:person_colleague_person]->{1,2}(b:person) return b;"}
{"prompt": "使用这个图:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_lover_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_colleague_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_family_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_parent_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_friend_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下4个查询:1: 找出全部源点类型为person,边类型为person_friend_person的边,返回这些边的f0对911取余的值,和f0除f0的值;2: 找出75个与徐建聪和马建聪都存在关系的person节点;3: 查询标签为person的点,返回25个;4: 请帮我查找id为154的点的id;", "completion": "查询语句为:1: match(a:person)-[e:person_friend_person]->(b) return e.f0 % 911, e.f0 / e.f0;2: match(a where a.name='徐建聪')-[e]->(b:person)<-[e2]-(c where c.name='马建聪') return b limit 75;3: match(a:person) return a limit 25;4: match(a where a.id = '154') return a.id;"}
{"prompt": "使用这个图:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_lover_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_colleague_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_family_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_parent_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_friend_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下4个查询:1: 返回74个名为赵思思的点knows的label为person的节点,且其gender不是famale,salary小于5328;2: 查询和person徐月有关的person,再查询和徐月person_family_person的其他person,返回它们;3: 查找55个salary不为空且gender不是male且salary除9725为192的person,根据name升序排列;4: 帮我查询前101个满足条件身高在171到185之间的person;", "completion": "查询语句为:1: match(a where a.name='赵思思')-[e:knows]->(b:person where b.gender <> 'famale' and b.salary < 5328) return b limit 74;2: match(a:person where a.name = '徐月')-[e]-(b:person), (a:person)-[e2:person_family_person]->(c:person) return a, b, c;3: match(a:person where (a.salary is not null) and a.gender <> 'male' and a.salary / 9725 = 192) return a order by a.name asc limit 55;4: match(a:person where (a.height BETWEEN 171 AND 185)) return a limit 101;"}
{"prompt": "使用这个图:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_lover_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_colleague_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_family_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_parent_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_friend_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下6个查询:1: 找出前103个label为person_colleague_person的边;2: 找出id为153的点的salary;3: 帮我查询159个名字小于6983且年龄为55的person,根据年龄降序排列;4: 找出与person郑思思存在person_colleague_person关系,且与person陈思琪存在person_family_person关系的person节点，返回这些person的年龄,名字,id,及person郑思思的年龄,及person陈思琪的id;5: 找出所有person以身高,名字分组的薪资, 根据薪资从大到小排序;6: 请帮我找出与person王若涵有person_friend_person关系的3跳以内的环;", "completion": "查询语句为:1: match(a)-[e:person_colleague_person]->(b) return e limit 103;2: match(a where a.id = '153') return a.salary;3: match(a:person where a.name < 6983 and a.age = 55) return a order by a.age desc limit 159;4: match(a:person where a.name='郑思思')-[e:person_colleague_person]->(b:person)<-[e2:person_family_person]-(c:person where c.name='陈思琪') return a.age,b.age, b.name, b.id,c.id;5: match(a:person) return a.salary group by a.height, a.name order by a.salary desc;6: match(a:person where name = '王若涵')-[e:person_friend_person]->{0,2}(b)->(a) return a.id, b.id as b_id;"}
{"prompt": "给定图的schema如下:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_lover_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_colleague_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_family_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_parent_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_friend_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));生成5个查询语句:1: 给出45个gender等于male且id小于等于9的person,根据height升序排列;2: 查询全部person以薪资,年龄,性别分组的性别, 根据性别升序排序;3: 请帮我查找全部名为黄强的点关联的person;4: 查询person马若涵 relates的person,返回person knows的person的id除45的值 ;5: 请帮我找出从person张思琪出发,经过类型为person_parent_person的边,走3度或4度到达的person点;", "completion": "查询语句为:1: match(a:person where a.gender = 'male' and a.id <= 9) return a order by a.height asc limit 45;2: match(a:person) return a.gender group by a.salary, a.age, a.gender order by a.gender asc;3: match(a where a.name='黄强')-[e:relates]->(b:person) return b;4: match(a:person where name = '马若涵')-[e:relates]->(b:person)-[e2:knows]->(c:person) return c.id / 45;5: match(a:person where a.name='张思琪')-[e:person_parent_person]->{3,4}(b:person) return b;"}
{"prompt": "用这个schema:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_lover_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_colleague_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_family_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_parent_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_friend_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));生成5个查询语句:1: 请帮我找出133个gender等于famale,age小于等于18的person,根据name升序排列;2: 给出person knows的person,返回其源点的age加age的和,以及目标点的salary乘6868的值;3: 请帮我查找person韩建国认识的person,被其他person关联的数量;4: 请帮我查找person陈国强relates的person,被其他person knows的数量;5: 请帮我找出和标签为person的点有person_lover_person关系的person,并且和这些person有person_family_person关系的person,并且和这些person有person_colleague_person关系的person;", "completion": "查询语句为:1: match(a:person where a.gender = 'famale' and a.age <= 18) return a order by a.name asc limit 133;2: match(a:person)-[e:knows]->(b:person) return SUM(a.age + a.age), b.salary * 6868;3: match(a:person where a.name='韩建国')-[e:knows]->(b:person)<-[e2:relates]-(c:person) return COUNT(c);4: match(a:person where a.name='陈国强')-[e:relates]->(b:person)<-[e2:knows]-(c:person) return COUNT(c);5: match(a:person)-[e:person_lover_person]->(b:person)-[e2:person_family_person]->(c:person)-[e3:person_colleague_person]->(d:person) return d;"}
{"prompt": "用如下schema的图:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_lover_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_colleague_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_family_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_parent_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_friend_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));生成6个查询语句:1: 查找全部和person韩科之间有person_friend_person关系的person;2: 请帮我找出与person何轩有关系的person, 返回和这些person有关联的person的,id的求和值除82的值;3: 找出192个salary不是9749且height小于等于175,gender不等于famale的person,根据name降序排列;4: 返回全部源点满足条件height不是184且gender不是male,或id在1到98之间,目标点满足条件gender不是male或age不为空或salary小于等于9730,且类型为person_family_person的边;5: 返回name不等于韩红且gender不是famale的person knows的person的名称,以及这些person relates的person的名称;6: 请帮我找出person的3跳以内的环;", "completion": "查询语句为:1: match(a:person where a.name='韩科')-[e:person_friend_person]->(b:person) return b;2: match(a:person where a.name= '何轩')-[e]-(b:person)-[e2]-(c:person) return SUM(c.id) / 82;3: match(a:person where a.salary <> 9749 and a.height <= 175 and a.gender <> 'famale') return a order by a.name desc limit 192;4: match(a where (a.height <> 184 and a.gender <> 'male') or (a.id BETWEEN 1 AND 98))-[e:person_family_person]->(b where b.gender <> 'male' or (b.age is not null) or b.salary <= 9730) return e;5: match(a:person where a.name <> '韩红' and a.gender <> 'famale')-[e:knows]->(b:person)-[e2:relates]->(c:person) return b.name as b_name, c.name as c_name;6: match(a:person)->{0,2}(b)->(a) return a.id, b.id as b_id;"}
{"prompt": "用这个schema:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_lover_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_colleague_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_family_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_parent_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_friend_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));生成9个查询语句:1: 请帮我找出与person徐国强有person_friend_person关系的1跳的环;2: 帮我查询标签等于person的点,返回180个;3: 找出40个名字是何思思的person,根据性别从大到小排列;4: 帮我查询person李科的所有类型是恋人的边,并根据源点id升序排列,返回86个;5: 查询全部person以name分组的name, 根据name升序排序;6: 查找名为马宏的person;7: 给出person杜雪认识的person,被其他person认识的数量;8: 帮我查询被person李科relates的person;9: 给出所有源点满足条件salary大于2215,目标点满足条件age的最小值加35大于等于170或age小于22,且id为63,且类型为person_family_person的边;", "completion": "查询语句为:1: match(a:person where name = '徐国强')-[e:person_friend_person]->{0,0}(b)->(a) return a.id, b.id as b_id;2: match(a:person) return a limit 180;3: match(a:person where a.name = '何思思') return a order by a.gender desc limit 40;4: match(a:person where a.name = '李科')-[e:person_lover_person]->(b) return b order by e.srcId asc limit 86;5: match(a:person) return a.name group by a.name order by a.name asc;6: match(a:person where a.name = '马宏') return a;7: match(a:person where a.name='杜雪')-[e:knows]->(b:person)<-[e2:knows]-(c:person) return COUNT(c);8: match(a:person)<-[e:relates]-(b:person where b.name='李科') return a, b;9: match(a where a.salary > 2215)-[e:person_family_person]->(b where (MIN(b.age) + 35 >= 170 or b.age < 22) and b.id = 63) return e;"}
{"prompt": "使用这个图:CREATE GRAPH g ( Vertex forum ( id int ID, name varchar, peopleNumber int, createTime bigint, value int ), Vertex post ( id int ID, name varchar, lang varchar, createTime bigint, wordCount int, value int ), Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex tag ( id int ID, name varchar, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge forum_contain_post ( srcId int FROM forum SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_likes_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge post_has_tag ( srcId int FROM post SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge forum_contain_person ( srcId int FROM forum SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_publish_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));执行以下5个查询:1: 给出所有id为137的post关联的post,和以publish关系关联了这些post的其他user;2: 返回所有forum以peopleNumber分组的name, 根据name从小到大排序;3: 查询所有名为中国军事论坛的点contain的post;4: 返回从user陈梅出发,经过类型是user_likes_post的边,走3跳或4跳到达的post点;5: 请帮我查找43个论坛天涯论坛和中国军事论坛,共同的伙伴;", "completion": "查询语句为:1: match(a:post where a.id = '137')-[e]-(b:post)<-[e2:user_publish_post]-(c:user) return b,c;2: match(a:forum) return a.name group by a.peopleNumber order by a.name asc;3: match(a where a.name='中国军事论坛')-[e:forum_contain_post]->(b:post) return b;4: match(a:user where a.name='陈梅')-[e:user_likes_post]->{3,4}(b:post) return b;5: match(a:forum where a.name='天涯论坛')-[e:partner]->(b)<-[e2:partner]-(c:forum where c.name='中国军事论坛') return b limit 43;"}
{"prompt": "用如下schema的图:CREATE GRAPH g ( Vertex forum ( id int ID, name varchar, peopleNumber int, createTime bigint, value int ), Vertex post ( id int ID, name varchar, lang varchar, createTime bigint, wordCount int, value int ), Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex tag ( id int ID, name varchar, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge forum_contain_post ( srcId int FROM forum SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_likes_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge post_has_tag ( srcId int FROM post SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge forum_contain_person ( srcId int FROM forum SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_publish_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));执行以下9个查询:1: 请帮我找出和forum CSDN有forum_contain_person关系的person,再请帮我找出以forum_contain_person关系关联了 CSDN的person;2: 请帮我查找和post有关联的tag节点,并根据其id分组,返回id,以及value对value取余除718加192的个数;3: 返回和名为中国军事论坛的论坛有伙伴关系,或有伙伴的伙伴关系的帖子;4: 找出value在463到822之间或peopleNumber大于等于489的forum contain的post的名称,以及这些post has的tag的名称;5: 查找类型为post_has_tag,以及满足条件目标点id大于等于80的边;6: 查询user publish的post,返回其源点的height减156的最小值,以及目标点的wordCount乘823的数量;7: 返回满足条件gender是famale或name不等于吴月,且name为徐建聪的节点;8: 找出以拥有关系关联了标签悬疑的帖子;9: 帮我查询和标签文艺有关系的帖子节点,返回这些点的id,价值,名字;", "completion": "查询语句为:1: match(a:forum where a.name = 'CSDN')-[e:forum_contain_person]->(b:person),(a:forum where a.name = 'CSDN')<-[e2:forum_contain_person]-(c:person)return a, b, c;2: match(a:post)-[e:post_has_tag]-(b:tag) return b.id, COUNT(b.value % b.value / 718 + 192) group by b.id;3: match(a:forum where n.name=中国军事论坛)-[e:partner]->{1,2}(b:post) return b;4: match(a:forum where (a.value BETWEEN 463 AND 822) or a.peopleNumber >= 489)-[e:forum_contain_post]->(b:post)-[e2:post_has_tag]->(c:tag) return b.name as b_name, c.name as c_name;5: match(a)-[e:post_has_tag where e.targetId >= 80]->(b) return e;6: match(a:user)-[e:user_publish_post]->(b:post) return MIN(a.height - 156), COUNT(b.wordCount * 823);7: match(a where (a.gender = 'famale' or a.name <> '吴月') and a.name = '徐建聪') return a;8: match(a:tag where a.name='悬疑')<-[e:post_has_tag]-(b:post) return b;9: match(a:tag where a.name='文艺')-[e]-(b:post) return b.id, b.value, b.name;"}
{"prompt": "用如下schema的图:CREATE GRAPH g ( Vertex forum ( id int ID, name varchar, peopleNumber int, createTime bigint, value int ), Vertex post ( id int ID, name varchar, lang varchar, createTime bigint, wordCount int, value int ), Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex tag ( id int ID, name varchar, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge forum_contain_post ( srcId int FROM forum SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_likes_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge post_has_tag ( srcId int FROM post SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge forum_contain_person ( srcId int FROM forum SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_publish_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));执行以下3个查询:1: 找出帖子Post_227的所有伙伴,的目标点id除184的值;2: 找出用户的三角的环,边标签为user_publish_post, 并返回这些点的id;3: 查找全部源点标签等于用户,边标签等于user_publish_post,以及源点id大于38且时间戳小于等于862,或时间戳是1999年05月03日的边;", "completion": "查询语句为:1: match(a:post where a.name= 'Post_227')-[e:partner]->(b) return e.targetId / 184;2: match(a:user)-[e:user_publish_post]->(b)-[e2:user_publish_post]-(c)->(a) return a,b.id as b_id,c.id as c_id;3: match(a:user)-[e:user_publish_post where (e.srcId > 38 and e.timeStamp <= 862) or e.timeStamp = '1999-05-03']->(b) return e;"}
{"prompt": "用如下schema的图:CREATE GRAPH g ( Vertex forum ( id int ID, name varchar, peopleNumber int, createTime bigint, value int ), Vertex post ( id int ID, name varchar, lang varchar, createTime bigint, wordCount int, value int ), Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex tag ( id int ID, name varchar, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge forum_contain_post ( srcId int FROM forum SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_likes_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge post_has_tag ( srcId int FROM post SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge forum_contain_person ( srcId int FROM forum SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_publish_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));执行以下3个查询:1: 找出和名为中国军事论坛的论坛有伙伴关系,或有伙伴的伙伴关系的person;2: 返回源点标签为forum,目标点标签为post,标签为forum_contain_post的边;3: 请帮我找出和person黄思思有3跳关系的person;", "completion": "查询语句为:1: match(a:forum where n.name=中国军事论坛)-[e:partner]->{1,2}(b:person) return b;2: match(a:forum)-[e:forum_contain_post]->(b:post) return e;3: match(a:person where a.name='黄思思')-[e]->{3,3}(b:person) return b;"}
{"prompt": "用这个schema:CREATE GRAPH g ( Vertex forum ( id int ID, name varchar, peopleNumber int, createTime bigint, value int ), Vertex post ( id int ID, name varchar, lang varchar, createTime bigint, wordCount int, value int ), Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex tag ( id int ID, name varchar, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge forum_contain_post ( srcId int FROM forum SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_likes_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge post_has_tag ( srcId int FROM post SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge forum_contain_person ( srcId int FROM forum SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_publish_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));生成5个查询语句:1: 给出全部与tag有关系的person节点,且person节点的name不是吴国强,并返回这些点的age的求和值乘26的值,以及age对18取余的数量;2: 查询前192个wordCount为空或lang不是Japanese的post;3: 请帮我找出id为55的person有关的user的relation, 再请帮我找出和user有关系的relation;4: 找出所有与forum有关系的person节点,且person节点的gender不等于163,并返回这些点的id的和除13加36的个数,以及age的最大值对77取余的最小值;5: 返回前95个label为forum_contain_post的边;", "completion": "查询语句为:1: match(a:tag)-[e]->(b:person where b.name <> '吴国强') return SUM(b.age) * 26, COUNT(b.age % 18);2: match(a:post where (a.wordCount is null) or a.lang <> 'Japanese') return a limit 192;3: match(a:person where id = '55')-[e]-(b:user)-[e2:relation]->(c), (b:user)-[e3:relation]->(d) return a, b, c, d;4: match(a:forum)-[e]->(b:person where b.gender <> 163) return COUNT(SUM(b.id) / 13 + 36), MIN(MAX(b.age) % 77);5: match(a)-[e:forum_contain_post]->(b) return e limit 95;"}
{"prompt": "用这个schema:CREATE GRAPH g ( Vertex forum ( id int ID, name varchar, peopleNumber int, createTime bigint, value int ), Vertex post ( id int ID, name varchar, lang varchar, createTime bigint, wordCount int, value int ), Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex tag ( id int ID, name varchar, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge forum_contain_post ( srcId int FROM forum SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_likes_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge post_has_tag ( srcId int FROM post SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge forum_contain_person ( srcId int FROM forum SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_publish_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));生成3个查询语句:1: 找出标签为标签,名为动作的点,返回这些点的id,名字,价值;2: 查询user publish的post,返回其源点的age的最大值减38对196取余的和,以及目标点的wordCount减wordCount的个数;3: 请帮我查找和论坛有关联的帖子节点,并根据其id,字数分组,返回id,字数,以及id减52减49的值;", "completion": "查询语句为:1: match(a:tag where a.name = '动作') return a.id, a.name, a.value;2: match(a:user)-[e:user_publish_post]->(b:post) return SUM(MAX(a.age) - 38 % 196), COUNT(b.wordCount - b.wordCount);3: match(a:forum)-[e:forum_contain_post]-(b:post) return b.id, b.wordCount, b.id - 52 - 49 group by b.id, b.wordCount;"}
{"prompt": "用如下schema的图:CREATE GRAPH g ( Vertex forum ( id int ID, name varchar, peopleNumber int, createTime bigint, value int ), Vertex post ( id int ID, name varchar, lang varchar, createTime bigint, wordCount int, value int ), Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex tag ( id int ID, name varchar, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge forum_contain_post ( srcId int FROM forum SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_likes_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge post_has_tag ( srcId int FROM post SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge forum_contain_person ( srcId int FROM forum SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_publish_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));生成9个查询语句:1: 返回名为孙宏和张强的,类型是用户的点公共的相关者节点的名单;2: 给出44个name等于悬疑,name不是悬疑且value小于380的tag,根据value从大到小排列;3: 查询前102个标签为user_likes_post的边;4: 查找全部类型是post的点;5: 请帮我查找全部user以age,id分组的gender, 根据gender从小到大排序;6: 返回和user张建国有user_publish_post关系的post,以及和user郑国强有user_likes_post关系的post,将它们都返回;7: 返回所有源点label为论坛,边label为forum_contain_post的边,返回这些边的目标点id对91取余的数量,和f0的数量减740的值;8: 给出标签等于user_publish_post,且满足条件f1不是true或weight大于等于151.31的边;9: 请帮我查找所有标签以id,名字,价值分组的名字, 根据名字从大到小排序;", "completion": "查询语句为:1: match(a:user where a.name='孙宏')-[e:relation]->(b)<-[e2:relation]-(c:user where c.name='张强') return b.name;2: match(a:tag where a.name = '悬疑' and a.name <> '悬疑' and a.value < 380) return a order by a.value desc limit 44;3: match(a)-[e:user_likes_post]->(b) return e limit 102;4: match(a:post) return a;5: match(a:user) return a.gender group by a.age, a.id order by a.gender asc;6: match(a:user where a.name = '张建国')-[e:user_publish_post]->(b:post),(c:user where c.name = '郑国强')-[e2:user_likes_post]->(d:post)return a, b, c, d;7: match(a:forum)-[e:forum_contain_post]->(b) return COUNT(e.targetId % 91), COUNT(e.f0) - 740;8: match(a)-[e:user_publish_post where e.f1 <> true or e.weight >= 151.31]->(b) return e;9: match(a:tag) return a.name group by a.id, a.name, a.value order by a.name desc;"}
{"prompt": "用如下schema的图:CREATE GRAPH g ( Vertex course ( id int ID, name varchar, credit int, courseHour int, value int ), Vertex teacher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex student ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, size int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Edge department_has_teacher ( srcId int FROM department SOURCE ID, targetId int FROM teacher DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_student ( srcId int FROM department SOURCE ID, targetId int FROM student DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_has_department ( srcId int FROM university SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ), Edge teacher_teach_course ( srcId int FROM teacher SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ), Edge student_selects_course ( srcId int FROM student SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下3个查询:1: 给出与teacher何红有关系的course, 返回和这些course有关联的course的,credit减2的最大值;2: 请帮我查找与department体育学院和艺术学院都存在department_has_teacher关系的点;3: 查找university四川大学的全部类型是relation的边,并根据f0降序排列,返回41个;", "completion": "查询语句为:1: match(a:teacher where a.name= '何红')-[e]-(b:course)-[e2]-(c:course) return MAX(c.credit - 2);2: match(a:department where a.name='体育学院')-[e:department_has_teacher]->(b)<-[e2:department_has_teacher]-(c:department where c.name='艺术学院') return b;3: match(a:university where a.name = '四川大学')-[e:relation]->(b) return b order by e.f0 desc limit 41;"}
{"prompt": "用这个schema:CREATE GRAPH g ( Vertex course ( id int ID, name varchar, credit int, courseHour int, value int ), Vertex teacher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex student ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, size int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Edge department_has_teacher ( srcId int FROM department SOURCE ID, targetId int FROM teacher DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_student ( srcId int FROM department SOURCE ID, targetId int FROM student DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_has_department ( srcId int FROM university SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ), Edge teacher_teach_course ( srcId int FROM teacher SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ), Edge student_selects_course ( srcId int FROM student SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下6个查询:1: 查找所有和department法学院有关系的student节点,返回这些点的name,height,gender;2: 返回类型为teacher_teach_course,以及满足条件权重在191.18到191.02之间或f0在737到887之间,且目标点id不等于47的边;3: 返回和university北京大学有university_has_department关系的department,以及和student杜建国有student_selects_course关系的course,将它们都返回;4: 返回学生何建聪选择的课程,被其他教师教的数量;5: 查找部门土木学院的全部相关者,的目标点id减45的最小值;6: 帮我查询91个university中国科技大学和四川大学,共同的relation;", "completion": "查询语句为:1: match(a:department where a.name='法学院')-[e]-(b:student) return b.name, b.height, b.gender;2: match(a)-[e:teacher_teach_course where ((e.weight BETWEEN 191.18 AND 191.02) or (e.f0 BETWEEN 737 AND 887)) and e.targetId <> 47]->(b) return e;3: match(a:university where a.name = '北京大学')-[e:university_has_department]->(b:department),(c:student where c.name = '杜建国')-[e2:student_selects_course]->(d:course)return a, b, c, d;4: match(a:student where a.name='何建聪')-[e:student_selects_course]->(b:course)<-[e2:teacher_teach_course]-(c:teacher) return COUNT(c);5: match(a:department where a.name= '土木学院')-[e:relation]->(b) return MIN(e.targetId - 45);6: match(a:university where a.name='中国科技大学')-[e:relation]->(b)<-[e2:relation]-(c:university where c.name='四川大学') return b limit 91;"}
{"prompt": "用如下schema的图:CREATE GRAPH g ( Vertex course ( id int ID, name varchar, credit int, courseHour int, value int ), Vertex teacher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex student ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, size int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Edge department_has_teacher ( srcId int FROM department SOURCE ID, targetId int FROM teacher DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_student ( srcId int FROM department SOURCE ID, targetId int FROM student DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_has_department ( srcId int FROM university SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ), Edge teacher_teach_course ( srcId int FROM teacher SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ), Edge student_selects_course ( srcId int FROM student SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下6个查询:1: 查找前169个类型为department_has_teacher的边;2: 给出名为程序设计的课程;3: 返回从university重庆大学出发,经过类型是university_has_department的边,走2跳或3跳到达的department点;4: 查找学生陈思琪选择的课程,被其他学生选择的数量;5: 查询标签等于department的所有点,并根据id降序排列;6: 给出前191个等级等于1的大学;", "completion": "查询语句为:1: match(a)-[e:department_has_teacher]->(b) return e limit 169;2: match(a:course where a.name = '程序设计') return a;3: match(a:university where a.name='重庆大学')-[e:university_has_department]->{2,3}(b:department) return b;4: match(a:student where a.name='陈思琪')-[e:student_selects_course]->(b:course)<-[e2:student_selects_course]-(c:student) return COUNT(c);5: match(a:department) return a order by a.id desc;6: match(a:university where a.level = 1) return a limit 191;"}
{"prompt": "给定图的schema如下:CREATE GRAPH g ( Vertex course ( id int ID, name varchar, credit int, courseHour int, value int ), Vertex teacher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex student ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, size int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Edge department_has_teacher ( srcId int FROM department SOURCE ID, targetId int FROM teacher DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_student ( srcId int FROM department SOURCE ID, targetId int FROM student DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_has_department ( srcId int FROM university SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ), Edge teacher_teach_course ( srcId int FROM teacher SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ), Edge student_selects_course ( srcId int FROM student SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下6个查询:1: 帮我查询197个与南京大学和复旦大学都存在关系的学生节点;2: 帮我查询student王科selects的course,被其他teacher teach的数量;3: 请帮我找出源点标签为教师,边标签为teacher_teach_course,并且满足条件目标点id不等于13或目标点id小于90的边;4: 返回和名为Tom的teacher有partner关系,或有partner的partner关系的course;5: 请帮我查找18个和标签等于部门的点有department_has_teacher关系的教师,且和这些教师有teacher_teach_course关系的课程;6: 帮我查询以has关系关联了teacher郑若涵的department;", "completion": "查询语句为:1: match(a where a.name='南京大学')-[e]->(b:student)<-[e2]-(c where c.name='复旦大学') return b limit 197;2: match(a:student where a.name='王科')-[e:student_selects_course]->(b:course)<-[e2:teacher_teach_course]-(c:teacher) return COUNT(c);3: match(a:teacher)-[e:teacher_teach_course where e.targetId <> 13 or e.targetId < 90]->(b) return e;4: match(a:teacher where n.name=Tom)-[e:partner]->{1,2}(b:course) return b;5: match(a:department)-[e:department_has_teacher]->(b:teacher)-[e2:teacher_teach_course]->(c:course) return c limit 18;6: match(a:teacher where a.name='郑若涵')<-[e:department_has_teacher]-(b:department) return b;"}
{"prompt": "使用这个图:CREATE GRAPH g ( Vertex course ( id int ID, name varchar, credit int, courseHour int, value int ), Vertex teacher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex student ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, size int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Edge department_has_teacher ( srcId int FROM department SOURCE ID, targetId int FROM teacher DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_student ( srcId int FROM department SOURCE ID, targetId int FROM student DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_has_department ( srcId int FROM university SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ), Edge teacher_teach_course ( srcId int FROM teacher SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ), Edge student_selects_course ( srcId int FROM student SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ));生成6个查询语句:1: 查找141个与程序设计和计算机体系结构都存在关系的university节点;2: 找出39个和类型为大学的点有university_has_department关系的部门,并且和这些部门有department_has_teacher关系的教师;3: 返回所有源点满足条件薪资小于等于6593且id在40到64之间,或名字为黄红,目标点满足条件课时大于37或学分在1到4之间,且标签等于teacher_teach_course的边;4: 帮我查询department文学院has的teacher,被其他department has的数量;5: 查找与university华中科技大学存在university_has_department关系,且与teacher韩红存在department_has_teacher关系的department节点，返回这些department的name,value,及university华中科技大学的name,及teacher韩红的id;6: 查询名字不等于计算机体系结构且id的最大值乘51的数量大于12且价值是490的节点;", "completion": "查询语句为:1: match(a where a.name='程序设计')-[e]->(b:university)<-[e2]-(c where c.name='计算机体系结构') return b limit 141;2: match(a:university)-[e:university_has_department]->(b:department)-[e2:department_has_teacher]->(c:teacher) return c limit 39;3: match(a where (a.salary <= 6593 and (a.id BETWEEN 40 AND 64)) or a.name = '黄红')-[e:teacher_teach_course]->(b where b.courseHour > 37 or (b.credit BETWEEN 1 AND 4)) return e;4: match(a:department where a.name='文学院')-[e:department_has_teacher]->(b:teacher)<-[e2:department_has_teacher]-(c:department) return COUNT(c);5: match(a:university where a.name='华中科技大学')-[e:university_has_department]->(b:department)<-[e2:department_has_teacher]-(c:teacher where c.name='韩红') return a.name,b.name, b.value,c.id;6: match(a where a.name <> '计算机体系结构' and COUNT(MAX(a.id) * 51) > 12 and a.value = 490) return a;"}
{"prompt": "用这个schema:CREATE GRAPH g ( Vertex course ( id int ID, name varchar, credit int, courseHour int, value int ), Vertex teacher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex student ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, size int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Edge department_has_teacher ( srcId int FROM department SOURCE ID, targetId int FROM teacher DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_student ( srcId int FROM department SOURCE ID, targetId int FROM student DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_has_department ( srcId int FROM university SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ), Edge teacher_teach_course ( srcId int FROM teacher SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ), Edge student_selects_course ( srcId int FROM student SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ));生成7个查询语句:1: 找出所有和department法学院之间有department_has_student关系的student;2: 查找与teacher Jack有teacher_teach_course关系的3跳的环;3: 给出教师郑若涵的类型为相关者的边,并根据源点id从大到小排列,返回80个;4: 给出全部类型是大学的点;5: 请帮我查找从学生黄建聪出发,经过label为student_selects_course的边,走1度到达的课程点;6: 找出类型是大学的全部点,并根据名字从小到大排列;7: 返回教师吴建聪教的课程,被其他教师教的数量;", "completion": "查询语句为:1: match(a:department where a.name='法学院')-[e:department_has_student]->(b:student) return b;2: match(a:teacher where name = 'Jack')-[e:teacher_teach_course]->{2,2}(b)->(a) return a.id, b.id as b_id;3: match(a:teacher where a.name = '郑若涵')-[e:relation]->(b) return b order by e.srcId desc limit 80;4: match(a:university) return a;5: match(a:student where a.name='黄建聪')-[e:student_selects_course]->{1,1}(b:course) return b;6: match(a:university) return a order by a.name asc;7: match(a:teacher where a.name='吴建聪')-[e:teacher_teach_course]->(b:course)<-[e2:teacher_teach_course]-(c:teacher) return COUNT(c);"}
{"prompt": "使用这个图:CREATE GRAPH g ( Vertex course ( id int ID, name varchar, credit int, courseHour int, value int ), Vertex teacher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex student ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, size int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Edge department_has_teacher ( srcId int FROM department SOURCE ID, targetId int FROM teacher DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_student ( srcId int FROM department SOURCE ID, targetId int FROM student DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_has_department ( srcId int FROM university SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ), Edge teacher_teach_course ( srcId int FROM teacher SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ), Edge student_selects_course ( srcId int FROM student SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ));生成4个查询语句:1: 请帮我查找类型为部门的点,并根据价值从大到小排列;2: 查找与课程形势与政策有关系的大学, 返回和这些大学有关联的部门的,价值除价值的值;3: 帮我查询标签为student_selects_course,且满足条件targetId的平均值加targetId不是187.80的边;4: 找出所有id为53的university关联的course,和以selects关系关联了这些course的其他student;", "completion": "查询语句为:1: match(a:department) return a order by a.value desc;2: match(a:course where a.name= '形势与政策')-[e]-(b:university)-[e2]-(c:department) return c.value / c.value;3: match(a)-[e:student_selects_course where AVG(e.targetId) + e.targetId <> 187.80]->(b) return e;4: match(a:university where a.id = '53')-[e]-(b:course)<-[e2:student_selects_course]-(c:student) return b,c;"}
{"prompt": "用如下schema的图:CREATE GRAPH g ( Vertex course ( id int ID, name varchar, credit int, courseHour int, value int ), Vertex teacher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex student ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, size int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Edge department_has_teacher ( srcId int FROM department SOURCE ID, targetId int FROM teacher DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_student ( srcId int FROM department SOURCE ID, targetId int FROM student DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_has_department ( srcId int FROM university SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ), Edge teacher_teach_course ( srcId int FROM teacher SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ), Edge student_selects_course ( srcId int FROM student SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ));生成7个查询语句:1: 帮我查询department的三角的环,边标签为department_has_student, 并返回这些点的id;2: 帮我查询和部门有关联的学生节点,并根据其名字,年龄,id分组,返回名字,年龄,id,以及salary的和减7918乘158的最大值;3: 找出全部名为生物学院的点的,height的最大值大于等于198且gender不是96的relation,返回这些relation的name,和边的f0,f1,srcId;4: 查找满足条件价值小于等于171或名字不等于数学学院,且价值为23的节点;5: 找出全部id为165的course关联的department,和以has关系关联了这些department的其他university;6: 帮我查询全部名为法学院的点has的student;7: 帮我查询和department物理学院有关的course,称为X,再帮我查询和这个X有关联的其他teacher,以及和X有关联的course;", "completion": "查询语句为:1: match(a:department)-[e:department_has_student]->(b)-[e2:department_has_student]-(c)->(a) return a,b.id as b_id,c.id as c_id;2: match(a:department)-[e:department_has_student]-(b:student) return b.name, b.age, b.id, MAX((SUM(b.salary) - 7918) * 158) group by b.name, b.age, b.id;3: match(a where a.name='生物学院')-[e:relation]->(b where MAX(b.height) >= 198 and b.gender <> 96) return b.name,e.f0, e.f1, e.srcId;4: match(a where (a.value <= 171 or a.name <> '数学学院') and a.value = 23) return a;5: match(a:course where a.id = '165')-[e]-(b:department)<-[e2:university_has_department]-(c:university) return b,c;6: match(a where a.name='法学院')-[e:department_has_student]->(b:student) return b;7: match(a:department where a.name = '物理学院')-[e]-(b:course), (b:course)-[e2]-(c:teacher),(b:course)-[e3]-(d:course) return a, b, c, d;"}
{"prompt": "以666,614,721,746作为请求点id, 以属性id作为相等条件,帮我查询software Redis的全部标签等于partner的边,并根据targetId升序排列,返回53个", "completion": "with p as (select * from (VALUES(666),(614),(721),(746)) as t(id)) MATCH (a:software WHERE a.id = p.id AND (a.name = 'Redis')) -[e:partner ]->(b) RETURN b ORDER BY e.targetId LIMIT 53"}
{"prompt": "输入请求点id的列表476,508,332,512, 源点的id等于输入表id,请帮我找出标签为company的点,返回182个", "completion": "with p as (select * from (VALUES(476),(508),(332),(512)) as t(id)) MATCH (a:company WHERE a.id = p.id) RETURN a LIMIT 182"}
{"prompt": "输入请求点id的列表198,695,538,833, 以属性id作为相等条件,请帮我查找前36个类型是person_knows_person的边", "completion": "with p as (select * from (VALUES(198),(695),(538),(833)) as t(id)) MATCH (a WHERE a.id = p.id) -[e:person_knows_person ]->(b) RETURN e LIMIT 36"}
{"prompt": "输入请求点id的列表185,580,540,790, 以属性id作为相等条件,查找全部id为92的software关联的software,和以creates关系关联了这些software的其他company", "completion": "with p as (select * from (VALUES(185),(580),(540),(790)) as t(id)) MATCH (a:software WHERE a.id = p.id AND (a.id = '92')) -[e ]-(b:software) <-[e2:company_creates_software ]-(c:company) RETURN b, c "}
{"prompt": "以('male',35,150),('famale',6,173),('male',58,197)作为请求表数据,属性分别为gender,id,height, 源点的height等于输入表height,查询和person有关联的company节点,并根据其scale,name,value分组,返回scale,name,value,以及id减id的求和值", "completion": "with p as (select * from (VALUES('male',35,150),('famale',6,173),('male',58,197)) as t(gender,id,height))MATCH (a:person WHERE a.height = p.height) -[e:person_belong_company ]-(b:company) RETURN b.scale, b.name, b.value, SUM(b.id - b.id) GROUP BY b.scale, b.name, b.value "}
{"prompt": "使用列为id,value,peopleNumber, 数据为(15,322,637)的子查询作为输入表, 以属性id作为相等条件,请帮我查找满足条件身高不为空的节点", "completion": "with p as (select * from (VALUES(15,322,637)) as t(id,value,peopleNumber))MATCH (a WHERE a.id = p.id AND (a.height IS NOT NULL)) RETURN a "}
{"prompt": "以(196,8591,'吴月')作为请求表数据,属性分别为height,salary,name, 源点的salary等于输入表salary,返回所有名为韩思琪的,价值不为空,语言不是go的朋友,返回这些朋友的开源,和边的f1", "completion": "with p as (select * from (VALUES(196,8591,'吴月')) as t(height,salary,name))MATCH (a WHERE a.salary = p.salary AND (a.name = '韩思琪')) -[e:friend ]->(b WHERE b.value IS NOT NULL AND b.lang <> 'go') RETURN b.openSource, e.f1 "}
{"prompt": "以(true,390,'SprintBoot'),(true,153,'Geaflow')作为请求表数据,属性分别为openSource,stars,name, 以属性name作为相等条件,请帮我找出从person张宏出发,经过标签等于person_buy_software的边,走3度或4度到达的软件点", "completion": "with p as (select * from (VALUES(true,390,'SprintBoot'),(true,153,'Geaflow')) as t(openSource,stars,name))MATCH (a:person WHERE a.name = p.name AND (a.name = '张宏')) -[e:person_buy_software ]->{3,4}(b:software) RETURN b "}
{"prompt": "输入请求点id的列表262,235,591,794,588, 源点的id等于输入表id,查询电影少年足球的所有标签等于朋友的边,并根据源点id降序排列,返回123个", "completion": "with p as (select * from (VALUES(262),(235),(591),(794),(588)) as t(id)) MATCH (a:film WHERE a.id = p.id AND (a.name = '少年足球')) -[e:friend ]->(b) RETURN b ORDER BY e.srcId DESC LIMIT 123"}
{"prompt": "以377作为请求点id, 以属性id作为相等条件,帮我查询和comment Comment_430有2跳关系的tag", "completion": "with p as (select * from (VALUES(377)) as t(id)) MATCH (a:comment WHERE a.id = p.id AND (a.name = 'Comment_430')) -[e ]->{2,2}(b:tag) RETURN b "}
{"prompt": "输入请求点id的列表835,855,163,418,295, 源点的id等于输入表id,请帮我找出和电影有关联的标签节点,并根据其名字分组,返回名字,以及id的最大值加69的值", "completion": "with p as (select * from (VALUES(835),(855),(163),(418),(295)) as t(id)) MATCH (a:film WHERE a.id = p.id) -[e:film_has_tag ]-(b:tag) RETURN b.name, MAX(b.id) + 69 GROUP BY b.name "}
{"prompt": "以100,930,534,350,988作为请求点id, 源点的id等于输入表id,请帮我找出film复仇者联盟的所有类型是partner的边,并根据f1从大到小排列,返回169个", "completion": "with p as (select * from (VALUES(100),(930),(534),(350),(988)) as t(id)) MATCH (a:film WHERE a.id = p.id AND (a.name = '复仇者联盟')) -[e:partner ]->(b) RETURN b ORDER BY e.f1 DESC LIMIT 169"}
{"prompt": "使用列为id,name,category, 数据为(33,'星际穿越','科幻'),(23,'我不是药神','动作'),(78,'星际穿越','喜剧'),(69,'功夫','科幻')的子查询作为输入表, 源点的category等于输入表category,给出从cinema好视影院出发,经过类型为cinema_releases_film的边,走2到5度到达的film点", "completion": "with p as (select * from (VALUES(33,'星际穿越','科幻'),(23,'我不是药神','动作'),(78,'星际穿越','喜剧'),(69,'功夫','科幻')) as t(id,name,category))MATCH (a:cinema WHERE a.category = p.category AND (a.name = '好视影院')) -[e:cinema_releases_film ]->{2,5}(b:film) RETURN b "}
{"prompt": "以(169,19,57),(194,92,2),(168,6,12),(180,21,81)作为请求表数据,属性分别为height,id,age, 源点的id等于输入表id,查询和person吴科有关的电影院,再查询和吴科person_likes_comment的其他评论,返回它们", "completion": "with p as (select * from (VALUES(169,19,57),(194,92,2),(168,6,12),(180,21,81)) as t(height,id,age))MATCH (a:person WHERE a.id = p.id AND (a.name = '吴科')) -[e ]-(b:cinema) , (a:person) -[e2:person_likes_comment ]->(c:comment) RETURN a, b, c "}
{"prompt": "输入表的列为category,id,value, 数据为('历史',97,341), 以属性value作为相等条件,返回以拥有关系关联了标签科幻的电影", "completion": "with p as (select * from (VALUES('历史',97,341)) as t(category,id,value))MATCH (a:tag WHERE a.value = p.value AND (a.name = '科幻')) <-[e:film_has_tag ]-(b:film) RETURN b "}
{"prompt": "使用列为name,size,id, 数据为('横店影院',501,4)的子查询作为输入表, 源点的name等于输入表name,请帮我找出以观看关系关联了电影西虹市首富的person", "completion": "with p as (select * from (VALUES('横店影院',501,4)) as t(name,size,id))MATCH (a:film WHERE a.name = p.name AND (a.name = '西虹市首富')) <-[e:person_watch_film ]-(b:person) RETURN b "}
{"prompt": "输入请求点id的列表167, 源点的id等于输入表id,查询前101个满足条件id不是75的作家", "completion": "with p as (select * from (VALUES(167)) as t(id)) MATCH (a:author WHERE a.id = p.id AND (a.id <> 75)) RETURN a LIMIT 101"}
{"prompt": "输入请求点id的列表729,480,63,148, 源点的id等于输入表id,返回源点薪资为空,边标签为author_write_book,且时间戳不等于2007年09月25日或源点id不为空或时间戳不等于2027年04月26日的边,返回这些边的目标点id对22取余的值", "completion": "with p as (select * from (VALUES(729),(480),(63),(148)) as t(id)) MATCH (a WHERE a.id = p.id AND (a.salary IS NULL)) -[e:author_write_book WHERE e.timeStamp <> '2007-09-25' OR e.srcId IS NOT NULL OR e.timeStamp <> '2027-04-26' ]->(b) RETURN e.targetId % 22 "}
{"prompt": "输入请求点id的列表871,318, 以属性id作为相等条件,查找与名为java程序设计和少年闰土的点共同关联的,标签为书的节点", "completion": "with p as (select * from (VALUES(871),(318)) as t(id)) MATCH (a WHERE a.id = p.id AND (a.name = 'java程序设计')) -[e:relates ]->(b:book) <-[e2:relates ]-(c WHERE c.name = '少年闰土') RETURN b "}
{"prompt": "输入请求点id的列表433,383, 以属性id作为相等条件,查找和编辑孙若涵有关的作家,再查找和孙若涵publisher_publish_book的其他书,返回它们", "completion": "with p as (select * from (VALUES(433),(383)) as t(id)) MATCH (a:publisher WHERE a.id = p.id AND (a.name = '孙若涵')) -[e ]-(b:author) , (a:publisher) -[e2:publisher_publish_book ]->(c:book) RETURN a, b, c "}
{"prompt": "输入表的列为age,id,salary, 数据为(27,82,2051),(41,43,4156),(23,72,5350), 以属性salary作为相等条件,查询与publisher有关系的reader节点,且reader节点的age小于73,并返回这些点的height对157取余的最大值,以及age除97的值", "completion": "with p as (select * from (VALUES(27,82,2051),(41,43,4156),(23,72,5350)) as t(age,id,salary))MATCH (a:publisher WHERE a.salary = p.salary) -[e ]->(b:reader WHERE b.age < 73) RETURN MAX(b.height % 157), b.age / 97 "}
{"prompt": "输入表的列为id,height,gender, 数据为(33,186,'male'), 源点的gender等于输入表gender,请帮我查找前115个满足条件height小于193,height小于等于155的publisher", "completion": "with p as (select * from (VALUES(33,186,'male')) as t(id,height,gender))MATCH (a:publisher WHERE a.gender = p.gender AND (a.height < 193 AND a.height <= 155)) RETURN a LIMIT 115"}
{"prompt": "使用列为age,id,gender, 数据为(64,72,'male')的子查询作为输入表, 源点的gender等于输入表gender,帮我查询标签为reader_likes_book,以及满足条件f0乘849大于109.18或srcId不为空,且f1不是false的边", "completion": "with p as (select * from (VALUES(64,72,'male')) as t(age,id,gender))MATCH (a WHERE a.gender = p.gender) -[e:reader_likes_book WHERE (e.f0 * 849 > 109.18 OR e.srcId IS NOT NULL) AND e.f1 <> FALSE ]->(b) RETURN e "}
{"prompt": "以(172,77,'male'),(192,6,'male'),(189,73,'male'),(154,54,'male')作为请求表数据,属性分别为height,id,gender, 以属性height作为相等条件,返回77个id在43到84之间且名字不是周建国的编辑,根据名字从大到小排列", "completion": "with p as (select * from (VALUES(172,77,'male'),(192,6,'male'),(189,73,'male'),(154,54,'male')) as t(height,id,gender))MATCH (a:publisher WHERE a.height = p.height AND (a.id BETWEEN ASYMMETRIC 43 AND 84 AND a.name <> '周建国')) RETURN a ORDER BY a.name DESC LIMIT 77"}
{"prompt": "以70,724,977,901,155作为请求点id, 以属性id作为相等条件,请帮我找出源点标签为university,边标签为university_cooperate_company的边,返回这些边的targetId除119的值,和targetId除82的求和值", "completion": "with p as (select * from (VALUES(70),(724),(977),(901),(155)) as t(id)) MATCH (a:university WHERE a.id = p.id) -[e:university_cooperate_company ]->(b) RETURN e.targetId / 119, SUM(e.targetId / 82) "}
{"prompt": "以587,234,425,733作为请求点id, 源点的id等于输入表id,查询id为196的点的name", "completion": "with p as (select * from (VALUES(587),(234),(425),(733)) as t(id)) MATCH (a WHERE a.id = p.id AND (a.id = '196')) RETURN a.name "}
{"prompt": "以529,767作为请求点id, 源点的id等于输入表id,找出与名为巴黎和北京的点共同包含的,类型是大学的节点", "completion": "with p as (select * from (VALUES(529),(767)) as t(id)) MATCH (a WHERE a.id = p.id AND (a.name = '巴黎')) -[e:city_contain_university ]->(b:university) <-[e2:city_contain_university ]-(c WHERE c.name = '北京') RETURN b "}
{"prompt": "以109,673,306,844,191作为请求点id, 以属性id作为相等条件,返回类型为company的点", "completion": "with p as (select * from (VALUES(109),(673),(306),(844),(191)) as t(id)) MATCH (a:company WHERE a.id = p.id) RETURN a "}
{"prompt": "使用列为name,level,value, 数据为('四川大学',1,142),('北京大学',3,952),('中国科技大学',4,691),('四川大学',1,161)的子查询作为输入表, 源点的name等于输入表name,查找168个名为伦敦的点contain的label为company的节点,且节点name不等于阿里且value不为空", "completion": "with p as (select * from (VALUES('四川大学',1,142),('北京大学',3,952),('中国科技大学',4,691),('四川大学',1,161)) as t(name,level,value))MATCH (a WHERE a.name = p.name AND (a.name = '伦敦')) -[e:city_contain_company ]->(b:company WHERE b.name <> '阿里' AND b.value IS NOT NULL) RETURN b LIMIT 168"}
{"prompt": "以(12,556,3)作为请求表数据,属性分别为id,value,level, 源点的id等于输入表id,给出和公司腾讯有2到4跳关系的大学", "completion": "with p as (select * from (VALUES(12,556,3)) as t(id,value,level))MATCH (a:company WHERE a.id = p.id AND (a.name = '腾讯')) -[e ]->{2,4}(b:university) RETURN b "}
{"prompt": "输入表的列为scale,id,peopleNumber, 数据为('small',86,533), 以属性scale作为相等条件,给出全部名为华中科技大学的点的,peopleNumber在2226到7204之间的friend,返回这些friend的id,和边的srcId,f0,targetId", "completion": "with p as (select * from (VALUES('small',86,533)) as t(scale,id,peopleNumber))MATCH (a WHERE a.scale = p.scale AND (a.name = '华中科技大学')) -[e:friend ]->(b WHERE b.peopleNumber BETWEEN ASYMMETRIC 2226 AND 7204) RETURN b.id, e.srcId, e.f0, e.targetId "}
{"prompt": "以('浙江大学',3,99)作为请求表数据,属性分别为name,level,id, 源点的level等于输入表level,查找大学以价值,id分组的价值, 根据价值升序排序", "completion": "with p as (select * from (VALUES('浙江大学',3,99)) as t(name,level,id))MATCH (a:university WHERE a.level = p.level) RETURN a.value GROUP BY a.value, a.id ORDER BY a.value "}
{"prompt": "以979,558,746,250,209作为请求点id, 源点的id等于输入表id,帮我查询名为孙强的seller,以及与其有关的goods,并返回孙强的name和这些goods的sellerNumber", "completion": "with p as (select * from (VALUES(979),(558),(746),(250),(209)) as t(id)) MATCH (a:seller WHERE a.id = p.id AND (name = '孙强')) -[e ]-(b:goods) RETURN a.name, b.sellerNumber "}
{"prompt": "以15,314,952作为请求点id, 源点的id等于输入表id,查询name不等于何科的buyer cancel的orders的名称,以及这些orders contain的goods的名称", "completion": "with p as (select * from (VALUES(15),(314),(952)) as t(id)) MATCH (a:buyer WHERE a.id = p.id AND (a.name <> '何科')) -[e:buyer_cancel_orders ]->(b:orders) -[e2:orders_contain_goods ]->(c:goods) RETURN b.name AS b_name, c.name AS c_name "}
{"prompt": "以806作为请求点id, 以属性id作为相等条件,请帮我找出和buyer有关联的goods节点,并根据其category,name,sellerNumber分组,返回category,name,sellerNumber,以及price除2933.38的最小值", "completion": "with p as (select * from (VALUES(806)) as t(id)) MATCH (a:buyer WHERE a.id = p.id) -[e:buyer_look_goods ]-(b:goods) RETURN b.category, b.name, b.sellerNumber, MIN(b.price / 2933.38) GROUP BY b.category, b.name, b.sellerNumber "}
{"prompt": "输入请求点id的列表327,221,891, 以属性id作为相等条件,查询从卖家郑建聪出发,经过标签为seller_has_goods的边,走1度到达的商品点", "completion": "with p as (select * from (VALUES(327),(221),(891)) as t(id)) MATCH (a:seller WHERE a.id = p.id AND (a.name = '郑建聪')) -[e:seller_has_goods ]->(b:goods) RETURN b "}
{"prompt": "以(9061,'male',86)作为请求表数据,属性分别为salary,gender,id, 以属性gender作为相等条件,查找和seller王轩有关的buyer,再查找和王轩seller_has_goods的其他goods,返回它们", "completion": "with p as (select * from (VALUES(9061,'male',86)) as t(salary,gender,id))MATCH (a:seller WHERE a.gender = p.gender AND (a.name = '王轩')) -[e ]-(b:buyer) , (a:seller) -[e2:seller_has_goods ]->(c:goods) RETURN a, b, c "}
{"prompt": "输入表的列为id,price,value, 数据为(12,3211.23,459),(9,1034.30,582), 以属性id作为相等条件,帮我查询buyer以gender,height,age分组的id, 根据id从大到小排序", "completion": "with p as (select * from (VALUES(12,3211.23,459),(9,1034.30,582)) as t(id,price,value))MATCH (a:buyer WHERE a.id = p.id) RETURN a.id GROUP BY a.gender, a.height, a.age ORDER BY a.id DESC "}
{"prompt": "以('male',3634,21),('male',1597,87)作为请求表数据,属性分别为gender,salary,id, 源点的id等于输入表id,查找类型为buyer,名为徐建聪的点,返回这些点的gender,name", "completion": "with p as (select * from (VALUES('male',3634,21),('male',1597,87)) as t(gender,salary,id))MATCH (a:buyer WHERE a.id = p.id AND (a.name = '徐建聪')) RETURN a.gender, a.name "}
{"prompt": "使用列为category,value,name, 数据为('家具',476,'桌子')的子查询作为输入表, 源点的value等于输入表value,找出与buyer韩轩和王建聪都存在buyer_cancel_orders关系的点", "completion": "with p as (select * from (VALUES('家具',476,'桌子')) as t(category,value,name))MATCH (a:buyer WHERE a.value = p.value AND (a.name = '韩轩')) -[e:buyer_cancel_orders ]->(b) <-[e2:buyer_cancel_orders ]-(c:buyer WHERE c.name = '王建聪') RETURN b "}
{"prompt": "以607作为请求点id, 源点的id等于输入表id,查询188个名为TheShy的点还款的标签为贷款的节点,且其权重的个数小于等于859", "completion": "with p as (select * from (VALUES(607)) as t(id)) MATCH (a WHERE a.id = p.id AND (a.name = 'TheShy')) -[e:account_repay_loan ]->(b:loan WHERE COUNT(b.weight) <= 859) RETURN b LIMIT 188"}
{"prompt": "以587,933,143作为请求点id, 源点的id等于输入表id,返回被person杜轩投资的公司", "completion": "with p as (select * from (VALUES(587),(933),(143)) as t(id)) MATCH (a:company WHERE a.id = p.id) <-[e:person_invest_company ]-(b:person WHERE b.name = '杜轩') RETURN a, b "}
{"prompt": "以280,813,911,481,33作为请求点id, 以属性id作为相等条件,查询年龄不是42的person拥有的账号的名称,以及这些账号 转账的账号的名称", "completion": "with p as (select * from (VALUES(280),(813),(911),(481),(33)) as t(id)) MATCH (a:person WHERE a.id = p.id AND (a.age <> 42)) -[e:person_own_account ]->(b:account) -[e2:account_transfer_account ]->(c:account) RETURN b.name AS b_name, c.name AS c_name "}
{"prompt": "输入请求点id的列表505,434,346,907, 以属性id作为相等条件,找出被company腾讯apply的loan", "completion": "with p as (select * from (VALUES(505),(434),(346),(907)) as t(id)) MATCH (a:loan WHERE a.id = p.id) <-[e:company_apply_loan ]-(b:company WHERE b.name = '腾讯') RETURN a, b "}
{"prompt": "输入表的列为gender,id,height, 数据为('male',13,167),('famale',56,190), 源点的height等于输入表height,查找与账号有关系的账号节点,且账号节点的是否冻结大于999,并返回这些点的id除74的值,以及价值减26的值", "completion": "with p as (select * from (VALUES('male',13,167),('famale',56,190)) as t(gender,id,height))MATCH (a:account WHERE a.height = p.height) -[e ]->(b:account WHERE b.isBlock > 999) RETURN b.id / 74, b.value - 26 "}
{"prompt": "使用列为id,lastLoginTime,createTime, 数据为(43,2015-11-08,2034-05-10),(15,2018-01-29,2007-02-23),(97,2015-08-08,2003-07-08),(39,2014-07-04,2008-11-19)的子查询作为输入表, 以属性id作为相等条件,找出与公司微软有关,且与账号Light有关系的贷款节点", "completion": "with p as (select * from (VALUES(43,2015-11-08,2034-05-10),(15,2018-01-29,2007-02-23),(97,2015-08-08,2003-07-08),(39,2014-07-04,2008-11-19)) as t(id,lastLoginTime,createTime))MATCH (a:company WHERE a.id = p.id AND (a.name = '微软')) -[e:company_apply_loan ]-(b:loan) -[e2:loan_deposit_account ]-(c:account WHERE c.name = 'Light') RETURN b "}
{"prompt": "使用列为age,height,gender, 数据为(24,167,'male'),(2,166,'male'),(57,153,'famale')的子查询作为输入表, 以属性gender作为相等条件,返回与账号有关系的公司节点,且公司节点的人数大于等于822,并返回这些点的人数减886的个数,以及价值减469加260的值", "completion": "with p as (select * from (VALUES(24,167,'male'),(2,166,'male'),(57,153,'famale')) as t(age,height,gender))MATCH (a:account WHERE a.gender = p.gender) -[e ]->(b:company WHERE b.peopleNumber >= 822) RETURN COUNT(b.peopleNumber - 886), b.value - 469 + 260 "}
{"prompt": "输入表的列为lastLoginTime,name,value, 数据为(2008-09-07,'LX001',918),(2028-10-31,'XXD',646), 以属性lastLoginTime作为相等条件,给出以apply关系关联了loan defaultName的company", "completion": "with p as (select * from (VALUES(2008-09-07,'LX001',918),(2028-10-31,'XXD',646)) as t(lastLoginTime,name,value))MATCH (a:loan WHERE a.lastLoginTime = p.lastLoginTime AND (a.name = 'defaultName')) <-[e:company_apply_loan ]-(b:company) RETURN b "}
{"prompt": "输入请求点id的列表157,97,369, 以属性id作为相等条件,帮我查询与名为徐强和孙国强的点共同creates的,标签等于prescription的节点", "completion": "with p as (select * from (VALUES(157),(97),(369)) as t(id)) MATCH (a WHERE a.id = p.id AND (a.name = '徐强')) -[e:doctor_creates_prescription ]->(b:prescription) <-[e2:doctor_creates_prescription ]-(c WHERE c.name = '孙国强') RETURN b "}
{"prompt": "以528作为请求点id, 源点的id等于输入表id,请帮我查找类型是prescription,名为Prescription_139的点,返回这些点的createTime,id,weight", "completion": "with p as (select * from (VALUES(528)) as t(id)) MATCH (a:prescription WHERE a.id = p.id AND (a.name = 'Prescription_139')) RETURN a.createTime, a.id, a.weight "}
{"prompt": "输入请求点id的列表387,490,343,767,252, 以属性id作为相等条件,返回和名为Prescription_145的处方有伙伴关系,或有伙伴的伙伴关系的药品", "completion": "with p as (select * from (VALUES(387),(490),(343),(767),(252)) as t(id)) MATCH (a:prescription WHERE a.id = p.id AND (n.name = Prescription_145)) -[e:partner ]->{1,2}(b:medicine) RETURN b "}
{"prompt": "以972,432作为请求点id, 以属性id作为相等条件,查询源点类型是医生,目标点类型是病人,类型是doctor_diagnose_patient的边", "completion": "with p as (select * from (VALUES(972),(432)) as t(id)) MATCH (a:doctor WHERE a.id = p.id) -[e:doctor_diagnose_patient ]->(b:patient) RETURN e "}
{"prompt": "输入表的列为price,id,name, 数据为(118,25,'阿司匹林'),(112,55,'999感冒灵'),(50,69,'阿司匹林'),(209,51,'布洛芬'), 以属性name作为相等条件,请帮我找出id为153的patient关联的prescription,和以creates关系关联了这些prescription的其他doctor", "completion": "with p as (select * from (VALUES(118,25,'阿司匹林'),(112,55,'999感冒灵'),(50,69,'阿司匹林'),(209,51,'布洛芬')) as t(price,id,name))MATCH (a:patient WHERE a.name = p.name AND (a.id = '153')) -[e ]-(b:prescription) <-[e2:doctor_creates_prescription ]-(c:doctor) RETURN b, c "}
{"prompt": "输入表的列为height,salary,id, 数据为(186,3580,21),(182,6539,66),(159,2926,22),(188,7477,12), 源点的height等于输入表height,请帮我找出病人接受的处方,返回其源点的身高除身高的值,以及目标点的weight的平均值减263的值", "completion": "with p as (select * from (VALUES(186,3580,21),(182,6539,66),(159,2926,22),(188,7477,12)) as t(height,salary,id))MATCH (a:patient WHERE a.height = p.height) -[e:patient_accept_prescription ]->(b:prescription) RETURN a.height / a.height, AVG(b.weight) - 263 "}
{"prompt": "输入表的列为id,weight,name, 数据为(19,551,'Prescription_257'), 源点的id等于输入表id,请帮我查找全部名为徐思思的点属于的部门", "completion": "with p as (select * from (VALUES(19,551,'Prescription_257')) as t(id,weight,name))MATCH (a WHERE a.id = p.id AND (a.name = '徐思思')) -[e:doctor_belong_department ]->(b:department) RETURN b "}
{"prompt": "使用列为address,weight,name, 数据为('B座',66,'放射科'),('西区',394,'眼科')的子查询作为输入表, 源点的name等于输入表name,给出53个名为眼科的点has的label为doctor的节点,且其age大于等于7或name等于韩轩", "completion": "with p as (select * from (VALUES('B座',66,'放射科'),('西区',394,'眼科')) as t(address,weight,name))MATCH (a WHERE a.name = p.name AND (a.name = '眼科')) -[e:department_has_doctor ]->(b:doctor WHERE b.age >= 7 OR b.name = '韩轩') RETURN b LIMIT 53"}
{"prompt": "输入请求点id的列表575,949,301,910, 以属性id作为相等条件,请帮我找出和名为李红的person有friend关系,或有friend的friend关系的person", "completion": "with p as (select * from (VALUES(575),(949),(301),(910)) as t(id)) MATCH (a:person WHERE a.id = p.id AND (n.name = 李红)) -[e:friend ]->{1,2}(b:person) RETURN b "}
{"prompt": "输入请求点id的列表427,196, 以属性id作为相等条件,给出标签为person的点,返回92个", "completion": "with p as (select * from (VALUES(427),(196)) as t(id)) MATCH (a:person WHERE a.id = p.id) RETURN a LIMIT 92"}
{"prompt": "输入请求点id的列表194,986,521, 源点的id等于输入表id,查找person以salary,name分组的id, 根据id升序排序", "completion": "with p as (select * from (VALUES(194),(986),(521)) as t(id)) MATCH (a:person WHERE a.id = p.id) RETURN a.id GROUP BY a.salary, a.name ORDER BY a.id "}
{"prompt": "以514,670,185,780作为请求点id, 源点的id等于输入表id,请帮我找出类型是person_pay_person,且满足条件f0小于等于867的边", "completion": "with p as (select * from (VALUES(514),(670),(185),(780)) as t(id)) MATCH (a WHERE a.id = p.id) -[e:person_pay_person WHERE e.f0 <= 867 ]->(b) RETURN e "}
{"prompt": "使用列为age,name,id, 数据为(42,'黄轩',65),(63,'赵国强',3),(34,'徐轩',37)的子查询作为输入表, 以属性age作为相等条件,给出所有名为kate的,gender不等于famale且gender是male的relation,返回这些relation的id,和边的f0,targetId", "completion": "with p as (select * from (VALUES(42,'黄轩',65),(63,'赵国强',3),(34,'徐轩',37)) as t(age,name,id))MATCH (a WHERE a.age = p.age AND (a.name = 'kate')) -[e:relation ]->(b WHERE b.gender <> 'famale' AND b.gender = 'male') RETURN b.id, e.f0, e.targetId "}
{"prompt": "输入表的列为age,name,id, 数据为(38,'周雪',53),(76,'陈红',46), 以属性name作为相等条件,查询所有名为赵建聪的,gender不是famale,salary为空的relation,返回这些relation的height,和边的f0,weight,f1", "completion": "with p as (select * from (VALUES(38,'周雪',53),(76,'陈红',46)) as t(age,name,id))MATCH (a WHERE a.name = p.name AND (a.name = '赵建聪')) -[e:relation ]->(b WHERE b.gender <> 'famale' AND b.salary IS NULL) RETURN b.height, e.f0, e.weight, e.f1 "}
{"prompt": "输入表的列为age,name,id, 数据为(82,'马思思',98),(23,'黄思琪',10),(53,'李宏',6),(92,'杜强',75), 以属性id作为相等条件,找出89个与周轩和郑宏都存在关系的person节点", "completion": "with p as (select * from (VALUES(82,'马思思',98),(23,'黄思琪',10),(53,'李宏',6),(92,'杜强',75)) as t(age,name,id))MATCH (a WHERE a.id = p.id AND (a.name = '周轩')) -[e ]->(b:person) <-[e2 ]-(c WHERE c.name = '郑宏') RETURN b LIMIT 89"}
{"prompt": "以(4466,'male',163),(6760,'famale',160)作为请求表数据,属性分别为salary,gender,height, 以属性height作为相等条件,给出从person郑轩出发,经过标签为person_pay_person的边,走3跳到达的person点", "completion": "with p as (select * from (VALUES(4466,'male',163),(6760,'famale',160)) as t(salary,gender,height))MATCH (a:person WHERE a.height = p.height AND (a.name = '郑轩')) -[e:person_pay_person ]->{3,3}(b:person) RETURN b "}
{"prompt": "输入请求点id的列表827,346,666, 以属性id作为相等条件,返回user马思琪的所有类型为partner的边,并根据f0降序排列,返回82个", "completion": "with p as (select * from (VALUES(827),(346),(666)) as t(id)) MATCH (a:user WHERE a.id = p.id AND (a.name = '马思琪')) -[e:partner ]->(b) RETURN b ORDER BY e.f0 DESC LIMIT 82"}
{"prompt": "以589作为请求点id, 以属性id作为相等条件,请帮我查找名为Prescription_246的prescription,以及与其有关的prescription,并返回Prescription_246的id和这些prescription的name", "completion": "with p as (select * from (VALUES(589)) as t(id)) MATCH (a:prescription WHERE a.id = p.id AND (name = 'Prescription_246')) -[e ]-(b:prescription) RETURN a.id, b.name "}
{"prompt": "以(191,31,7132)作为请求表数据,属性分别为height,id,salary, 以属性height作为相等条件,请帮我找出与用户孙轩有user_creates_issue关系的1跳的环", "completion": "with p as (select * from (VALUES(191,31,7132)) as t(height,id,salary))MATCH (a:user WHERE a.height = p.height AND (name = '孙轩')) -[e:user_creates_issue ]->{0,0}(b) ->(a) RETURN a.id, b.id AS b_id "}
{"prompt": "使用列为gender,salary,name, 数据为('male',6562,'郑伟')的子查询作为输入表, 以属性name作为相等条件,请帮我查找名为吴建聪和马强的,类型是user的点公共的partner节点的名单", "completion": "with p as (select * from (VALUES('male',6562,'郑伟')) as t(gender,salary,name))MATCH (a:user WHERE a.name = p.name AND (a.name = '吴建聪')) -[e:partner ]->(b) <-[e2:partner ]-(c:user WHERE c.name = '马强') RETURN b.name "}
{"prompt": "输入请求点id的列表821,44,145, 源点的id等于输入表id,返回以relates关系关联了person王雪的person", "completion": "with p as (select * from (VALUES(821),(44),(145)) as t(id)) MATCH (a:person WHERE a.id = p.id AND (a.name = '王雪')) <-[e:relates ]-(b:person) RETURN b "}
{"prompt": "以35,842作为请求点id, 以属性id作为相等条件,返回被person何国强认识的person", "completion": "with p as (select * from (VALUES(35),(842)) as t(id)) MATCH (a:person WHERE a.id = p.id) <-[e:knows ]-(b:person WHERE b.name = '何国强') RETURN a, b "}
{"prompt": "以680,744,605作为请求点id, 源点的id等于输入表id,帮我查询被person吴科关联的person", "completion": "with p as (select * from (VALUES(680),(744),(605)) as t(id)) MATCH (a:person WHERE a.id = p.id) <-[e:relates ]-(b:person WHERE b.name = '吴科') RETURN a, b "}
{"prompt": "输入请求点id的列表121,44,833,693,80, 以属性id作为相等条件,查询所有person以salary,age,id分组的salary, 根据salary降序排序", "completion": "with p as (select * from (VALUES(121),(44),(833),(693),(80)) as t(id)) MATCH (a:person WHERE a.id = p.id) RETURN a.salary GROUP BY a.salary, a.age, a.id ORDER BY a.salary DESC "}
{"prompt": "输入表的列为age,salary,name, 数据为(73,1472,'Alice'),(60,8837,'徐宏'),(46,7469,'张宏'),(34,4095,'韩思思'), 源点的age等于输入表age,帮我查询所有和person周雪有关系的person节点,返回这些点的height", "completion": "with p as (select * from (VALUES(73,1472,'Alice'),(60,8837,'徐宏'),(46,7469,'张宏'),(34,4095,'韩思思')) as t(age,salary,name))MATCH (a:person WHERE a.age = p.age AND (a.name = '周雪')) -[e ]-(b:person) RETURN b.height "}
{"prompt": "以(155,51,5761),(190,48,9802)作为请求表数据,属性分别为height,age,salary, 源点的age等于输入表age,请帮我找出和person有关联的person节点,并根据其身高,薪资分组,返回身高,薪资,以及薪资对薪资取余对58取余减171的最小值", "completion": "with p as (select * from (VALUES(155,51,5761),(190,48,9802)) as t(height,age,salary))MATCH (a:person WHERE a.age = p.age) -[e:person_friend_person ]-(b:person) RETURN b.height, b.salary, MIN(b.salary % b.salary % 58 - 171) GROUP BY b.height, b.salary "}
{"prompt": "使用列为age,height,salary, 数据为(85,176,6669),(37,165,7623),(25,177,7076),(10,172,9512)的子查询作为输入表, 源点的age等于输入表age,查询类型为person的全部点,并根据名字从小到大排列", "completion": "with p as (select * from (VALUES(85,176,6669),(37,165,7623),(25,177,7076),(10,172,9512)) as t(age,height,salary))MATCH (a:person WHERE a.age = p.age) RETURN a ORDER BY a.name "}
{"prompt": "以(40,'吴强','famale')作为请求表数据,属性分别为id,name,gender, 以属性id作为相等条件,给出118个与黄思思和郑宏都存在关系的person节点", "completion": "with p as (select * from (VALUES(40,'吴强','famale')) as t(id,name,gender))MATCH (a WHERE a.id = p.id AND (a.name = '黄思思')) -[e ]->(b:person) <-[e2 ]-(c WHERE c.name = '郑宏') RETURN b LIMIT 118"}
{"prompt": "以218作为请求点id, 以属性id作为相等条件,请帮我找出和名为Post_215的帖子有伙伴关系,或有伙伴的伙伴关系的标签", "completion": "with p as (select * from (VALUES(218)) as t(id)) MATCH (a:post WHERE a.id = p.id AND (n.name = Post_215)) -[e:partner ]->{1,2}(b:tag) RETURN b "}
{"prompt": "输入请求点id的列表143,244,109, 源点的id等于输入表id,请帮我找出全部源点类型是用户,边类型是user_likes_post,且满足条件时间戳不是2004年09月05日,时间戳不等于2025年05月30日,或时间戳不是2006年06月09日的边", "completion": "with p as (select * from (VALUES(143),(244),(109)) as t(id)) MATCH (a:user WHERE a.id = p.id) -[e:user_likes_post WHERE e.timeStamp <> '2004-09-05' AND e.timeStamp <> '2025-05-30' OR e.timeStamp <> '2006-06-09' ]->(b) RETURN e "}
{"prompt": "输入请求点id的列表967,665,774,260,379, 源点的id等于输入表id,请帮我查找标签等于forum_contain_post,以及targetId小于177或weight在108.88到170.81之间,且f1不等于true的边", "completion": "with p as (select * from (VALUES(967),(665),(774),(260),(379)) as t(id)) MATCH (a WHERE a.id = p.id) -[e:forum_contain_post WHERE (e.targetId < 177 OR e.weight BETWEEN ASYMMETRIC 108.88 AND 170.81) AND e.f1 <> TRUE ]->(b) RETURN e "}
{"prompt": "以574,15,831作为请求点id, 以属性id作为相等条件,查找8个与其他和动作都存在关系的论坛节点", "completion": "with p as (select * from (VALUES(574),(15),(831)) as t(id)) MATCH (a WHERE a.id = p.id AND (a.name = '其他')) -[e ]->(b:forum) <-[e2 ]-(c WHERE c.name = '动作') RETURN b LIMIT 8"}
{"prompt": "以(1999-01-25,199,'Japanese'),(2002-08-09,269,'English'),(2004-02-03,421,'Japanese')作为请求表数据,属性分别为createTime,value,lang, 源点的createTime等于输入表createTime,帮我查询名为Tom和赵思琪的,类型为user的点公共的partner节点的名单", "completion": "with p as (select * from (VALUES(1999-01-25,199,'Japanese'),(2002-08-09,269,'English'),(2004-02-03,421,'Japanese')) as t(createTime,value,lang))MATCH (a:user WHERE a.createTime = p.createTime AND (a.name = 'Tom')) -[e:partner ]->(b) <-[e2:partner ]-(c:user WHERE c.name = '赵思琪') RETURN b.name "}
{"prompt": "使用列为value,peopleNumber,name, 数据为(871,704,'推特')的子查询作为输入表, 以属性name作为相等条件,请帮我找出和user有关联的post节点,并根据其lang分组,返回lang,以及wordCount的最小值乘585对id取余的值", "completion": "with p as (select * from (VALUES(871,704,'推特')) as t(value,peopleNumber,name))MATCH (a:user WHERE a.name = p.name) -[e:user_likes_post ]-(b:post) RETURN b.lang, MIN(b.wordCount) * 585 % b.id GROUP BY b.lang "}
{"prompt": "输入表的列为createTime,value,name, 数据为(2016-05-11,497,'Post_450'),(2032-11-21,381,'Post_156'),(2003-06-16,101,'Post_285'),(2023-11-03,369,'Post_434'), 以属性value作为相等条件,查询帖子Post_336的全部类型为伙伴的边,并根据源点id升序排列,返回118个", "completion": "with p as (select * from (VALUES(2016-05-11,497,'Post_450'),(2032-11-21,381,'Post_156'),(2003-06-16,101,'Post_285'),(2023-11-03,369,'Post_434')) as t(createTime,value,name))MATCH (a:post WHERE a.value = p.value AND (a.name = 'Post_336')) -[e:partner ]->(b) RETURN b ORDER BY e.srcId LIMIT 118"}
{"prompt": "以(142.29,true,82),(130.48,true,87),(105.98,true,101)作为请求表数据,属性分别为weight,f1,srcId, 源点的weight等于输入表weight,返回前15个gender不是famale的person", "completion": "with p as (select * from (VALUES(142.29,true,82),(130.48,true,87),(105.98,true,101)) as t(weight,f1,srcId))MATCH (a:person WHERE a.weight = p.weight AND (a.gender <> 'famale')) RETURN a LIMIT 15"}
{"prompt": "以357,265,613作为请求点id, 以属性id作为相等条件,请帮我找出部门拥有的教师,返回其源点的价值除958除37的求和值,以及目标点的age的求和值除年龄乘薪资的值", "completion": "with p as (select * from (VALUES(357),(265),(613)) as t(id)) MATCH (a:department WHERE a.id = p.id) -[e:department_has_teacher ]->(b:teacher) RETURN SUM(a.value / 958 / 37), SUM(b.age) / b.age * b.salary "}
{"prompt": "输入请求点id的列表625,736,781,146,784, 源点的id等于输入表id,查找teacher以gender,age,id分组的id, 根据id降序排序", "completion": "with p as (select * from (VALUES(625),(736),(781),(146),(784)) as t(id)) MATCH (a:teacher WHERE a.id = p.id) RETURN a.id GROUP BY a.gender, a.age, a.id ORDER BY a.id DESC "}
{"prompt": "输入请求点id的列表77,946,20,636, 源点的id等于输入表id,请帮我查找所有id为107的student关联的department,和以has关系关联了这些department的其他university", "completion": "with p as (select * from (VALUES(77),(946),(20),(636)) as t(id)) MATCH (a:student WHERE a.id = p.id AND (a.id = '107')) -[e ]-(b:department) <-[e2:university_has_department ]-(c:university) RETURN b, c "}
{"prompt": "以681,831,289,391,300作为请求点id, 以属性id作为相等条件,查找所有数学学院的点拥有的学生,然后查找数学学院被拥有的大学,一起返回", "completion": "with p as (select * from (VALUES(681),(831),(289),(391),(300)) as t(id)) MATCH (a WHERE a.id = p.id AND (a.name = '数学学院')) -[e:department_has_student ]->(b:student) , (a WHERE a.name = '数学学院') <-[e2:university_has_department ]-(c:university) RETURN a, b, c "}
{"prompt": "输入表的列为size,name,value, 数据为(63,'计算机学院',89), 以属性name作为相等条件,查找teacher何轩的所有标签等于friend的边,并根据srcId从小到大排列,返回2个", "completion": "with p as (select * from (VALUES(63,'计算机学院',89)) as t(size,name,value))MATCH (a:teacher WHERE a.name = p.name AND (a.name = '何轩')) -[e:friend ]->(b) RETURN b ORDER BY e.srcId LIMIT 2"}
{"prompt": "输入表的列为size,id,name, 数据为(82,67,'土木学院'),(82,96,'法学院'), 以属性size作为相等条件,帮我查询与名为浙江大学和华中科技大学的点共同has的,类型为department的节点", "completion": "with p as (select * from (VALUES(82,67,'土木学院'),(82,96,'法学院')) as t(size,id,name))MATCH (a WHERE a.size = p.size AND (a.name = '浙江大学')) -[e:university_has_department ]->(b:department) <-[e2:university_has_department ]-(c WHERE c.name = '华中科技大学') RETURN b "}
{"prompt": "输入表的列为salary,height,id, 数据为(9475,156,67),(8325,161,58),(9413,199,18),(3137,169,66), 源点的salary等于输入表salary,找出名为文学院和物理学院的,标签为部门的点公共的伙伴节点的名单", "completion": "with p as (select * from (VALUES(9475,156,67),(8325,161,58),(9413,199,18),(3137,169,66)) as t(salary,height,id))MATCH (a:department WHERE a.salary = p.salary AND (a.name = '文学院')) -[e:partner ]->(b) <-[e2:partner ]-(c:department WHERE c.name = '物理学院') RETURN b.name "}
{"prompt": "以(48,197,81),(85,190,86),(60,156,27)作为请求表数据,属性分别为age,height,id, 源点的age等于输入表age,返回全部源点类型为student,边类型为student_selects_course,以及f0不是648或srcId大于等于127的边", "completion": "with p as (select * from (VALUES(48,197,81),(85,190,86),(60,156,27)) as t(age,height,id))MATCH (a:student WHERE a.age = p.age) -[e:student_selects_course WHERE e.f0 <> 648 OR e.srcId >= 127 ]->(b) RETURN e "}
{"prompt": "输入请求点id的列表336,792, 以属性id作为相等条件,给出label为teacher的全部点,并根据age降序排列", "completion": "with p as (select * from (VALUES(336),(792)) as t(id)) MATCH (a:teacher WHERE a.id = p.id) RETURN a ORDER BY a.age DESC "}
{"prompt": "以158作为请求点id, 以属性id作为相等条件,返回121个名为四川大学的点拥有的标签为部门的节点,且其大小小于59或名字不等于文学院", "completion": "with p as (select * from (VALUES(158)) as t(id)) MATCH (a WHERE a.id = p.id AND (a.name = '四川大学')) -[e:university_has_department ]->(b:department WHERE b.size < 59 OR b.name <> '文学院') RETURN b LIMIT 121"}
{"prompt": "输入请求点id的列表128,386, 源点的id等于输入表id,请帮我找出department法学院的全部标签为relation的边,并根据srcId升序排列,返回110个", "completion": "with p as (select * from (VALUES(128),(386)) as t(id)) MATCH (a:department WHERE a.id = p.id AND (a.name = '法学院')) -[e:relation ]->(b) RETURN b ORDER BY e.srcId LIMIT 110"}
{"prompt": "以(91,589,59),(53,296,13),(56,820,81),(51,348,16)作为请求表数据,属性分别为size,value,id, 源点的size等于输入表size,查找teacher以name分组的id, 根据id从小到大排序", "completion": "with p as (select * from (VALUES(91,589,59),(53,296,13),(56,820,81),(51,348,16)) as t(size,value,id))MATCH (a:teacher WHERE a.size = p.size) RETURN a.id GROUP BY a.name ORDER BY a.id "}
{"prompt": "输入表的列为age,height,id, 数据为(75,151,63),(56,197,32), 源点的height等于输入表height,找出从大学重庆大学出发,经过类型是university_has_department的边,走3度到达的部门点", "completion": "with p as (select * from (VALUES(75,151,63),(56,197,32)) as t(age,height,id))MATCH (a:university WHERE a.height = p.height AND (a.name = '重庆大学')) -[e:university_has_department ]->{3,3}(b:department) RETURN b "}
{"prompt": "输入表的列为gender,salary,name, 数据为('male',5589,'郑伟'),('male',3608,'吴建国'), 源点的salary等于输入表salary,帮我查询teacher以name,age分组的salary, 根据salary降序排序", "completion": "with p as (select * from (VALUES('male',5589,'郑伟'),('male',3608,'吴建国')) as t(gender,salary,name))MATCH (a:teacher WHERE a.salary = p.salary) RETURN a.salary GROUP BY a.name, a.age ORDER BY a.salary DESC "}
{"prompt": "以620,512作为请求点id, 以属性id作为相等条件,查询51个价格小于64或字数在350到656之间的书,根据类别升序排列", "completion": "with p as (select * from (VALUES(620),(512)) as t(id)) MATCH (a:book WHERE a.id = p.id AND (a.price < 64 OR a.wordCount BETWEEN ASYMMETRIC 350 AND 656)) RETURN a ORDER BY a.category LIMIT 51"}
{"prompt": "输入请求点id的列表645,696,622,874, 以属性id作为相等条件,返回全部源点类型是reader,边类型是reader_likes_book,以及满足条件f0不为空的边", "completion": "with p as (select * from (VALUES(645),(696),(622),(874)) as t(id)) MATCH (a:reader WHERE a.id = p.id) -[e:reader_likes_book WHERE e.f0 IS NOT NULL ]->(b) RETURN e "}
{"prompt": "以600,562,119作为请求点id, 以属性id作为相等条件,查找author李梅的类型是friend的边,并根据targetId从小到大排列,返回163个", "completion": "with p as (select * from (VALUES(600),(562),(119)) as t(id)) MATCH (a:author WHERE a.id = p.id AND (a.name = '李梅')) -[e:friend ]->(b) RETURN b ORDER BY e.targetId LIMIT 163"}
{"prompt": "输入表的列为category,id,name, 数据为('传记',51,'呐喊'),('文学',18,'呐喊'), 以属性name作为相等条件,请帮我查找名为杜梅的读者", "completion": "with p as (select * from (VALUES('传记',51,'呐喊'),('文学',18,'呐喊')) as t(category,id,name))MATCH (a:reader WHERE a.name = p.name AND (a.name = '杜梅')) RETURN a "}
{"prompt": "输入表的列为id,name,name, 数据为(83,'罪与罚','孤城'),(61,'百年孤独','悲惨世界'),(88,'悲惨世界','呐喊'), 源点的name等于输入表name,请帮我查找与名为何思琪和陈轩的点共同likes的,类型是book的节点", "completion": "with p as (select * from (VALUES(83,'罪与罚','孤城'),(61,'百年孤独','悲惨世界'),(88,'悲惨世界','呐喊')) as t(id,name,name))MATCH (a WHERE a.name = p.name AND (a.name = '何思琪')) -[e:reader_likes_book ]->(b:book) <-[e2:reader_likes_book ]-(c WHERE c.name = '陈轩') RETURN b "}
{"prompt": "输入表的列为gender,id,name, 数据为('male',49,'赵强'),('famale',78,'马宏'),('male',53,'吴红'),('famale',80,'王建国'), 源点的gender等于输入表gender,查询全部名为李科的点publish的book", "completion": "with p as (select * from (VALUES('male',49,'赵强'),('famale',78,'马宏'),('male',53,'吴红'),('famale',80,'王建国')) as t(gender,id,name))MATCH (a WHERE a.gender = p.gender AND (a.name = '李科')) -[e:publisher_publish_book ]->(b:book) RETURN b "}
{"prompt": "以122,650,365,967作为请求点id, 以属性id作为相等条件,请帮我查找名为陈梅的点accept的所有prescription,并对这些点的createTime进行求和", "completion": "with p as (select * from (VALUES(122),(650),(365),(967)) as t(id)) MATCH (a WHERE a.id = p.id AND (a.name = '陈梅')) -[e:patient_accept_prescription ]->(b:prescription) RETURN SUM(b.createTime) "}
{"prompt": "输入请求点id的列表277, 源点的id等于输入表id,查找和处方Prescription_327有关的处方,称为X,再查找和这个X有关联的其他处方,以及和X有关联的药品", "completion": "with p as (select * from (VALUES(277)) as t(id)) MATCH (a:prescription WHERE a.id = p.id AND (a.name = 'Prescription_327')) -[e ]-(b:prescription) , (b:prescription) -[e2 ]-(c:prescription) , (b:prescription) -[e3 ]-(d:medicine) RETURN a, b, c, d "}
{"prompt": "输入请求点id的列表186, 以属性id作为相等条件,帮我查询被处方Prescription_236包含的药品", "completion": "with p as (select * from (VALUES(186)) as t(id)) MATCH (a:medicine WHERE a.id = p.id) <-[e:prescription_contain_medicine ]-(b:prescription WHERE b.name = 'Prescription_236') RETURN a, b "}
{"prompt": "使用列为height,gender,id, 数据为(178,'male',88)的子查询作为输入表, 源点的gender等于输入表gender,给出id为36的department有关的doctor的friend, 再给出和doctor有关系的relation", "completion": "with p as (select * from (VALUES(178,'male',88)) as t(height,gender,id))MATCH (a:department WHERE a.gender = p.gender AND (id = '36')) -[e ]-(b:doctor) -[e2:friend ]->(c) , (b:doctor) -[e3:relation ]->(d) RETURN a, b, c, d "}
{"prompt": "输入表的列为gender,height,age, 数据为('famale',157,65), 源点的age等于输入表age,计算所有部门的id除id的值", "completion": "with p as (select * from (VALUES('famale',157,65)) as t(gender,height,age))MATCH (a:department WHERE a.age = p.age) RETURN a.id / a.id "}
{"prompt": "以('散利痛',185,13)作为请求表数据,属性分别为name,price,id, 以属性name作为相等条件,请帮我查找和doctor有关联的patient节点,并根据其name分组,返回name,以及id加id的值", "completion": "with p as (select * from (VALUES('散利痛',185,13)) as t(name,price,id))MATCH (a:doctor WHERE a.name = p.name) -[e:doctor_diagnose_patient ]-(b:patient) RETURN b.name, b.id + b.id GROUP BY b.name "}
{"prompt": "以295,283作为请求点id, 源点的id等于输入表id,给出全部和论坛知乎有关系的标签节点,返回这些点的id,名字,价值", "completion": "with p as (select * from (VALUES(295),(283)) as t(id)) MATCH (a:forum WHERE a.id = p.id AND (a.name = '知乎')) -[e ]-(b:tag) RETURN b.id, b.name, b.value "}
{"prompt": "以623作为请求点id, 以属性id作为相等条件,给出名为杜思思的点喜欢的帖子,并对这些点的id进行求和", "completion": "with p as (select * from (VALUES(623)) as t(id)) MATCH (a WHERE a.id = p.id AND (a.name = '杜思思')) -[e:user_likes_post ]->(b:post) RETURN SUM(b.id) "}
{"prompt": "输入请求点id的列表965,195,122,538, 以属性id作为相等条件,查询名为张思思的点publish的所有post,并对这些点的value进行求和", "completion": "with p as (select * from (VALUES(965),(195),(122),(538)) as t(id)) MATCH (a WHERE a.id = p.id AND (a.name = '张思思')) -[e:user_publish_post ]->(b:post) RETURN SUM(b.value) "}
{"prompt": "以(113,2030-03-17,166),(879,2001-04-24,168),(256,2020-12-28,118)作为请求表数据,属性分别为value,createTime,peopleNumber, 源点的value等于输入表value,查询id为11的user有关的post的partner, 再查询和post有关系的partner", "completion": "with p as (select * from (VALUES(113,2030-03-17,166),(879,2001-04-24,168),(256,2020-12-28,118)) as t(value,createTime,peopleNumber))MATCH (a:user WHERE a.value = p.value AND (id = '11')) -[e ]-(b:post) -[e2:partner ]->(c) , (b:post) -[e3:partner ]->(d) RETURN a, b, c, d "}
{"prompt": "使用列为gender,salary,name, 数据为('male',5139,'孙月')的子查询作为输入表, 源点的name等于输入表name,查询论坛的3度以内的环", "completion": "with p as (select * from (VALUES('male',5139,'孙月')) as t(gender,salary,name))MATCH (a:forum WHERE a.name = p.name) ->(b) ->(a) RETURN a.id, b.id AS b_id "}
{"prompt": "以('杜思思','famale',65),('Jimmy','famale',70),('周红','male',32),('赵思思','famale',82)作为请求表数据,属性分别为name,gender,id, 源点的name等于输入表name,返回以发布关系关联了帖子Post_355的用户", "completion": "with p as (select * from (VALUES('杜思思','famale',65),('Jimmy','famale',70),('周红','male',32),('赵思思','famale',82)) as t(name,gender,id))MATCH (a:post WHERE a.name = p.name AND (a.name = 'Post_355')) <-[e:user_publish_post ]-(b:user) RETURN b "}
{"prompt": "输入请求点id的列表410,431,499,739, 以属性id作为相等条件,计算所有prescription的id除id除502的值", "completion": "with p as (select * from (VALUES(410),(431),(499),(739)) as t(id)) MATCH (a:prescription WHERE a.id = p.id) RETURN a.id / a.id / 502 "}
{"prompt": "使用列为createTime,id,name, 数据为(2014-05-03,61,'Prescription_312'),(2004-09-01,75,'Prescription_187'),(2034-03-27,85,'Prescription_264'),(1995-09-22,40,'Prescription_380')的子查询作为输入表, 以属性createTime作为相等条件,帮我查询所有用户以身高,年龄,性别分组的id, 根据id从大到小排序", "completion": "with p as (select * from (VALUES(2014-05-03,61,'Prescription_312'),(2004-09-01,75,'Prescription_187'),(2034-03-27,85,'Prescription_264'),(1995-09-22,40,'Prescription_380')) as t(createTime,id,name))MATCH (a:user WHERE a.createTime = p.createTime) RETURN a.id GROUP BY a.height, a.age, a.gender ORDER BY a.id DESC "}
{"prompt": "输入表的列为height,id,salary, 数据为(156,51,4724),(179,46,5158),(157,6,5887), 以属性height作为相等条件,查找所有处方以创建时间,权重分组的名字, 根据名字升序排序", "completion": "with p as (select * from (VALUES(156,51,4724),(179,46,5158),(157,6,5887)) as t(height,id,salary))MATCH (a:prescription WHERE a.height = p.height) RETURN a.name GROUP BY a.createTime, a.weight ORDER BY a.name "}
{"prompt": "输入请求点id的列表554,820,50, 源点的id等于输入表id,查找所有名为Light的点转账的账号", "completion": "with p as (select * from (VALUES(554),(820),(50)) as t(id)) MATCH (a WHERE a.id = p.id AND (a.name = 'Light')) -[e:account_transfer_account ]->(b:account) RETURN b "}
{"prompt": "以532,609,741,721作为请求点id, 以属性id作为相等条件,查询与company阿里存在company_apply_loan关系,且与account Geaflow123存在loan_deposit_account关系的loan节点，返回这些loan的weight,及company阿里的name,及account Geaflow123的id", "completion": "with p as (select * from (VALUES(532),(609),(741),(721)) as t(id)) MATCH (a:company WHERE a.id = p.id AND (a.name = '阿里')) -[e:company_apply_loan ]->(b:loan) <-[e2:loan_deposit_account ]-(c:account WHERE c.name = 'Geaflow123') RETURN a.name, b.weight, c.id "}
{"prompt": "输入请求点id的列表903,893,218, 以属性id作为相等条件,查找id为120的点的价值", "completion": "with p as (select * from (VALUES(903),(893),(218)) as t(id)) MATCH (a WHERE a.id = p.id AND (a.id = '120')) RETURN a.value "}
{"prompt": "以(239,'medium',810),(791,'small',790),(81,'medium',567),(89,'small',526)作为请求表数据,属性分别为value,scale,peopleNumber, 以属性value作为相等条件,请帮我找出id为3的person关联的account,和以transfer关系关联了这些account的其他account", "completion": "with p as (select * from (VALUES(239,'medium',810),(791,'small',790),(81,'medium',567),(89,'small',526)) as t(value,scale,peopleNumber))MATCH (a:person WHERE a.value = p.value AND (a.id = '3')) -[e ]-(b:account) <-[e2:account_transfer_account ]-(c:account) RETURN b, c "}
{"prompt": "以(61,5718,91)作为请求表数据,属性分别为id,salary,age, 源点的salary等于输入表salary,查找所有源点满足条件金额小于7380.05,目标点满足条件价值不为空或是否冻结为true,且类型是loan_deposit_account的边", "completion": "with p as (select * from (VALUES(61,5718,91)) as t(id,salary,age))MATCH (a WHERE a.salary = p.salary AND (a.amount < 7380.05)) -[e:loan_deposit_account ]->(b WHERE b.value IS NOT NULL OR b.isBlock = TRUE) RETURN e "}
{"prompt": "使用列为age,height,salary, 数据为(93,164,3404),(67,185,7494),(8,179,1137),(81,158,7684)的子查询作为输入表, 源点的age等于输入表age,帮我查询所有和company字节有1到4跳关系的loan", "completion": "with p as (select * from (VALUES(93,164,3404),(67,185,7494),(8,179,1137),(81,158,7684)) as t(age,height,salary))MATCH (a:company WHERE a.age = p.age AND (a.name = '字节')) -[e ]->{1,4}(b:loan) RETURN b "}
{"prompt": "输入请求点id的列表733,485, 源点的id等于输入表id,请帮我查找所有id为25的software关联的software,和以buy关系关联了这些software的其他person", "completion": "with p as (select * from (VALUES(733),(485)) as t(id)) MATCH (a:software WHERE a.id = p.id AND (a.id = '25')) -[e ]-(b:software) <-[e2:person_buy_software ]-(c:person) RETURN b, c "}
{"prompt": "以850,178,545,998,604作为请求点id, 以属性id作为相等条件,查询被person孙强buy的software", "completion": "with p as (select * from (VALUES(850),(178),(545),(998),(604)) as t(id)) MATCH (a:software WHERE a.id = p.id) <-[e:person_buy_software ]-(b:person WHERE b.name = '孙强') RETURN a, b "}
{"prompt": "输入请求点id的列表565,441, 源点的id等于输入表id,给出全部名为马轩的点提交的软件", "completion": "with p as (select * from (VALUES(565),(441)) as t(id)) MATCH (a WHERE a.id = p.id AND (a.name = '马轩')) -[e:person_commits_software ]->(b:software) RETURN b "}
{"prompt": "以(4078,31,77),(7333,99,9)作为请求表数据,属性分别为salary,age,id, 以属性age作为相等条件,帮我查询和标签为person的点有person_belong_company关系的公司,以及和这些公司有company_employee_person关系的person,以及和这些person有person_belong_company关系的公司", "completion": "with p as (select * from (VALUES(4078,31,77),(7333,99,9)) as t(salary,age,id))MATCH (a:person WHERE a.age = p.age) -[e:person_belong_company ]->(b:company) -[e2:company_employee_person ]->(c:person) -[e3:person_belong_company ]->(d:company) RETURN d "}
{"prompt": "使用列为gender,id,salary, 数据为('famale',50,9204),('famale',93,7098),('famale',18,8429)的子查询作为输入表, 以属性id作为相等条件,查询名为徐伟的点认识的person", "completion": "with p as (select * from (VALUES('famale',50,9204),('famale',93,7098),('famale',18,8429)) as t(gender,id,salary))MATCH (a WHERE a.id = p.id AND (a.name = '徐伟')) -[e:person_knows_person ]->(b:person) RETURN b "}
{"prompt": "以('famale','Alan',4228),('male','马月',4972),('male','王科',5380),('famale','马建聪',5781)作为请求表数据,属性分别为gender,name,salary, 以属性name作为相等条件,请帮我找出id为161的点的id,value,name", "completion": "with p as (select * from (VALUES('famale','Alan',4228),('male','马月',4972),('male','王科',5380),('famale','马建聪',5781)) as t(gender,name,salary))MATCH (a WHERE a.name = p.name AND (a.id = '161')) RETURN a.id, a.value, a.name "}
{"prompt": "以441,34,566,617作为请求点id, 以属性id作为相等条件,帮我查询名为郑梅和徐建国的,标签等于buyer的点公共的friend节点的名单", "completion": "with p as (select * from (VALUES(441),(34),(566),(617)) as t(id)) MATCH (a:buyer WHERE a.id = p.id AND (a.name = '郑梅')) -[e:friend ]->(b) <-[e2:friend ]-(c:buyer WHERE c.name = '徐建国') RETURN b.name "}
{"prompt": "以126,842作为请求点id, 源点的id等于输入表id,找出和买家有关联的订单节点,并根据其id,价值分组,返回id,价值,以及id加26的数量", "completion": "with p as (select * from (VALUES(126),(842)) as t(id)) MATCH (a:buyer WHERE a.id = p.id) -[e:buyer_creates_orders ]-(b:orders) RETURN b.id, b.value, COUNT(b.id + 26) GROUP BY b.id, b.value "}
{"prompt": "输入请求点id的列表972,987,551,835, 以属性id作为相等条件,请帮我找出和seller李月有seller_has_goods关系的goods,再请帮我找出以seller_has_goods关系关联了李月的goods", "completion": "with p as (select * from (VALUES(972),(987),(551),(835)) as t(id)) MATCH (a:seller WHERE a.id = p.id AND (a.name = '李月')) -[e:seller_has_goods ]->(b:goods) , (a:seller WHERE a.name = '李月') <-[e2:seller_has_goods ]-(c:goods) RETURN a, b, c "}
{"prompt": "以('male','吴雪',86),('famale','周若涵',61),('male','王梅',3),('male','郑雪',31)作为请求表数据,属性分别为gender,name,age, 源点的name等于输入表name,查找被buyer孙梅look的goods", "completion": "with p as (select * from (VALUES('male','吴雪',86),('famale','周若涵',61),('male','王梅',3),('male','郑雪',31)) as t(gender,name,age))MATCH (a:goods WHERE a.name = p.name) <-[e:buyer_look_goods ]-(b:buyer WHERE b.name = '孙梅') RETURN a, b "}
{"prompt": "输入表的列为gender,salary,age, 数据为('male',8968,77),('male',6468,10),('famale',1866,43),('male',9180,7), 以属性salary作为相等条件,帮我查询与买家周强有buyer_creates_orders关系的1度以内的环", "completion": "with p as (select * from (VALUES('male',8968,77),('male',6468,10),('famale',1866,43),('male',9180,7)) as t(gender,salary,age))MATCH (a:buyer WHERE a.salary = p.salary AND (name = '周强')) -[e:buyer_creates_orders ]->{0,0}(b) ->(a) RETURN a.id, b.id AS b_id "}
{"prompt": "以150,483,277,255作为请求点id, 源点的id等于输入表id,找出person郑科 knows的person,返回person relates的person的height除height的值 ", "completion": "with p as (select * from (VALUES(150),(483),(277),(255)) as t(id)) MATCH (a:person WHERE a.id = p.id AND (name = '郑科')) -[e:knows ]->(b:person) -[e2:relates ]->(c:person) RETURN c.height / c.height "}
{"prompt": "输入请求点id的列表910,384, 源点的id等于输入表id,请帮我查找person的三角的环,边类型为person_friend_person, 并返回这些点的id", "completion": "with p as (select * from (VALUES(910),(384)) as t(id)) MATCH (a:person WHERE a.id = p.id) -[e:person_friend_person ]->(b) -[e2:person_friend_person ]-(c) ->(a) RETURN a, b.id AS b_id, c.id AS c_id "}
{"prompt": "输入请求点id的列表466,476,294, 源点的id等于输入表id,请帮我查找所有和person Alan之间有person_family_person关系的person", "completion": "with p as (select * from (VALUES(466),(476),(294)) as t(id)) MATCH (a:person WHERE a.id = p.id AND (a.name = 'Alan')) -[e:person_family_person ]->(b:person) RETURN b "}
{"prompt": "输入表的列为height,gender,name, 数据为(187,'famale','郑若涵'),(154,'male','郑伟'),(195,'famale','马科'),(165,'male','周伟'), 以属性height作为相等条件,请帮我找出所有id为97的person关联的person,和以knows关系关联了这些person的其他person", "completion": "with p as (select * from (VALUES(187,'famale','郑若涵'),(154,'male','郑伟'),(195,'famale','马科'),(165,'male','周伟')) as t(height,gender,name))MATCH (a:person WHERE a.height = p.height AND (a.id = '97')) -[e ]-(b:person) <-[e2:knows ]-(c:person) RETURN b, c "}
{"prompt": "输入表的列为id,salary,age, 数据为(48,6089,18), 源点的id等于输入表id,查询person张梅knows的person节点knows的person", "completion": "with p as (select * from (VALUES(48,6089,18)) as t(id,salary,age))MATCH (a:person WHERE a.id = p.id AND (a.name = '张梅')) -[e:knows ]->(b:person) -[e2:knows ]->(c:person) RETURN c "}
{"prompt": "使用列为salary,name,id, 数据为(2000,'王建聪',77),(8228,'杜伟',64)的子查询作为输入表, 以属性salary作为相等条件,查找和person李强有person_friend_person关系的person,以及和person王思思有person_parent_person关系的person,将它们都返回", "completion": "with p as (select * from (VALUES(2000,'王建聪',77),(8228,'杜伟',64)) as t(salary,name,id))MATCH (a:person WHERE a.salary = p.salary AND (a.name = '李强')) -[e:person_friend_person ]->(b:person) , (c:person WHERE c.name = '王思思') -[e2:person_parent_person ]->(d:person) RETURN a, b, c, d "}
{"prompt": "以816,648作为请求点id, 以属性id作为相等条件,请帮我找出与徐轩存在person_likes_comment关系的comment,comment与film存在comment_belong_film关系的点,返回这些点的id", "completion": "with p as (select * from (VALUES(816),(648)) as t(id)) MATCH (a WHERE a.id = p.id AND (a.name = '徐轩')) -[e:person_likes_comment ]->(b:comment) -[e2:comment_belong_film ]->(c:film) RETURN c.id "}
{"prompt": "以110作为请求点id, 以属性id作为相等条件,请帮我找出以watch关系关联了film绿巨人的person", "completion": "with p as (select * from (VALUES(110)) as t(id)) MATCH (a:film WHERE a.id = p.id AND (a.name = '绿巨人')) <-[e:person_watch_film ]-(b:person) RETURN b "}
{"prompt": "输入请求点id的列表528,995,640,504,588, 以属性id作为相等条件,查找与person陈若涵有关系的film的category", "completion": "with p as (select * from (VALUES(528),(995),(640),(504),(588)) as t(id)) MATCH (a:person WHERE a.id = p.id AND (a.name = '陈若涵')) -[e ]-(b:film) RETURN b.category "}
{"prompt": "输入表的列为id,name,wordCount, 数据为(38,'Comment_381',890),(2,'Comment_440',795),(47,'Comment_365',772),(12,'Comment_130',750), 源点的id等于输入表id,请帮我找出126个film泰坦尼克号和神探狄仁杰,共同的friend", "completion": "with p as (select * from (VALUES(38,'Comment_381',890),(2,'Comment_440',795),(47,'Comment_365',772),(12,'Comment_130',750)) as t(id,name,wordCount))MATCH (a:film WHERE a.id = p.id AND (a.name = '泰坦尼克号')) -[e:friend ]->(b) <-[e2:friend ]-(c:film WHERE c.name = '神探狄仁杰') RETURN b LIMIT 126"}
{"prompt": "使用列为id,name,value, 数据为(41,'动作',769),(12,'历史',932),(25,'动作',76),(16,'文艺',94)的子查询作为输入表, 源点的value等于输入表value,查找22个名为郑轩的点喜欢的标签等于评论的节点,且其字数在367到673之间", "completion": "with p as (select * from (VALUES(41,'动作',769),(12,'历史',932),(25,'动作',76),(16,'文艺',94)) as t(id,name,value))MATCH (a WHERE a.value = p.value AND (a.name = '郑轩')) -[e:person_likes_comment ]->(b:comment WHERE b.wordCount BETWEEN ASYMMETRIC 367 AND 673) RETURN b LIMIT 22"}
{"prompt": "使用列为address,id,size, 数据为('东区',69,455),('C栋',4,195),('南区',58,183),('C栋',32,554)的子查询作为输入表, 以属性address作为相等条件,返回和cinema人人影城有关的cinema,再返回和人人影城cinema_releases_film的其他film,返回它们", "completion": "with p as (select * from (VALUES('东区',69,455),('C栋',4,195),('南区',58,183),('C栋',32,554)) as t(address,id,size))MATCH (a:cinema WHERE a.address = p.address AND (a.name = '人人影城')) -[e ]-(b:cinema) , (a:cinema) -[e2:cinema_releases_film ]->(c:film) RETURN a, b, c "}
{"prompt": "以191,748,151作为请求点id, 以属性id作为相等条件,帮我查询174个peopleNumber的平均值小于341的company,根据scale从小到大排列", "completion": "with p as (select * from (VALUES(191),(748),(151)) as t(id)) MATCH (a:company WHERE a.id = p.id AND (AVG(a.peopleNumber) < 341)) RETURN a ORDER BY a.scale LIMIT 174"}
{"prompt": "输入请求点id的列表960,125, 源点的id等于输入表id,帮我查询类型是company的全部点,并根据value从大到小排列", "completion": "with p as (select * from (VALUES(960),(125)) as t(id)) MATCH (a:company WHERE a.id = p.id) RETURN a ORDER BY a.value DESC "}
{"prompt": "以504作为请求点id, 源点的id等于输入表id,帮我查询id为87的city有关的university的partner, 再帮我查询和university有关系的relation", "completion": "with p as (select * from (VALUES(504)) as t(id)) MATCH (a:city WHERE a.id = p.id AND (id = '87')) -[e ]-(b:university) -[e2:partner ]->(c) , (b:university) -[e3:relation ]->(d) RETURN a, b, c, d "}
{"prompt": "以('浙江大学',2,473)作为请求表数据,属性分别为name,level,value, 以属性level作为相等条件,帮我查询所有源点类型为city,边类型为city_belong_country,并且srcId不是193或weight的个数大于等于678,且targetId为空的边", "completion": "with p as (select * from (VALUES('浙江大学',2,473)) as t(name,level,value))MATCH (a:city WHERE a.level = p.level) -[e:city_belong_country WHERE (e.srcId <> 193 OR COUNT(e.weight) >= 678) AND e.targetId IS NULL ]->(b) RETURN e "}
{"prompt": "以('澳大利亚',31,721),('越南',38,262),('中国',19,122),('澳大利亚',88,68)作为请求表数据,属性分别为name,id,value, 源点的id等于输入表id,找出标签为大学的全部点,并根据名字从小到大排列", "completion": "with p as (select * from (VALUES('澳大利亚',31,721),('越南',38,262),('中国',19,122),('澳大利亚',88,68)) as t(name,id,value))MATCH (a:university WHERE a.id = p.id) RETURN a ORDER BY a.name "}
{"prompt": "输入表的列为name,id,value, 数据为('Bilibili',36,67),('Bilibili',33,709), 源点的value等于输入表value,找出和大学有关联的城市节点,并根据其面积,人数分组,返回面积,人数,以及value的数量加974的个数", "completion": "with p as (select * from (VALUES('Bilibili',36,67),('Bilibili',33,709)) as t(name,id,value))MATCH (a:university WHERE a.value = p.value) -[e:university_belong_city ]-(b:city) RETURN b.area, b.peopleNumber, COUNT(COUNT(b.value) + 974) GROUP BY b.area, b.peopleNumber "}
{"prompt": "输入请求点id的列表211, 以属性id作为相等条件,帮我查询满足条件名字不等于马红或薪资乘薪资乘78的数量不等于88,且id在3到86之间的节点", "completion": "with p as (select * from (VALUES(211)) as t(id)) MATCH (a WHERE a.id = p.id AND ((a.name <> '马红' OR COUNT(a.salary * a.salary * 78) <> 88) AND a.id BETWEEN ASYMMETRIC 3 AND 86)) RETURN a "}
{"prompt": "以421,593,143,979作为请求点id, 以属性id作为相等条件,给出person的1度以内的环", "completion": "with p as (select * from (VALUES(421),(593),(143),(979)) as t(id)) MATCH (a:person WHERE a.id = p.id) ->(b) ->(a) RETURN a.id, b.id AS b_id "}
{"prompt": "以319,762作为请求点id, 以属性id作为相等条件,帮我查询所有名为徐强的点喜欢的person", "completion": "with p as (select * from (VALUES(319),(762)) as t(id)) MATCH (a WHERE a.id = p.id AND (a.name = '徐强')) -[e:person_likes_person ]->(b:person) RETURN b "}
{"prompt": "使用列为name,height,id, 数据为('王建聪',162,19),('黄宏',194,8)的子查询作为输入表, 源点的height等于输入表height,查找与person孙红有person_knows_person关系的2跳的环", "completion": "with p as (select * from (VALUES('王建聪',162,19),('黄宏',194,8)) as t(name,height,id))MATCH (a:person WHERE a.height = p.height AND (name = '孙红')) -[e:person_knows_person ]->(b) ->(a) RETURN a.id, b.id AS b_id "}
{"prompt": "输入表的列为height,salary,age, 数据为(188,5377,71), 源点的age等于输入表age,请帮我查找全部源点label为person,边label为person_knows_person,且f0的数量为140的边", "completion": "with p as (select * from (VALUES(188,5377,71)) as t(height,salary,age))MATCH (a:person WHERE a.age = p.age) -[e:person_knows_person WHERE COUNT(e.f0) = 140 ]->(b) RETURN e "}
{"prompt": "使用列为age,id,height, 数据为(96,5,151),(13,89,172)的子查询作为输入表, 源点的height等于输入表height,找出全部郑科的点支付的person,然后找出郑科被认识的person,一起返回", "completion": "with p as (select * from (VALUES(96,5,151),(13,89,172)) as t(age,id,height))MATCH (a WHERE a.height = p.height AND (a.name = '郑科')) -[e:person_pay_person ]->(b:person) , (a WHERE a.name = '郑科') <-[e2:person_knows_person ]-(c:person) RETURN a, b, c "}
{"prompt": "用这个schema:CREATE GRAPH g ( Vertex student ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex university ( id int ID, name varchar, level int, value int ), Vertex course ( id int ID, name varchar, credit int, courseHour int, value int ), Vertex teacher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, size int, value int ), Edge student_selects_course ( srcId int FROM student SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_teacher ( srcId int FROM department SOURCE ID, targetId int FROM teacher DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_student ( srcId int FROM department SOURCE ID, targetId int FROM student DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_has_department ( srcId int FROM university SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ), Edge teacher_teach_course ( srcId int FROM teacher SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ));查询label为department_has_student,并且weight在169.14到188.52之间的边", "completion": "match(a)-[e:department_has_student where (e.weight BETWEEN 169.14 AND 188.52)]->(b) return e"}
{"prompt": "用如下schema的图:CREATE GRAPH g ( Vertex student ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex university ( id int ID, name varchar, level int, value int ), Vertex course ( id int ID, name varchar, credit int, courseHour int, value int ), Vertex teacher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, size int, value int ), Edge student_selects_course ( srcId int FROM student SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_teacher ( srcId int FROM department SOURCE ID, targetId int FROM teacher DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_student ( srcId int FROM department SOURCE ID, targetId int FROM student DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_has_department ( srcId int FROM university SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ), Edge teacher_teach_course ( srcId int FROM teacher SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ));帮我查询全部源点标签为部门,边标签为department_has_teacher,并且满足条件f0不为空或f0小于795,且f1等于false的边", "completion": "match(a:department)-[e:department_has_teacher where ((e.f0 is not null) or e.f0 < 795) and e.f1 = false]->(b) return e"}
{"prompt": "给定图的schema如下:CREATE GRAPH g ( Vertex student ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex university ( id int ID, name varchar, level int, value int ), Vertex course ( id int ID, name varchar, credit int, courseHour int, value int ), Vertex teacher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, size int, value int ), Edge student_selects_course ( srcId int FROM student SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_teacher ( srcId int FROM department SOURCE ID, targetId int FROM teacher DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_student ( srcId int FROM department SOURCE ID, targetId int FROM student DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_has_department ( srcId int FROM university SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ), Edge teacher_teach_course ( srcId int FROM teacher SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我查找全部源点标签等于department,边标签等于department_has_teacher,且满足条件srcId小于等于132或f0小于等于944或weight减113.33大于等于187.65的边", "completion": "match(a:department)-[e:department_has_teacher where e.srcId <= 132 or e.f0 <= 944 or e.weight - 113.33 >= 187.65]->(b) return e"}
{"prompt": "用这个schema:CREATE GRAPH g ( Vertex book ( id int ID, name varchar, id int ID, name varchar, category varchar, price int, wordCount int, createTime bigint ), Vertex publisher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex author ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex reader ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge author_write_book ( srcId int FROM author SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge author_knows_author ( srcId int FROM author SOURCE ID, targetId int FROM author DESTINATION ID, weight double, f0 int, f1 boolean ), Edge book_refers_book ( srcId int FROM book SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge publisher_publish_book ( srcId int FROM publisher SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge reader_likes_book ( srcId int FROM reader SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ));帮我查询75个与吴建国和孙强都存在关系的编辑节点", "completion": "match(a where a.name='吴建国')-[e]->(b:publisher)<-[e2]-(c where c.name='孙强') return b limit 75"}
{"prompt": "用如下schema的图:CREATE GRAPH g ( Vertex book ( id int ID, name varchar, id int ID, name varchar, category varchar, price int, wordCount int, createTime bigint ), Vertex publisher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex author ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex reader ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge author_write_book ( srcId int FROM author SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge author_knows_author ( srcId int FROM author SOURCE ID, targetId int FROM author DESTINATION ID, weight double, f0 int, f1 boolean ), Edge book_refers_book ( srcId int FROM book SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge publisher_publish_book ( srcId int FROM publisher SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge reader_likes_book ( srcId int FROM reader SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我找出所有和书百年孤独之间有book_refers_book关系的书", "completion": "match(a:book where a.name='百年孤独')-[e:book_refers_book]->(b:book) return b"}
{"prompt": "用这个schema:CREATE GRAPH g ( Vertex book ( id int ID, name varchar, id int ID, name varchar, category varchar, price int, wordCount int, createTime bigint ), Vertex publisher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex author ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex reader ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge author_write_book ( srcId int FROM author SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge author_knows_author ( srcId int FROM author SOURCE ID, targetId int FROM author DESTINATION ID, weight double, f0 int, f1 boolean ), Edge book_refers_book ( srcId int FROM book SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge publisher_publish_book ( srcId int FROM publisher SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge reader_likes_book ( srcId int FROM reader SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我查找前176个满足条件名字不是郑雪且薪资大于等于163且id不为空的编辑", "completion": "match(a:publisher where a.name <> '郑雪' and a.salary >= 163 and (a.id is not null)) return a limit 176"}
{"prompt": "使用这个图:CREATE GRAPH g ( Vertex doctor ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, address varchar, weight int ), Vertex patient ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex medicine ( id int ID, name varchar, price int, category varchar, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Edge patient_accept_prescription ( srcId int FROM patient SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_doctor ( srcId int FROM department SOURCE ID, targetId int FROM doctor DESTINATION ID, weight double, f0 int, f1 boolean ), Edge prescription_contain_medicine ( srcId int FROM prescription SOURCE ID, targetId int FROM medicine DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_creates_prescription ( srcId int FROM doctor SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_diagnose_patient ( srcId int FROM doctor SOURCE ID, targetId int FROM patient DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge doctor_belong_department ( srcId int FROM doctor SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ));找出名为张科和李宏的,类型为doctor的点公共的partner节点的名单", "completion": "match(a:doctor where a.name='张科')-[e:partner]->(b)<-[e2:partner]-(c:doctor where c.name='李宏') return b.name"}
{"prompt": "使用这个图:CREATE GRAPH g ( Vertex doctor ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, address varchar, weight int ), Vertex patient ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex medicine ( id int ID, name varchar, price int, category varchar, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Edge patient_accept_prescription ( srcId int FROM patient SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_doctor ( srcId int FROM department SOURCE ID, targetId int FROM doctor DESTINATION ID, weight double, f0 int, f1 boolean ), Edge prescription_contain_medicine ( srcId int FROM prescription SOURCE ID, targetId int FROM medicine DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_creates_prescription ( srcId int FROM doctor SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_diagnose_patient ( srcId int FROM doctor SOURCE ID, targetId int FROM patient DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge doctor_belong_department ( srcId int FROM doctor SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ));查找与patient王梅有patient_accept_prescription关系的3跳的环", "completion": "match(a:patient where name = '王梅')-[e:patient_accept_prescription]->{2,2}(b)->(a) return a.id, b.id as b_id"}
{"prompt": "用这个schema:CREATE GRAPH g ( Vertex doctor ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, address varchar, weight int ), Vertex patient ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex medicine ( id int ID, name varchar, price int, category varchar, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Edge patient_accept_prescription ( srcId int FROM patient SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_doctor ( srcId int FROM department SOURCE ID, targetId int FROM doctor DESTINATION ID, weight double, f0 int, f1 boolean ), Edge prescription_contain_medicine ( srcId int FROM prescription SOURCE ID, targetId int FROM medicine DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_creates_prescription ( srcId int FROM doctor SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_diagnose_patient ( srcId int FROM doctor SOURCE ID, targetId int FROM patient DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge doctor_belong_department ( srcId int FROM doctor SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ));查找全部名为孙思琪的点的,weight大于652的relation,返回这些relation的weight,和边的f0", "completion": "match(a where a.name='孙思琪')-[e:relation]->(b where b.weight > 652) return b.weight,e.f0"}
{"prompt": "用这个schema:CREATE GRAPH g ( Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex forum ( id int ID, name varchar, peopleNumber int, createTime bigint, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex post ( id int ID, name varchar, lang varchar, createTime bigint, wordCount int, value int ), Vertex tag ( id int ID, name varchar, value int ), Edge forum_contain_post ( srcId int FROM forum SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_publish_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_likes_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge post_has_tag ( srcId int FROM post SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge forum_contain_person ( srcId int FROM forum SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我找出全部名为Post_429的点拥有的标签", "completion": "match(a where a.name='Post_429')-[e:post_has_tag]->(b:tag) return b"}
{"prompt": "给定图的schema如下:CREATE GRAPH g ( Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex forum ( id int ID, name varchar, peopleNumber int, createTime bigint, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex post ( id int ID, name varchar, lang varchar, createTime bigint, wordCount int, value int ), Vertex tag ( id int ID, name varchar, value int ), Edge forum_contain_post ( srcId int FROM forum SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_publish_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_likes_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge post_has_tag ( srcId int FROM post SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge forum_contain_person ( srcId int FROM forum SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我找出全部和名为王红的user有relation关系,或有relation的relation关系的post", "completion": "match(a:user where n.name=王红)-[e:relation]->{1,2}(b:post) return b"}
{"prompt": "用这个schema:CREATE GRAPH g ( Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex forum ( id int ID, name varchar, peopleNumber int, createTime bigint, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex post ( id int ID, name varchar, lang varchar, createTime bigint, wordCount int, value int ), Vertex tag ( id int ID, name varchar, value int ), Edge forum_contain_post ( srcId int FROM forum SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_publish_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_likes_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge post_has_tag ( srcId int FROM post SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge forum_contain_person ( srcId int FROM forum SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));查找全部源点满足条件gender不等于famale,gender为famale,目标点满足条件id在15到61之间或name不是Post_335,且label为user_likes_post的边", "completion": "match(a where a.gender <> 'famale' and a.gender = 'famale')-[e:user_likes_post]->(b where (b.id BETWEEN 15 AND 61) or b.name <> 'Post_335') return e"}
{"prompt": "用如下schema的图:CREATE GRAPH g ( Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Edge issue_belong_repository ( srcId int FROM issue SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ), Edge repository_has_user ( srcId int FROM repository SOURCE ID, targetId int FROM user DESTINATION ID, weight double, f0 int, f1 boolean ), Edge repository_has_issue ( srcId int FROM repository SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean ), Edge repository_has_issue ( srcId int FROM repository SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_creates_issue ( srcId int FROM user SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge issue_belong_repository ( srcId int FROM issue SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_creates_issue ( srcId int FROM user SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_likes_repository ( srcId int FROM user SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ));查询id为10的prescription有关的user的partner, 再查询和user有关系的relation", "completion": "match(a:prescription where id = '10')-[e]-(b:user)-[e2:partner]->(c), (b:user)-[e3:relation]->(d) return a, b, c, d"}
{"prompt": "使用这个图:CREATE GRAPH g ( Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Edge issue_belong_repository ( srcId int FROM issue SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ), Edge repository_has_user ( srcId int FROM repository SOURCE ID, targetId int FROM user DESTINATION ID, weight double, f0 int, f1 boolean ), Edge repository_has_issue ( srcId int FROM repository SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean ), Edge repository_has_issue ( srcId int FROM repository SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_creates_issue ( srcId int FROM user SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge issue_belong_repository ( srcId int FROM issue SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_creates_issue ( srcId int FROM user SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_likes_repository ( srcId int FROM user SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ));查询名为吴雪和孙强的,类型是用户的点公共的朋友节点的名单", "completion": "match(a:user where a.name='吴雪')-[e:friend]->(b)<-[e2:friend]-(c:user where c.name='孙强') return b.name"}
{"prompt": "用如下schema的图:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex loan ( id int ID, amount double, weight int ), Vertex account ( id int ID, name varchar, createTime bigint, lastLoginTime bigint, isBlock boolean, value int ), Edge person_invest_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_apply_loan ( srcId int FROM person SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_apply_loan ( srcId int FROM company SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge loan_deposit_account ( srcId int FROM loan SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_repay_loan ( srcId int FROM account SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_transfer_account ( srcId int FROM account SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_own_account ( srcId int FROM person SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean ));帮我查询类型为贷款的全部点,并根据权重降序排列", "completion": "match(a:loan) return a order by a.weight desc"}
{"prompt": "用如下schema的图:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex loan ( id int ID, amount double, weight int ), Vertex account ( id int ID, name varchar, createTime bigint, lastLoginTime bigint, isBlock boolean, value int ), Edge person_invest_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_apply_loan ( srcId int FROM person SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_apply_loan ( srcId int FROM company SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge loan_deposit_account ( srcId int FROM loan SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_repay_loan ( srcId int FROM account SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_transfer_account ( srcId int FROM account SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_own_account ( srcId int FROM person SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean ));给出和账号Zeus有关的贷款,再给出和Zeus account_repay_loan的其他贷款,返回它们", "completion": "match(a:account where a.name = 'Zeus')-[e]-(b:loan), (a:account)-[e2:account_repay_loan]->(c:loan) return a, b, c"}
{"prompt": "使用这个图:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex loan ( id int ID, amount double, weight int ), Vertex account ( id int ID, name varchar, createTime bigint, lastLoginTime bigint, isBlock boolean, value int ), Edge person_invest_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_apply_loan ( srcId int FROM person SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_apply_loan ( srcId int FROM company SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge loan_deposit_account ( srcId int FROM loan SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_repay_loan ( srcId int FROM account SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_transfer_account ( srcId int FROM account SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_own_account ( srcId int FROM person SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean ));查询所有源点标签等于account,边标签等于account_repay_loan,且timeStamp大于173.04,f1等于true,或f1是false的边", "completion": "match(a:account)-[e:account_repay_loan where (e.timeStamp > 173.04 and e.f1 = true) or e.f1 = false]->(b) return e"}
{"prompt": "使用这个图:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex software ( id int ID, name varchar, lang varchar, stars int, openSource boolean, value int ), Edge person_commits_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_creates_software ( srcId int FROM company SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_employee_person ( srcId int FROM company SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_belong_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_buy_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge software_uses_software ( srcId int FROM software SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));给出前52个标签等于company_creates_software的边", "completion": "match(a)-[e:company_creates_software]->(b) return e limit 52"}
{"prompt": "用这个schema:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex software ( id int ID, name varchar, lang varchar, stars int, openSource boolean, value int ), Edge person_commits_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_creates_software ( srcId int FROM company SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_employee_person ( srcId int FROM company SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_belong_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_buy_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge software_uses_software ( srcId int FROM software SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));返回14个与孙国强和马雪都存在关系的公司节点", "completion": "match(a where a.name='孙国强')-[e]->(b:company)<-[e2]-(c where c.name='马雪') return b limit 14"}
{"prompt": "用如下schema的图:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex software ( id int ID, name varchar, lang varchar, stars int, openSource boolean, value int ), Edge person_commits_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_creates_software ( srcId int FROM company SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_employee_person ( srcId int FROM company SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_belong_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_buy_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge software_uses_software ( srcId int FROM software SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我找出person的3跳的环", "completion": "match(a:person)->{2,2}(b)->(a) return a.id, b.id as b_id"}
{"prompt": "给定图的schema如下:CREATE GRAPH g ( Vertex goods ( id int ID, name varchar, category varchar, price double, sellerNumber double, value int ), Vertex orders ( id int ID, name varchar, price double, value int ), Vertex seller ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex buyer ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge buyer_cancel_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge buyer_consult_seller ( srcId int FROM buyer SOURCE ID, targetId int FROM seller DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge seller_has_goods ( srcId int FROM seller SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_look_goods ( srcId int FROM buyer SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge orders_contain_goods ( srcId int FROM orders SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_creates_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));请帮我查找24个与杜宏和李国强都存在关系的orders节点", "completion": "match(a where a.name='杜宏')-[e]->(b:orders)<-[e2]-(c where c.name='李国强') return b limit 24"}
{"prompt": "用如下schema的图:CREATE GRAPH g ( Vertex goods ( id int ID, name varchar, category varchar, price double, sellerNumber double, value int ), Vertex orders ( id int ID, name varchar, price double, value int ), Vertex seller ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex buyer ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge buyer_cancel_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge buyer_consult_seller ( srcId int FROM buyer SOURCE ID, targetId int FROM seller DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge seller_has_goods ( srcId int FROM seller SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_look_goods ( srcId int FROM buyer SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge orders_contain_goods ( srcId int FROM orders SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_creates_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));请帮我找出和订单有关联的商品节点,并根据其价格,销量,价值分组,返回价格,销量,价值,以及价值乘899的数量", "completion": "match(a:orders)-[e:orders_contain_goods]-(b:goods) return b.price, b.sellerNumber, b.value, COUNT(b.value * 899) group by b.price, b.sellerNumber, b.value"}
{"prompt": "使用这个图:CREATE GRAPH g ( Vertex goods ( id int ID, name varchar, category varchar, price double, sellerNumber double, value int ), Vertex orders ( id int ID, name varchar, price double, value int ), Vertex seller ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex buyer ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge buyer_cancel_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge buyer_consult_seller ( srcId int FROM buyer SOURCE ID, targetId int FROM seller DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge seller_has_goods ( srcId int FROM seller SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_look_goods ( srcId int FROM buyer SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge orders_contain_goods ( srcId int FROM orders SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_creates_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));帮我查询和buyer孙若涵有buyer_creates_orders关系的orders,再帮我查询以buyer_cancel_orders关系关联了孙若涵的orders", "completion": "match(a:buyer where a.name = '孙若涵')-[e:buyer_creates_orders]->(b:orders),(a:buyer where a.name = '孙若涵')<-[e2:buyer_cancel_orders]-(c:orders)return a, b, c"}
{"prompt": "用如下schema的图:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_colleague_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_parent_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_family_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_friend_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_lover_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));查询label为person_parent_person,且满足条件weight大于101.75的边", "completion": "match(a)-[e:person_parent_person where e.weight > 101.75]->(b) return e"}
{"prompt": "给定图的schema如下:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_colleague_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_parent_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_family_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_friend_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_lover_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我查找与名为徐强和杜轩的点共同认识的,标签为person的节点", "completion": "match(a where a.name = '徐强')-[e:knows]->(b:person)<-[e2:knows]-(c where c.name = '杜轩') return b"}
{"prompt": "用如下schema的图:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_colleague_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_parent_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_family_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_friend_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_lover_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我找出满足条件name不是吴轩,age大于57且id大于69的节点", "completion": "match(a where a.name <> '吴轩' and a.age > 57 and a.id > 69) return a"}
{"prompt": "使用这个图:CREATE GRAPH g ( Vertex film ( id int ID, name varchar, category varchar, value int ), Vertex cinema ( id int ID, name varchar, address varchar, size int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex tag ( id int ID, name varchar, value int ), Vertex comment ( id int ID, name varchar, createTime bigint, wordCount int ), Edge film_has_tag ( srcId int FROM film SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_likes_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean ), Edge cinema_releases_film ( srcId int FROM cinema SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_creates_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge comment_belong_film ( srcId int FROM comment SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_watch_film ( srcId int FROM person SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));返回和person有关联的comment节点,并根据其name,createTime,id分组,返回name,createTime,id,以及id加6的最大值", "completion": "match(a:person)-[e:person_likes_comment]-(b:comment) return b.name, b.createTime, b.id, MAX(b.id + 6) group by b.name, b.createTime, b.id"}
{"prompt": "用这个schema:CREATE GRAPH g ( Vertex film ( id int ID, name varchar, category varchar, value int ), Vertex cinema ( id int ID, name varchar, address varchar, size int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex tag ( id int ID, name varchar, value int ), Vertex comment ( id int ID, name varchar, createTime bigint, wordCount int ), Edge film_has_tag ( srcId int FROM film SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_likes_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean ), Edge cinema_releases_film ( srcId int FROM cinema SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_creates_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge comment_belong_film ( srcId int FROM comment SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_watch_film ( srcId int FROM person SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));找出标签等于评论的所有点,并根据字数从大到小排列", "completion": "match(a:comment) return a order by a.wordCount desc"}
{"prompt": "给定图的schema如下:CREATE GRAPH g ( Vertex film ( id int ID, name varchar, category varchar, value int ), Vertex cinema ( id int ID, name varchar, address varchar, size int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex tag ( id int ID, name varchar, value int ), Vertex comment ( id int ID, name varchar, createTime bigint, wordCount int ), Edge film_has_tag ( srcId int FROM film SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_likes_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean ), Edge cinema_releases_film ( srcId int FROM cinema SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_creates_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge comment_belong_film ( srcId int FROM comment SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_watch_film ( srcId int FROM person SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));找出film的三角的环,边类型是film_has_tag, 并返回这些点的id", "completion": "match(a:film)-[e:film_has_tag]->(b)-[e2:film_has_tag]-(c)->(a) return a,b.id as b_id,c.id as c_id"}
{"prompt": "使用这个图:CREATE GRAPH g ( Vertex university ( id int ID, name varchar, level int, value int ), Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex city ( id int ID, name varchar, area int, peopleNumber int, value int ), Vertex country ( id int ID, name varchar, area int, peopleNumber int, value int ), Edge company_cooperate_university ( srcId int FROM company SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_belong_city ( srcId int FROM university SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_cooperate_company ( srcId int FROM university SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge country_contain_city ( srcId int FROM country SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_university ( srcId int FROM city SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_belong_country ( srcId int FROM city SOURCE ID, targetId int FROM country DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_company ( srcId int FROM city SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_belong_city ( srcId int FROM company SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ));返回类型为city_contain_company,并且满足条件srcId不是199的边", "completion": "match(a)-[e:city_contain_company where e.srcId <> 199]->(b) return e"}
{"prompt": "用如下schema的图:CREATE GRAPH g ( Vertex university ( id int ID, name varchar, level int, value int ), Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex city ( id int ID, name varchar, area int, peopleNumber int, value int ), Vertex country ( id int ID, name varchar, area int, peopleNumber int, value int ), Edge company_cooperate_university ( srcId int FROM company SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_belong_city ( srcId int FROM university SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_cooperate_company ( srcId int FROM university SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge country_contain_city ( srcId int FROM country SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_university ( srcId int FROM city SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_belong_country ( srcId int FROM city SOURCE ID, targetId int FROM country DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_company ( srcId int FROM city SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_belong_city ( srcId int FROM company SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我找出名为Bilibili和蚂蚁集团的,类型是company的点公共的partner节点的名单", "completion": "match(a:company where a.name='Bilibili')-[e:partner]->(b)<-[e2:partner]-(c:company where c.name='蚂蚁集团') return b.name"}
{"prompt": "用这个schema:CREATE GRAPH g ( Vertex university ( id int ID, name varchar, level int, value int ), Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex city ( id int ID, name varchar, area int, peopleNumber int, value int ), Vertex country ( id int ID, name varchar, area int, peopleNumber int, value int ), Edge company_cooperate_university ( srcId int FROM company SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_belong_city ( srcId int FROM university SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_cooperate_company ( srcId int FROM university SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge country_contain_city ( srcId int FROM country SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_university ( srcId int FROM city SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_belong_country ( srcId int FROM city SOURCE ID, targetId int FROM country DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_company ( srcId int FROM city SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_belong_city ( srcId int FROM company SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ));计算所有城市的value的最小值除254的值", "completion": "match(a:city) return MIN(a.value) / 254"}
{"prompt": "用这个schema:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_pay_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_likes_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));给出person赵伟的friend,的f0对880取余的数量", "completion": "match(a:person where a.name= '赵伟')-[e:friend]->(b) return COUNT(e.f0 % 880)"}
{"prompt": "用如下schema的图:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_pay_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_likes_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));查找person的1度以内的环", "completion": "match(a:person)->{0,0}(b)->(a) return a.id, b.id as b_id"}
{"prompt": "用这个schema:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_pay_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_likes_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));帮我查询所有孙轩的点支付的person,然后帮我查询孙轩被认识的person,一起返回", "completion": "match(a where a.name = '孙轩')-[e:person_pay_person]->(b:person),(a where a.name = '孙轩')<-[e2:person_knows_person]-(c:person) return a, b, c"}
{"prompt": "用如下schema的图:CREATE GRAPH g ( Vertex student ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex university ( id int ID, name varchar, level int, value int ), Vertex course ( id int ID, name varchar, credit int, courseHour int, value int ), Vertex teacher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, size int, value int ), Edge student_selects_course ( srcId int FROM student SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_teacher ( srcId int FROM department SOURCE ID, targetId int FROM teacher DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_student ( srcId int FROM department SOURCE ID, targetId int FROM student DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_has_department ( srcId int FROM university SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ), Edge teacher_teach_course ( srcId int FROM teacher SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下4个查询:1: 请帮我找出与部门法学院有department_has_student关系的1跳的环;2: 找出和department文学院有department_has_teacher关系的teacher,再找出以department_has_student关系关联了文学院的student;3: 请帮我找出全部源点标签等于teacher,边标签等于teacher_teach_course的边,返回这些边的srcId对75取余乘66的和,和f0乘953的值;4: 查找全部源点满足条件age等于6且height不是196,或id不是43,目标点满足条件value等于208或courseHour对34取余的最大值大于等于2或name是线性代数,且类型是teacher_teach_course的边;", "completion": "查询语句为:1: match(a:department where name = '法学院')-[e:department_has_student]->{0,0}(b)->(a) return a.id, b.id as b_id;2: match(a:department where a.name = '文学院')-[e:department_has_teacher]->(b:teacher),(a:department where a.name = '文学院')<-[e2:department_has_student]-(c:student)return a, b, c;3: match(a:teacher)-[e:teacher_teach_course]->(b) return SUM(e.srcId % 75 * 66), e.f0 * 953;4: match(a where (a.age = 6 and a.height <> 196) or a.id <> 43)-[e:teacher_teach_course]->(b where b.value = 208 or MAX(b.courseHour % 34) >= 2 or b.name = '线性代数') return e;"}
{"prompt": "用如下schema的图:CREATE GRAPH g ( Vertex student ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex university ( id int ID, name varchar, level int, value int ), Vertex course ( id int ID, name varchar, credit int, courseHour int, value int ), Vertex teacher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, size int, value int ), Edge student_selects_course ( srcId int FROM student SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_teacher ( srcId int FROM department SOURCE ID, targetId int FROM teacher DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_student ( srcId int FROM department SOURCE ID, targetId int FROM student DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_has_department ( srcId int FROM university SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ), Edge teacher_teach_course ( srcId int FROM teacher SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下5个查询:1: 给出与student徐思琪和徐强都存在student_selects_course关系的点;2: 找出大学清华大学拥有的部门,被其他大学拥有的数量;3: 找出被大学复旦大学拥有的部门;4: 请帮我找出和teacher马若涵有teacher_teach_course关系的course,以及和teacher杜若涵有teacher_teach_course关系的course,将它们都返回;5: 找出大小在93到99之间,id不是43的部门拥有的学生的名称,以及这些学生 选择的课程的名称;", "completion": "查询语句为:1: match(a:student where a.name='徐思琪')-[e:student_selects_course]->(b)<-[e2:student_selects_course]-(c:student where c.name='徐强') return b;2: match(a:university where a.name='清华大学')-[e:university_has_department]->(b:department)<-[e2:university_has_department]-(c:university) return COUNT(c);3: match(a:department)<-[e:university_has_department]-(b:university where b.name='复旦大学') return a, b;4: match(a:teacher where a.name = '马若涵')-[e:teacher_teach_course]->(b:course),(c:teacher where c.name = '杜若涵')-[e2:teacher_teach_course]->(d:course)return a, b, c, d;5: match(a:department where (a.size BETWEEN 93 AND 99) and a.id <> 43)-[e:department_has_student]->(b:student)-[e2:student_selects_course]->(c:course) return b.name as b_name, c.name as c_name;"}
{"prompt": "使用这个图:CREATE GRAPH g ( Vertex student ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex university ( id int ID, name varchar, level int, value int ), Vertex course ( id int ID, name varchar, credit int, courseHour int, value int ), Vertex teacher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, size int, value int ), Edge student_selects_course ( srcId int FROM student SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_teacher ( srcId int FROM department SOURCE ID, targetId int FROM teacher DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_student ( srcId int FROM department SOURCE ID, targetId int FROM student DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_has_department ( srcId int FROM university SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ), Edge teacher_teach_course ( srcId int FROM teacher SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下9个查询:1: 请帮我找出与名为周建聪和周国强的点共同选择的,标签等于课程的节点;2: 返回全部和名为体育学院的department有relation关系,或有relation的relation关系的student;3: 给出和student何梅有student_selects_course关系的course,以及和teacher李建国有teacher_teach_course关系的course,将它们都返回;4: 请帮我查找全部名为清华大学的,id不是67或名字为物理学院的相关者,返回这些相关者的大小,和边的源点id,f0;5: 返回部门物理学院 拥有的教师,返回教师 教的课程的价值对977取余的值 ;6: 帮我查询源点gender不是male或salary不为空,边类型为teacher_teach_course,且满足条件f1不等于true或f1不等于true或f1不等于true的边,返回这些边的weight减weight的值;7: 查找学生的三角的环,边类型为student_selects_course, 并返回这些点的id;8: 返回类型是大学的全部点,并根据价值升序排列;9: 找出标签等于department_has_teacher,并且srcId小于19或f1等于false,且f0大于等于549的边;", "completion": "查询语句为:1: match(a where a.name = '周建聪')-[e:student_selects_course]->(b:course)<-[e2:student_selects_course]-(c where c.name = '周国强') return b;2: match(a:department where n.name=体育学院)-[e:relation]->{1,2}(b:student) return b;3: match(a:student where a.name = '何梅')-[e:student_selects_course]->(b:course),(c:teacher where c.name = '李建国')-[e2:teacher_teach_course]->(d:course)return a, b, c, d;4: match(a where a.name='清华大学')-[e:relation]->(b where b.id <> 67 or b.name = '物理学院') return b.size,e.srcId, e.f0;5: match(a:department where name = '物理学院')-[e:department_has_teacher]->(b:teacher)-[e2:teacher_teach_course]->(c:course) return c.value % 977;6: match(a where a.gender <> 'male' or (a.salary is not null))-[e:teacher_teach_course where e.f1 <> true or e.f1 <> true or e.f1 <> true]->(b) return e.weight - e.weight;7: match(a:student)-[e:student_selects_course]->(b)-[e2:student_selects_course]-(c)->(a) return a,b.id as b_id,c.id as c_id;8: match(a:university) return a order by a.value asc;9: match(a)-[e:department_has_teacher where (e.srcId < 19 or e.f1 = false) and e.f0 >= 549]->(b) return e;"}
{"prompt": "用这个schema:CREATE GRAPH g ( Vertex student ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex university ( id int ID, name varchar, level int, value int ), Vertex course ( id int ID, name varchar, credit int, courseHour int, value int ), Vertex teacher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, size int, value int ), Edge student_selects_course ( srcId int FROM student SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_teacher ( srcId int FROM department SOURCE ID, targetId int FROM teacher DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_student ( srcId int FROM department SOURCE ID, targetId int FROM student DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_has_department ( srcId int FROM university SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ), Edge teacher_teach_course ( srcId int FROM teacher SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ));生成8个查询语句:1: 给出department的三角的环,边标签等于department_has_teacher, 并返回这些点的id;2: 返回全部源点标签等于部门,目标点标签等于教师,标签等于department_has_teacher的边;3: 给出label为teacher的全部点,并根据gender升序排列;4: 查询部门以价值,大小分组的id, 根据id从大到小排序;5: 查询department数学学院has的teacher节点teach的course;6: 请帮我查找与学生陈若涵和马雪都存在student_selects_course关系的点;7: 找出157个和label为department的点有department_has_student关系的student,以及和这些student有student_selects_course关系的course;8: 返回全部与department生物学院有关系的department的size;", "completion": "查询语句为:1: match(a:department)-[e:department_has_teacher]->(b)-[e2:department_has_teacher]-(c)->(a) return a,b.id as b_id,c.id as c_id;2: match(a:department)-[e:department_has_teacher]->(b:teacher) return e;3: match(a:teacher) return a order by a.gender asc;4: match(a:department) return a.id group by a.value, a.size order by a.id desc;5: match(a:department where a.name = '数学学院')-[e:department_has_teacher]->(b:teacher)-[e2:teacher_teach_course]->(c:course) return c;6: match(a:student where a.name='陈若涵')-[e:student_selects_course]->(b)<-[e2:student_selects_course]-(c:student where c.name='马雪') return b;7: match(a:department)-[e:department_has_student]->(b:student)-[e2:student_selects_course]->(c:course) return c limit 157;8: match(a:department where a.name='生物学院')-[e]-(b:department) return b.size;"}
{"prompt": "给定图的schema如下:CREATE GRAPH g ( Vertex student ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex university ( id int ID, name varchar, level int, value int ), Vertex course ( id int ID, name varchar, credit int, courseHour int, value int ), Vertex teacher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, size int, value int ), Edge student_selects_course ( srcId int FROM student SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_teacher ( srcId int FROM department SOURCE ID, targetId int FROM teacher DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_student ( srcId int FROM department SOURCE ID, targetId int FROM student DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_has_department ( srcId int FROM university SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ), Edge teacher_teach_course ( srcId int FROM teacher SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ));生成3个查询语句:1: 帮我查询university的三角的环,边标签等于university_has_department, 并返回这些点的id;2: 请帮我找出类型是学生的点,并根据名字降序排列;3: 给出所有department以name,id,size分组的value, 根据value从小到大排序;", "completion": "查询语句为:1: match(a:university)-[e:university_has_department]->(b)-[e2:university_has_department]-(c)->(a) return a,b.id as b_id,c.id as c_id;2: match(a:student) return a order by a.name desc;3: match(a:department) return a.value group by a.name, a.id, a.size order by a.value asc;"}
{"prompt": "用如下schema的图:CREATE GRAPH g ( Vertex book ( id int ID, name varchar, id int ID, name varchar, category varchar, price int, wordCount int, createTime bigint ), Vertex publisher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex author ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex reader ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge author_write_book ( srcId int FROM author SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge author_knows_author ( srcId int FROM author SOURCE ID, targetId int FROM author DESTINATION ID, weight double, f0 int, f1 boolean ), Edge book_refers_book ( srcId int FROM book SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge publisher_publish_book ( srcId int FROM publisher SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge reader_likes_book ( srcId int FROM reader SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下5个查询:1: 请帮我找出名为孤城的book;2: 查找标签为book_refers_book,以及f0不为空或源点id大于96或源点id减186的个数为106的边;3: 返回名为吴国强的author;4: 请帮我查找作家何国强撰写的书,被其他编辑发布的数量;5: 返回全部书以类别,价格分组的名字, 根据名字降序排序;", "completion": "查询语句为:1: match(a:book where a.name = '孤城') return a;2: match(a)-[e:book_refers_book where (e.f0 is not null) or e.srcId > 96 or COUNT(e.srcId - 186) = 106]->(b) return e;3: match(a:author where a.name = '吴国强') return a;4: match(a:author where a.name='何国强')-[e:author_write_book]->(b:book)<-[e2:publisher_publish_book]-(c:publisher) return COUNT(c);5: match(a:book) return a.name group by a.category, a.price order by a.name desc;"}
{"prompt": "给定图的schema如下:CREATE GRAPH g ( Vertex book ( id int ID, name varchar, id int ID, name varchar, category varchar, price int, wordCount int, createTime bigint ), Vertex publisher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex author ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex reader ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge author_write_book ( srcId int FROM author SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge author_knows_author ( srcId int FROM author SOURCE ID, targetId int FROM author DESTINATION ID, weight double, f0 int, f1 boolean ), Edge book_refers_book ( srcId int FROM book SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge publisher_publish_book ( srcId int FROM publisher SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge reader_likes_book ( srcId int FROM reader SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下6个查询:1: 请帮我查找book少年闰土的所有标签为refers的边,并根据srcId从大到小排列,返回95个;2: 请帮我找出全部和书点有认识关系的书节点,且边满足条件源点id的数量大于等于157.45,目标书节点满足条件价格不等于18;3: 查询被publisher何国强publish的book;4: 查询147个id的求和值不等于183的编辑,根据名字从大到小排列;5: 找出179个gender等于181的author,根据name从小到大排列;6: 给出81个读者周强和陈思思,共同的朋友;", "completion": "查询语句为:1: match(a:book where a.name = '少年闰土')-[e:book_refers_book]->(b) return b order by e.srcId desc limit 95;2: match(a:book)-[e:knows where COUNT(e.srcId) >= 157.45]->(b:book where b.price <> 18) return b;3: match(a:book)<-[e:publisher_publish_book]-(b:publisher where b.name='何国强') return a, b;4: match(a:publisher where SUM(a.id) <> 183) return a order by a.name desc limit 147;5: match(a:author where a.gender = 181) return a order by a.name asc limit 179;6: match(a:reader where a.name='周强')-[e:friend]->(b)<-[e2:friend]-(c:reader where c.name='陈思思') return b limit 81;"}
{"prompt": "用如下schema的图:CREATE GRAPH g ( Vertex book ( id int ID, name varchar, id int ID, name varchar, category varchar, price int, wordCount int, createTime bigint ), Vertex publisher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex author ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex reader ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge author_write_book ( srcId int FROM author SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge author_knows_author ( srcId int FROM author SOURCE ID, targetId int FROM author DESTINATION ID, weight double, f0 int, f1 boolean ), Edge book_refers_book ( srcId int FROM book SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge publisher_publish_book ( srcId int FROM publisher SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge reader_likes_book ( srcId int FROM reader SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下4个查询:1: 请帮我查找所有名为吴伟的,id不等于36且name不等于java程序设计的partner,返回这些partner的price,和边的srcId;2: 给出从编辑kate出发,经过标签等于publisher_publish_book的边,走1度或2度到达的书点;3: 请帮我找出所有和author点有write关系的book节点,且边满足条件f0小于等于742,目标book节点满足条件price为空;4: 请帮我查找源点满足条件性别为male,性别是famale,目标点满足条件创建时间不是2031年12月28日,创建时间不等于2029年01月28日,价格不等于65,且类型是publisher_publish_book的边;", "completion": "查询语句为:1: match(a where a.name='吴伟')-[e:partner]->(b where b.id <> 36 and b.name <> 'java程序设计') return b.price,e.srcId;2: match(a:publisher where a.name='kate')-[e:publisher_publish_book]->{1,2}(b:book) return b;3: match(a:author)-[e:author_write_book where e.f0 <= 742]->(b:book where (b.price is null)) return b;4: match(a where a.gender = 'male' and a.gender = 'famale')-[e:publisher_publish_book]->(b where b.createTime <> '2031-12-28' and b.createTime <> '2029-01-28' and b.price <> 65) return e;"}
{"prompt": "用如下schema的图:CREATE GRAPH g ( Vertex book ( id int ID, name varchar, id int ID, name varchar, category varchar, price int, wordCount int, createTime bigint ), Vertex publisher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex author ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex reader ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge author_write_book ( srcId int FROM author SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge author_knows_author ( srcId int FROM author SOURCE ID, targetId int FROM author DESTINATION ID, weight double, f0 int, f1 boolean ), Edge book_refers_book ( srcId int FROM book SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge publisher_publish_book ( srcId int FROM publisher SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge reader_likes_book ( srcId int FROM reader SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ));生成7个查询语句:1: 查找与author杜轩存在author_knows_author关系,且与book少年闰土存在author_write_book关系的author节点，返回这些author的gender,id,及author杜轩的gender,及book少年闰土的category;2: 帮我查询作家周强的类型为朋友的边,并根据f0从小到大排列,返回118个;3: 帮我查询从reader孙建国出发,经过标签等于reader_likes_book的边,走2跳到达的book点;4: 查找所有书以创建时间,字数分组的名字, 根据名字从小到大排序;5: 请帮我查找与编辑孙雪有publisher_publish_book关系的3跳以内的环;6: 请帮我找出与book白夜行有关,且与book罪与罚有关系的book节点;7: 返回被publisher张科publish的book;", "completion": "查询语句为:1: match(a:author where a.name='杜轩')-[e:author_knows_author]->(b:author)<-[e2:author_write_book]-(c:book where c.name='少年闰土') return a.gender,b.gender, b.id,c.category;2: match(a:author where a.name = '周强')-[e:friend]->(b) return b order by e.f0 asc limit 118;3: match(a:reader where a.name='孙建国')-[e:reader_likes_book]->{2,2}(b:book) return b;4: match(a:book) return a.name group by a.createTime, a.wordCount order by a.name asc;5: match(a:publisher where name = '孙雪')-[e:publisher_publish_book]->{0,2}(b)->(a) return a.id, b.id as b_id;6: match(a:book where a.name='白夜行')-[e:book_refers_book]-(b:book)-[e2:book_refers_book]-(c:book where c.name='罪与罚') return b;7: match(a:book)<-[e:publisher_publish_book]-(b:publisher where b.name='张科') return a, b;"}
{"prompt": "给定图的schema如下:CREATE GRAPH g ( Vertex book ( id int ID, name varchar, id int ID, name varchar, category varchar, price int, wordCount int, createTime bigint ), Vertex publisher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex author ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex reader ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge author_write_book ( srcId int FROM author SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge author_knows_author ( srcId int FROM author SOURCE ID, targetId int FROM author DESTINATION ID, weight double, f0 int, f1 boolean ), Edge book_refers_book ( srcId int FROM book SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge publisher_publish_book ( srcId int FROM publisher SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge reader_likes_book ( srcId int FROM reader SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ));生成3个查询语句:1: 帮我查询标签为作家,名为韩伟的点,返回这些点的id,名字,年龄;2: 给出全部源点满足条件name是周梅且id为空且id大于10,目标点满足条件name是呐喊,且label为author_write_book的边;3: 查询前2个类型为publisher_publish_book的边;", "completion": "查询语句为:1: match(a:author where a.name = '韩伟') return a.id, a.name, a.age;2: match(a where a.name = '周梅' and (a.id is null) and a.id > 10)-[e:author_write_book]->(b where b.name = '呐喊') return e;3: match(a)-[e:publisher_publish_book]->(b) return e limit 2;"}
{"prompt": "给定图的schema如下:CREATE GRAPH g ( Vertex book ( id int ID, name varchar, id int ID, name varchar, category varchar, price int, wordCount int, createTime bigint ), Vertex publisher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex author ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex reader ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge author_write_book ( srcId int FROM author SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge author_knows_author ( srcId int FROM author SOURCE ID, targetId int FROM author DESTINATION ID, weight double, f0 int, f1 boolean ), Edge book_refers_book ( srcId int FROM book SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge publisher_publish_book ( srcId int FROM publisher SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge reader_likes_book ( srcId int FROM reader SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ));生成9个查询语句:1: 帮我查询前93个标签等于book_refers_book的边;2: 给出和publisher徐月有关的reader,称为X,再给出和这个X有关联的其他book,以及和X有关联的reader;3: 返回所有id为142的读者关联的书,和以发布关系关联了这些书的其他编辑;4: 查询类型是publisher的所有点,并根据name升序排列;5: 查找以发布关系关联了书计算机网络的编辑;6: 查找以撰写关系关联了书悲惨世界的作家;7: 帮我查询123个薪资小于4890的作家,根据id从小到大排列;8: 查询薪资在6229到8054之间或身高在167到187之间或id为空的节点;9: 返回全部和book白夜行有3到5跳关系的reader;", "completion": "查询语句为:1: match(a)-[e:book_refers_book]->(b) return e limit 93;2: match(a:publisher where a.name = '徐月')-[e]-(b:reader), (b:reader)-[e2]-(c:book),(b:reader)-[e3]-(d:reader) return a, b, c, d;3: match(a:reader where a.id = '142')-[e]-(b:book)<-[e2:publisher_publish_book]-(c:publisher) return b,c;4: match(a:publisher) return a order by a.name asc;5: match(a:book where a.name='计算机网络')<-[e:publisher_publish_book]-(b:publisher) return b;6: match(a:book where a.name='悲惨世界')<-[e:author_write_book]-(b:author) return b;7: match(a:author where a.salary < 4890) return a order by a.id asc limit 123;8: match(a where (a.salary BETWEEN 6229 AND 8054) or (a.height BETWEEN 167 AND 187) or (a.id is null)) return a;9: match(a:book where a.name='白夜行')-[e]->{3,5}(b:reader) return b;"}
{"prompt": "给定图的schema如下:CREATE GRAPH g ( Vertex doctor ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, address varchar, weight int ), Vertex patient ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex medicine ( id int ID, name varchar, price int, category varchar, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Edge patient_accept_prescription ( srcId int FROM patient SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_doctor ( srcId int FROM department SOURCE ID, targetId int FROM doctor DESTINATION ID, weight double, f0 int, f1 boolean ), Edge prescription_contain_medicine ( srcId int FROM prescription SOURCE ID, targetId int FROM medicine DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_creates_prescription ( srcId int FROM doctor SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_diagnose_patient ( srcId int FROM doctor SOURCE ID, targetId int FROM patient DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge doctor_belong_department ( srcId int FROM doctor SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下8个查询:1: 返回全部doctor的friend,或其friend的friend;2: 给出部门以id,权重,名字分组的名字, 根据名字升序排序;3: 请帮我找出类型是department_has_doctor,以及满足条件f1为false且srcId小于等于54,或f1等于false的边;4: 帮我查询病人以身高分组的年龄, 根据年龄升序排序;5: 查找医生王梅创造的处方,被其他医生创造的数量;6: 找出prescription以createTime分组的weight, 根据weight从小到大排序;7: 请帮我找出前125个满足条件id小于等于78且category为皮肤药,id小于等于82的medicine;8: 帮我查询和处方有关联的药品节点,并根据其价格,类别,id分组,返回价格,类别,id,以及权重减227乘25的值;", "completion": "查询语句为:1: match(a:doctor)-[e:friend]->{1,2}(b) return b;2: match(a:department) return a.name group by a.id, a.weight, a.name order by a.name asc;3: match(a)-[e:department_has_doctor where (e.f1 = false and e.srcId <= 54) or e.f1 = false]->(b) return e;4: match(a:patient) return a.age group by a.height order by a.age asc;5: match(a:doctor where a.name='王梅')-[e:doctor_creates_prescription]->(b:prescription)<-[e2:doctor_creates_prescription]-(c:doctor) return COUNT(c);6: match(a:prescription) return a.weight group by a.createTime order by a.weight asc;7: match(a:medicine where a.id <= 78 and a.category = '皮肤药' and a.id <= 82) return a limit 125;8: match(a:prescription)-[e:prescription_contain_medicine]-(b:medicine) return b.price, b.category, b.id, (b.weight - 227) * 25 group by b.price, b.category, b.id;"}
{"prompt": "用如下schema的图:CREATE GRAPH g ( Vertex doctor ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, address varchar, weight int ), Vertex patient ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex medicine ( id int ID, name varchar, price int, category varchar, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Edge patient_accept_prescription ( srcId int FROM patient SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_doctor ( srcId int FROM department SOURCE ID, targetId int FROM doctor DESTINATION ID, weight double, f0 int, f1 boolean ), Edge prescription_contain_medicine ( srcId int FROM prescription SOURCE ID, targetId int FROM medicine DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_creates_prescription ( srcId int FROM doctor SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_diagnose_patient ( srcId int FROM doctor SOURCE ID, targetId int FROM patient DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge doctor_belong_department ( srcId int FROM doctor SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下8个查询:1: 给出51个与陈国强和杜强都存在关系的处方节点;2: 返回与部门眼科有关系的部门, 返回和这些部门有关联的药品的,id加87的个数;3: 帮我查询doctor陈建国 creates的prescription,返回prescription contain的medicine的id的平均值减id减weight的值 ;4: 请帮我查找和doctor有关联的department节点,并根据其name,address,id分组,返回name,address,id,以及weight加866的最小值;5: 给出doctor郑月的类型为partner的边,并根据weight升序排列,返回23个;6: 查询doctor的三角的环,边标签等于doctor_creates_prescription, 并返回这些点的id;7: 请帮我找出处方Prescription_282包含的药品,被其他处方包含的数量;8: 请帮我查找和药品999感冒灵有2跳或3跳关系的处方;", "completion": "查询语句为:1: match(a where a.name='陈国强')-[e]->(b:prescription)<-[e2]-(c where c.name='杜强') return b limit 51;2: match(a:department where a.name= '眼科')-[e]-(b:department)-[e2]-(c:medicine) return COUNT(c.id + 87);3: match(a:doctor where name = '陈建国')-[e:doctor_creates_prescription]->(b:prescription)-[e2:prescription_contain_medicine]->(c:medicine) return AVG(c.id) - c.id - c.weight;4: match(a:doctor)-[e:doctor_belong_department]-(b:department) return b.name, b.address, b.id, MIN(b.weight + 866) group by b.name, b.address, b.id;5: match(a:doctor where a.name = '郑月')-[e:partner]->(b) return b order by e.weight asc limit 23;6: match(a:doctor)-[e:doctor_creates_prescription]->(b)-[e2:doctor_creates_prescription]-(c)->(a) return a,b.id as b_id,c.id as c_id;7: match(a:prescription where a.name='Prescription_282')-[e:prescription_contain_medicine]->(b:medicine)<-[e2:prescription_contain_medicine]-(c:prescription) return COUNT(c);8: match(a:medicine where a.name='999感冒灵')-[e]->{2,3}(b:prescription) return b;"}
{"prompt": "用如下schema的图:CREATE GRAPH g ( Vertex doctor ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, address varchar, weight int ), Vertex patient ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex medicine ( id int ID, name varchar, price int, category varchar, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Edge patient_accept_prescription ( srcId int FROM patient SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_doctor ( srcId int FROM department SOURCE ID, targetId int FROM doctor DESTINATION ID, weight double, f0 int, f1 boolean ), Edge prescription_contain_medicine ( srcId int FROM prescription SOURCE ID, targetId int FROM medicine DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_creates_prescription ( srcId int FROM doctor SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_diagnose_patient ( srcId int FROM doctor SOURCE ID, targetId int FROM patient DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge doctor_belong_department ( srcId int FROM doctor SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下8个查询:1: 返回被doctor郑建国belong的department;2: 请帮我找出与名为Prescription_264和Prescription_475的点共同contain的,标签为medicine的节点;3: 查询和医生李梅有doctor_belong_department关系的部门,以及和病人韩若涵有patient_accept_prescription关系的处方,将它们都返回;4: 查找医生张思思 属于的部门,返回部门 拥有的医生的年龄减75的值 ;5: 帮我查询doctor以age分组的name, 根据name升序排序;6: 请帮我查找与名为周梅和韩思琪的点共同诊断的,类型是病人的节点;7: 请帮我查找名为阿莫新林的medicine;8: 帮我查询与名为杜轩和吴宏的点共同accept的,类型为prescription的节点;", "completion": "查询语句为:1: match(a:department)<-[e:doctor_belong_department]-(b:doctor where b.name='郑建国') return a, b;2: match(a where a.name = 'Prescription_264')-[e:prescription_contain_medicine]->(b:medicine)<-[e2:prescription_contain_medicine]-(c where c.name = 'Prescription_475') return b;3: match(a:doctor where a.name = '李梅')-[e:doctor_belong_department]->(b:department),(c:patient where c.name = '韩若涵')-[e2:patient_accept_prescription]->(d:prescription)return a, b, c, d;4: match(a:doctor where name = '张思思')-[e:doctor_belong_department]->(b:department)-[e2:department_has_doctor]->(c:doctor) return c.age - 75;5: match(a:doctor) return a.name group by a.age order by a.name asc;6: match(a where a.name = '周梅')-[e:doctor_diagnose_patient]->(b:patient)<-[e2:doctor_diagnose_patient]-(c where c.name = '韩思琪') return b;7: match(a:medicine where a.name = '阿莫新林') return a;8: match(a where a.name = '杜轩')-[e:patient_accept_prescription]->(b:prescription)<-[e2:patient_accept_prescription]-(c where c.name = '吴宏') return b;"}
{"prompt": "使用这个图:CREATE GRAPH g ( Vertex doctor ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, address varchar, weight int ), Vertex patient ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex medicine ( id int ID, name varchar, price int, category varchar, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Edge patient_accept_prescription ( srcId int FROM patient SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_doctor ( srcId int FROM department SOURCE ID, targetId int FROM doctor DESTINATION ID, weight double, f0 int, f1 boolean ), Edge prescription_contain_medicine ( srcId int FROM prescription SOURCE ID, targetId int FROM medicine DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_creates_prescription ( srcId int FROM doctor SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_diagnose_patient ( srcId int FROM doctor SOURCE ID, targetId int FROM patient DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge doctor_belong_department ( srcId int FROM doctor SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ));生成3个查询语句:1: 找出名为徐梅的点的,id大于等于95或age大于21的friend,返回这些friend的age,和边的targetId,weight,timeStamp;2: 给出doctor diagnose的patient,返回其源点的height乘184的最大值,以及目标点的height的求和值乘height的最大值;3: 找出前35个类型为doctor_diagnose_patient的边;", "completion": "查询语句为:1: match(a where a.name='徐梅')-[e:friend]->(b where b.id >= 95 or b.age > 21) return b.age,e.targetId, e.weight, e.timeStamp;2: match(a:doctor)-[e:doctor_diagnose_patient]->(b:patient) return MAX(a.height * 184), MAX(SUM(b.height) * b.height);3: match(a)-[e:doctor_diagnose_patient]->(b) return e limit 35;"}
{"prompt": "使用这个图:CREATE GRAPH g ( Vertex doctor ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, address varchar, weight int ), Vertex patient ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex medicine ( id int ID, name varchar, price int, category varchar, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Edge patient_accept_prescription ( srcId int FROM patient SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_doctor ( srcId int FROM department SOURCE ID, targetId int FROM doctor DESTINATION ID, weight double, f0 int, f1 boolean ), Edge prescription_contain_medicine ( srcId int FROM prescription SOURCE ID, targetId int FROM medicine DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_creates_prescription ( srcId int FROM doctor SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_diagnose_patient ( srcId int FROM doctor SOURCE ID, targetId int FROM patient DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge doctor_belong_department ( srcId int FROM doctor SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ));生成7个查询语句:1: 请帮我查找所有源点类型为病人,边类型为patient_accept_prescription的边,返回这些边的目标点id减目标点id的最小值,和权重减124.67的值;2: 计算所有department的id减id除575的值;3: 请帮我查找doctor以age,name,id分组的id, 根据id降序排序;4: 找出全部名为孙轩的,地址不等于A座的伙伴,返回这些伙伴的名字,和边的目标点id,权重,源点id;5: 返回所有和doctor王轩有关系的prescription节点,返回这些点的createTime;6: 查询与名为孙思思和黄雪的点共同creates的,类型为prescription的节点;7: 查找从department传染部出发,经过类型是department_has_doctor的边,走1到4度到达的doctor点;", "completion": "查询语句为:1: match(a:patient)-[e:patient_accept_prescription]->(b) return MIN(e.targetId - e.targetId), e.weight - 124.67;2: match(a:department) return (a.id - a.id) / 575;3: match(a:doctor) return a.id group by a.age, a.name, a.id order by a.id desc;4: match(a where a.name='孙轩')-[e:partner]->(b where b.address <> 'A座') return b.name,e.targetId, e.weight, e.srcId;5: match(a:doctor where a.name='王轩')-[e]-(b:prescription) return b.createTime;6: match(a where a.name = '孙思思')-[e:doctor_creates_prescription]->(b:prescription)<-[e2:doctor_creates_prescription]-(c where c.name = '黄雪') return b;7: match(a:department where a.name='传染部')-[e:department_has_doctor]->{1,4}(b:doctor) return b;"}
{"prompt": "用这个schema:CREATE GRAPH g ( Vertex doctor ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, address varchar, weight int ), Vertex patient ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex medicine ( id int ID, name varchar, price int, category varchar, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Edge patient_accept_prescription ( srcId int FROM patient SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_doctor ( srcId int FROM department SOURCE ID, targetId int FROM doctor DESTINATION ID, weight double, f0 int, f1 boolean ), Edge prescription_contain_medicine ( srcId int FROM prescription SOURCE ID, targetId int FROM medicine DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_creates_prescription ( srcId int FROM doctor SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_diagnose_patient ( srcId int FROM doctor SOURCE ID, targetId int FROM patient DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge doctor_belong_department ( srcId int FROM doctor SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ));生成9个查询语句:1: 查询医生王伟的相关者,的权重加119.51的最小值;2: 请帮我查找类型是medicine的点,返回183个;3: 找出与doctor吴轩存在doctor_diagnose_patient关系,且与prescription Prescription_409存在patient_accept_prescription关系的patient节点，返回这些patient的age,及doctor吴轩的id,及prescription Prescription_409的name;4: 查找前61个标签等于patient_accept_prescription的边;5: 请帮我找出从病人杜强出发,经过标签等于patient_accept_prescription的边,走3到6跳到达的处方点;6: 查询52个性别不等于famale或年龄小于等于193的病人,根据名字从大到小排列;7: 帮我查询前129个标签为doctor_diagnose_patient的边;8: 帮我查询全部和名为Prescription_428的prescription有friend关系,或有friend的friend关系的medicine;9: 返回department急诊部has的doctor,被其他department has的数量;", "completion": "查询语句为:1: match(a:doctor where a.name= '王伟')-[e:relation]->(b) return MIN(e.weight + 119.51);2: match(a:medicine) return a limit 183;3: match(a:doctor where a.name='吴轩')-[e:doctor_diagnose_patient]->(b:patient)<-[e2:patient_accept_prescription]-(c:prescription where c.name='Prescription_409') return a.id,b.age,c.name;4: match(a)-[e:patient_accept_prescription]->(b) return e limit 61;5: match(a:patient where a.name='杜强')-[e:patient_accept_prescription]->{3,6}(b:prescription) return b;6: match(a:patient where a.gender <> 'famale' or a.age <= 193) return a order by a.name desc limit 52;7: match(a)-[e:doctor_diagnose_patient]->(b) return e limit 129;8: match(a:prescription where n.name=Prescription_428)-[e:friend]->{1,2}(b:medicine) return b;9: match(a:department where a.name='急诊部')-[e:department_has_doctor]->(b:doctor)<-[e2:department_has_doctor]-(c:department) return COUNT(c);"}
{"prompt": "用如下schema的图:CREATE GRAPH g ( Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex forum ( id int ID, name varchar, peopleNumber int, createTime bigint, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex post ( id int ID, name varchar, lang varchar, createTime bigint, wordCount int, value int ), Vertex tag ( id int ID, name varchar, value int ), Edge forum_contain_post ( srcId int FROM forum SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_publish_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_likes_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge post_has_tag ( srcId int FROM post SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge forum_contain_person ( srcId int FROM forum SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下3个查询:1: 请帮我找出全部标签以id,名字,价值分组的名字, 根据名字降序排序;2: 给出全部名为周科的点喜欢的帖子;3: 请帮我查找类型为用户的点;", "completion": "查询语句为:1: match(a:tag) return a.name group by a.id, a.name, a.value order by a.name desc;2: match(a where a.name='周科')-[e:user_likes_post]->(b:post) return b;3: match(a:user) return a;"}
{"prompt": "使用这个图:CREATE GRAPH g ( Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex forum ( id int ID, name varchar, peopleNumber int, createTime bigint, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex post ( id int ID, name varchar, lang varchar, createTime bigint, wordCount int, value int ), Vertex tag ( id int ID, name varchar, value int ), Edge forum_contain_post ( srcId int FROM forum SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_publish_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_likes_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge post_has_tag ( srcId int FROM post SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge forum_contain_person ( srcId int FROM forum SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下4个查询:1: 返回全部源点人数小于862,目标点身高大于等于166,且类型为forum_contain_person的边;2: 找出和用户有关联的帖子节点,并根据其名字分组,返回名字,以及价值对847取余的最大值;3: 计算所有person的height的最大值减197除32的最大值;4: 查找与论坛推特有forum_contain_person关系的2跳的环;", "completion": "查询语句为:1: match(a where a.peopleNumber < 862)-[e:forum_contain_person]->(b where b.height >= 166) return e;2: match(a:user)-[e:user_likes_post]-(b:post) return b.name, MAX(b.value % 847) group by b.name;3: match(a:person) return MAX((MAX(a.height) - 197) / 32);4: match(a:forum where name = '推特')-[e:forum_contain_person]->{1,1}(b)->(a) return a.id, b.id as b_id;"}
{"prompt": "使用这个图:CREATE GRAPH g ( Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex forum ( id int ID, name varchar, peopleNumber int, createTime bigint, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex post ( id int ID, name varchar, lang varchar, createTime bigint, wordCount int, value int ), Vertex tag ( id int ID, name varchar, value int ), Edge forum_contain_post ( srcId int FROM forum SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_publish_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_likes_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge post_has_tag ( srcId int FROM post SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge forum_contain_person ( srcId int FROM forum SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下3个查询:1: 帮我查询id为160的person有关的user的partner, 再帮我查询和user有关系的friend;2: 返回用户孙强 发布的帖子,返回帖子 拥有的标签的value的最小值加191的平均值 ;3: 请帮我查找标签等于forum的所有点,并根据value从大到小排列;", "completion": "查询语句为:1: match(a:person where id = '160')-[e]-(b:user)-[e2:partner]->(c), (b:user)-[e3:friend]->(d) return a, b, c, d;2: match(a:user where name = '孙强')-[e:user_publish_post]->(b:post)-[e2:post_has_tag]->(c:tag) return AVG(MIN(c.value) + 191);3: match(a:forum) return a order by a.value desc;"}
{"prompt": "使用这个图:CREATE GRAPH g ( Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex forum ( id int ID, name varchar, peopleNumber int, createTime bigint, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex post ( id int ID, name varchar, lang varchar, createTime bigint, wordCount int, value int ), Vertex tag ( id int ID, name varchar, value int ), Edge forum_contain_post ( srcId int FROM forum SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_publish_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_likes_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge post_has_tag ( srcId int FROM post SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge forum_contain_person ( srcId int FROM forum SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));生成9个查询语句:1: 请帮我查找与名为赵建国和吴建聪的点共同发布的,类型为帖子的节点;2: 返回user李强publish的post节点has的tag;3: 查找源点名字不等于中国诗词论坛,名字不是天涯论坛,边标签等于forum_contain_person,且满足条件权重大于等于116.15的边,返回这些边的权重减192.08对9取余的最大值;4: 请帮我查找所有Post_447的点拥有的标签,然后请帮我查找Post_447被喜欢的用户,一起返回;5: 找出全部与user有关系的post节点,且post节点的wordCount大于275,并返回这些点的value的数量对820取余的值,以及wordCount对37取余除321的值;6: 查找用户李雪 喜欢的帖子,返回帖子 拥有的标签的价值减998的值 ;7: 查询127个名为Amily的点publish的标签为post的节点,且节点createTime不等于2017年05月11日或wordCount为空;8: 帮我查询forum contain的person,返回其源点的value乘value的值,以及目标点的id的和加95的平均值;9: 请帮我查找用户张梅的全部标签等于朋友的边,并根据f0升序排列,返回133个;", "completion": "查询语句为:1: match(a where a.name = '赵建国')-[e:user_publish_post]->(b:post)<-[e2:user_publish_post]-(c where c.name = '吴建聪') return b;2: match(a:user where a.name = '李强')-[e:user_publish_post]->(b:post)-[e2:post_has_tag]->(c:tag) return c;3: match(a where a.name <> '中国诗词论坛' and a.name <> '天涯论坛')-[e:forum_contain_person where e.weight >= 116.15]->(b) return MAX(e.weight - 192.08 % 9);4: match(a where a.name = 'Post_447')-[e:post_has_tag]->(b:tag),(a where a.name = 'Post_447')<-[e2:user_likes_post]-(c:user) return a, b, c;5: match(a:user)-[e]->(b:post where b.wordCount > 275) return COUNT(b.value) % 820, b.wordCount % 37 / 321;6: match(a:user where name = '李雪')-[e:user_likes_post]->(b:post)-[e2:post_has_tag]->(c:tag) return c.value - 998;7: match(a where a.name='Amily')-[e:user_publish_post]->(b:post where b.createTime <> '2017-05-11' or (b.wordCount is null)) return b limit 127;8: match(a:forum)-[e:forum_contain_person]->(b:person) return a.value * a.value, AVG(SUM(b.id) + 95);9: match(a:user where a.name = '张梅')-[e:friend]->(b) return b order by e.f0 asc limit 133;"}
{"prompt": "用这个schema:CREATE GRAPH g ( Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex forum ( id int ID, name varchar, peopleNumber int, createTime bigint, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex post ( id int ID, name varchar, lang varchar, createTime bigint, wordCount int, value int ), Vertex tag ( id int ID, name varchar, value int ), Edge forum_contain_post ( srcId int FROM forum SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_publish_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_likes_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge post_has_tag ( srcId int FROM post SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge forum_contain_person ( srcId int FROM forum SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));生成9个查询语句:1: 请帮我查找83个帖子Post_475和Post_101,共同的朋友;2: 返回与名为李轩和何伟的点共同喜欢的,标签为帖子的节点;3: 帮我查询user周月的所有标签为relation的边,并根据f0升序排列,返回135个;4: 帮我查询26个价值为空,价值减905不是29,或id在12到15之间的标签,根据价值从大到小排列;5: 给出类型为user_publish_post,以及f1为false且f1不等于false的边;6: 请帮我查找id为157的user关联的post,和以publish关系关联了这些post的其他user;7: 查询和帖子Post_105有关的标签,称为X,再查询和这个X有关联的其他论坛,以及和X有关联的person;8: 请帮我找出类型是user的点,返回177个;9: 返回前123个满足条件创建时间不是2006年01月24日的帖子;", "completion": "查询语句为:1: match(a:post where a.name='Post_475')-[e:friend]->(b)<-[e2:friend]-(c:post where c.name='Post_101') return b limit 83;2: match(a where a.name = '李轩')-[e:user_likes_post]->(b:post)<-[e2:user_likes_post]-(c where c.name = '何伟') return b;3: match(a:user where a.name = '周月')-[e:relation]->(b) return b order by e.f0 asc limit 135;4: match(a:tag where ((a.value is null) and a.value - 905 <> 29) or (a.id BETWEEN 12 AND 15)) return a order by a.value desc limit 26;5: match(a)-[e:user_publish_post where e.f1 = false and e.f1 <> false]->(b) return e;6: match(a:user where a.id = '157')-[e]-(b:post)<-[e2:user_publish_post]-(c:user) return b,c;7: match(a:post where a.name = 'Post_105')-[e]-(b:tag), (b:tag)-[e2]-(c:forum),(b:tag)-[e3]-(d:person) return a, b, c, d;8: match(a:user) return a limit 177;9: match(a:post where a.createTime <> '2006-01-24') return a limit 123;"}
{"prompt": "使用这个图:CREATE GRAPH g ( Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Edge issue_belong_repository ( srcId int FROM issue SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ), Edge repository_has_user ( srcId int FROM repository SOURCE ID, targetId int FROM user DESTINATION ID, weight double, f0 int, f1 boolean ), Edge repository_has_issue ( srcId int FROM repository SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean ), Edge repository_has_issue ( srcId int FROM repository SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_creates_issue ( srcId int FROM user SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge issue_belong_repository ( srcId int FROM issue SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_creates_issue ( srcId int FROM user SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_likes_repository ( srcId int FROM user SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下5个查询:1: 查找169个与Prescription_431和Prescription_319都存在关系的prescription节点;2: 帮我查询用户Tom的标签为相关者的边,并根据源点id从大到小排列,返回17个;3: 查询类型是处方的点,返回36个;4: 计算所有user的id减58的值;5: 查询源点类型为用户,边类型为user_creates_issue的边,返回这些边的源点id减52除94的最小值,和权重乘113.03加权重加803的值;", "completion": "查询语句为:1: match(a where a.name='Prescription_431')-[e]->(b:prescription)<-[e2]-(c where c.name='Prescription_319') return b limit 169;2: match(a:user where a.name = 'Tom')-[e:relation]->(b) return b order by e.srcId desc limit 17;3: match(a:prescription) return a limit 36;4: match(a:user) return a.id - 58;5: match(a:user)-[e:user_creates_issue]->(b) return MIN((e.srcId - 52) / 94), e.weight * 113.03 + e.weight + 803;"}
{"prompt": "用这个schema:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex loan ( id int ID, amount double, weight int ), Vertex account ( id int ID, name varchar, createTime bigint, lastLoginTime bigint, isBlock boolean, value int ), Edge person_invest_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_apply_loan ( srcId int FROM person SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_apply_loan ( srcId int FROM company SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge loan_deposit_account ( srcId int FROM loan SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_repay_loan ( srcId int FROM account SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_transfer_account ( srcId int FROM account SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_own_account ( srcId int FROM person SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下9个查询:1: 查找和person陈伟有person_own_account关系的账号,以及和贷款defaultName有loan_deposit_account关系的账号,将它们都返回;2: 查询account Faker的标签为friend的边,并根据targetId降序排列,返回178个;3: 请帮我找出被公司滴滴申请的贷款;4: 找出标签等于账号的点,并根据是否冻结升序排列;5: 请帮我查找所有和account XiaoHu之间有account_repay_loan关系的loan;6: 找出和公司谷歌有关的账号,再找出和谷歌company_apply_loan的其他贷款,返回它们;7: 返回源点满足条件人数大于等于858,目标点满足条件权重加682的最小值等于23,且类型是company_apply_loan的边;8: 请帮我找出label为账号,名为Zeus的点,返回这些点的id;9: 查找loan defaultName deposit的account,返回account transfer的account的id加87的最大值 ;", "completion": "查询语句为:1: match(a:person where a.name = '陈伟')-[e:person_own_account]->(b:account),(c:loan where c.name = 'defaultName')-[e2:loan_deposit_account]->(d:account)return a, b, c, d;2: match(a:account where a.name = 'Faker')-[e:friend]->(b) return b order by e.targetId desc limit 178;3: match(a:loan)<-[e:company_apply_loan]-(b:company where b.name='滴滴') return a, b;4: match(a:account) return a order by a.isBlock asc;5: match(a:account where a.name='XiaoHu')-[e:account_repay_loan]->(b:loan) return b;6: match(a:company where a.name = '谷歌')-[e]-(b:account), (a:company)-[e2:company_apply_loan]->(c:loan) return a, b, c;7: match(a where a.peopleNumber >= 858)-[e:company_apply_loan]->(b where MIN(b.weight + 682) = 23) return e;8: match(a:account where a.name = 'Zeus') return a.id;9: match(a:loan where name = 'defaultName')-[e:loan_deposit_account]->(b:account)-[e2:account_transfer_account]->(c:account) return MAX(c.id + 87);"}
{"prompt": "用如下schema的图:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex loan ( id int ID, amount double, weight int ), Vertex account ( id int ID, name varchar, createTime bigint, lastLoginTime bigint, isBlock boolean, value int ), Edge person_invest_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_apply_loan ( srcId int FROM person SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_apply_loan ( srcId int FROM company SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge loan_deposit_account ( srcId int FROM loan SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_repay_loan ( srcId int FROM account SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_transfer_account ( srcId int FROM account SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_own_account ( srcId int FROM person SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下5个查询:1: 返回id为154的account关联的account,和以transfer关系关联了这些account的其他account;2: 给出160个id为空或人数不等于882,且价值大于638的公司,根据名字从小到大排列;3: 查询和person徐思琪有关的person,再查询和徐思琪person_invest_company的其他company,返回它们;4: 给出与company腾讯有company_apply_loan关系的3跳的环;5: 返回全部和名为蚂蚁集团的company有friend关系,或有friend的friend关系的loan;", "completion": "查询语句为:1: match(a:account where a.id = '154')-[e]-(b:account)<-[e2:account_transfer_account]-(c:account) return b,c;2: match(a:company where ((a.id is null) or a.peopleNumber <> 882) and a.value > 638) return a order by a.name asc limit 160;3: match(a:person where a.name = '徐思琪')-[e]-(b:person), (a:person)-[e2:person_invest_company]->(c:company) return a, b, c;4: match(a:company where name = '腾讯')-[e:company_apply_loan]->{2,2}(b)->(a) return a.id, b.id as b_id;5: match(a:company where n.name=蚂蚁集团)-[e:friend]->{1,2}(b:loan) return b;"}
{"prompt": "用这个schema:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex loan ( id int ID, amount double, weight int ), Vertex account ( id int ID, name varchar, createTime bigint, lastLoginTime bigint, isBlock boolean, value int ), Edge person_invest_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_apply_loan ( srcId int FROM person SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_apply_loan ( srcId int FROM company SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge loan_deposit_account ( srcId int FROM loan SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_repay_loan ( srcId int FROM account SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_transfer_account ( srcId int FROM account SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_own_account ( srcId int FROM person SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下7个查询:1: 查找所有defaultName1的点deposit的account,然后查找defaultName1被apply的person,一起返回;2: 请帮我查找前72个满足条件name的平均值小于30,height对150取余的平均值小于等于4766,id不为空的person;3: 请帮我查找所有和person郑红之间有person_invest_company关系的公司;4: 找出全部源点类型为贷款,目标点类型为账号,类型为loan_deposit_account的边;5: 返回以申请关系关联了贷款defaultName的person;6: 帮我查询名为Zeus的账号;7: 返回贷款存款的账号,返回其源点的金额乘5434.75的值,以及目标点的id减24的值;", "completion": "查询语句为:1: match(a where a.name = 'defaultName1')-[e:loan_deposit_account]->(b:account),(a where a.name = 'defaultName1')<-[e2:person_apply_loan]-(c:person) return a, b, c;2: match(a:person where AVG(a.name) < 30 and AVG(a.height % 150) <= 4766 and (a.id is not null)) return a limit 72;3: match(a:person where a.name='郑红')-[e:person_invest_company]->(b:company) return b;4: match(a:loan)-[e:loan_deposit_account]->(b:account) return e;5: match(a:loan where a.name='defaultName')<-[e:person_apply_loan]-(b:person) return b;6: match(a:account where a.name = 'Zeus') return a;7: match(a:loan)-[e:loan_deposit_account]->(b:account) return a.amount * 5434.75, b.id - 24;"}
{"prompt": "给定图的schema如下:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex loan ( id int ID, amount double, weight int ), Vertex account ( id int ID, name varchar, createTime bigint, lastLoginTime bigint, isBlock boolean, value int ), Edge person_invest_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_apply_loan ( srcId int FROM person SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_apply_loan ( srcId int FROM company SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge loan_deposit_account ( srcId int FROM loan SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_repay_loan ( srcId int FROM account SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_transfer_account ( srcId int FROM account SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_own_account ( srcId int FROM person SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean ));生成3个查询语句:1: 请帮我查找20个和标签为person的点有person_apply_loan关系的贷款,且和这些贷款有loan_deposit_account关系的账号;2: 请帮我找出所有person以salary分组的age, 根据age降序排序;3: 返回所有和company字节有关系的person节点,返回这些点的name;", "completion": "查询语句为:1: match(a:person)-[e:person_apply_loan]->(b:loan)-[e2:loan_deposit_account]->(c:account) return c limit 20;2: match(a:person) return a.age group by a.salary order by a.age desc;3: match(a:company where a.name='字节')-[e]-(b:person) return b.name;"}
{"prompt": "使用这个图:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex loan ( id int ID, amount double, weight int ), Vertex account ( id int ID, name varchar, createTime bigint, lastLoginTime bigint, isBlock boolean, value int ), Edge person_invest_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_apply_loan ( srcId int FROM person SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_apply_loan ( srcId int FROM company SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge loan_deposit_account ( srcId int FROM loan SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_repay_loan ( srcId int FROM account SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_transfer_account ( srcId int FROM account SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_own_account ( srcId int FROM person SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean ));生成7个查询语句:1: 返回与账号有关系的person节点,且person节点的年龄不是2,并返回这些点的薪资加薪资的平均值,以及id减0对6537取余的值;2: 返回account XiaoHu的全部类型是friend的边,并根据srcId从小到大排列,返回144个;3: 返回所有person以name,id,gender分组的name, 根据name从小到大排序;4: 请帮我查找person Alan的所有标签为相关者的边,并根据时间戳降序排列,返回151个;5: 帮我查询与公司谷歌和滴滴都存在company_apply_loan关系的点;6: 返回和loan有关联的account节点,并根据其lastLoginTime,value分组,返回lastLoginTime,value,以及id乘id除567减49的求和值;7: 请帮我查找源点类型是company,边类型是company_apply_loan,并且f1不等于false的边;", "completion": "查询语句为:1: match(a:account)-[e]->(b:person where b.age <> 2) return AVG(b.salary + b.salary), b.id - 0 % 6537;2: match(a:account where a.name = 'XiaoHu')-[e:friend]->(b) return b order by e.srcId asc limit 144;3: match(a:person) return a.name group by a.name, a.id, a.gender order by a.name asc;4: match(a:person where a.name = 'Alan')-[e:relation]->(b) return b order by e.timeStamp desc limit 151;5: match(a:company where a.name='谷歌')-[e:company_apply_loan]->(b)<-[e2:company_apply_loan]-(c:company where c.name='滴滴') return b;6: match(a:loan)-[e:loan_deposit_account]-(b:account) return b.lastLoginTime, b.value, SUM(b.id * b.id / 567 - 49) group by b.lastLoginTime, b.value;7: match(a:company)-[e:company_apply_loan where e.f1 <> false]->(b) return e;"}
{"prompt": "给定图的schema如下:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex loan ( id int ID, amount double, weight int ), Vertex account ( id int ID, name varchar, createTime bigint, lastLoginTime bigint, isBlock boolean, value int ), Edge person_invest_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_apply_loan ( srcId int FROM person SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_apply_loan ( srcId int FROM company SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge loan_deposit_account ( srcId int FROM loan SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_repay_loan ( srcId int FROM account SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_transfer_account ( srcId int FROM account SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_own_account ( srcId int FROM person SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean ));生成3个查询语句:1: 请帮我找出所有person以id,身高,性别分组的身高, 根据身高降序排序;2: 请帮我查找和账号有关联的账号节点,并根据其id,名字,上次登录时间分组,返回id,名字,上次登录时间,以及价值减585的值;3: 给出person杜国强apply的loan,被其他company apply的数量;", "completion": "查询语句为:1: match(a:person) return a.height group by a.id, a.height, a.gender order by a.height desc;2: match(a:account)-[e:account_transfer_account]-(b:account) return b.id, b.name, b.lastLoginTime, b.value - 585 group by b.id, b.name, b.lastLoginTime;3: match(a:person where a.name='杜国强')-[e:person_apply_loan]->(b:loan)<-[e2:company_apply_loan]-(c:company) return COUNT(c);"}
{"prompt": "使用这个图:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex software ( id int ID, name varchar, lang varchar, stars int, openSource boolean, value int ), Edge person_commits_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_creates_software ( srcId int FROM company SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_employee_person ( srcId int FROM company SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_belong_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_buy_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge software_uses_software ( srcId int FROM software SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下7个查询:1: 查询类型为company_creates_software,以及f1不是true的边;2: 返回person的三角的环,边label为person_buy_software, 并返回这些点的id;3: 查询所有company以id分组的id, 根据id降序排序;4: 请帮我找出全部源点age减96的最大值大于164,目标点salary小于1217,name是黄国强,age除65小于169,且label为person_knows_person的边;5: 帮我查询25个与Redis和SprintBoot都存在关系的公司节点;6: 给出类型是公司的全部点,并根据规格降序排列;7: 找出value小于等于957,openSource为true,value对329取余小于4的节点;", "completion": "查询语句为:1: match(a)-[e:company_creates_software where e.f1 <> true]->(b) return e;2: match(a:person)-[e:person_buy_software]->(b)-[e2:person_buy_software]-(c)->(a) return a,b.id as b_id,c.id as c_id;3: match(a:company) return a.id group by a.id order by a.id desc;4: match(a where MAX(a.age - 96) > 164)-[e:person_knows_person]->(b where b.salary < 1217 and b.name = '黄国强' and b.age / 65 < 169) return e;5: match(a where a.name='Redis')-[e]->(b:company)<-[e2]-(c where c.name='SprintBoot') return b limit 25;6: match(a:company) return a order by a.scale desc;7: match(a where a.value <= 957 and a.openSource = true and a.value % 329 < 4) return a;"}
{"prompt": "用这个schema:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex software ( id int ID, name varchar, lang varchar, stars int, openSource boolean, value int ), Edge person_commits_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_creates_software ( srcId int FROM company SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_employee_person ( srcId int FROM company SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_belong_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_buy_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge software_uses_software ( srcId int FROM software SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下7个查询:1: 查找被person徐伟属于的公司;2: 查询person韩梅commits的software,被其他person commits的数量;3: 返回被person张梅belong的company;4: 查找和名为张建聪的person有朋友关系,或有朋友的朋友关系的软件;5: 找出前90个名字不等于腾讯且规格为medium且规格等于large的公司;6: 请帮我查找被person杜科belong的company;7: 查找标签为person的点;", "completion": "查询语句为:1: match(a:company)<-[e:person_belong_company]-(b:person where b.name='徐伟') return a, b;2: match(a:person where a.name='韩梅')-[e:person_commits_software]->(b:software)<-[e2:person_commits_software]-(c:person) return COUNT(c);3: match(a:company)<-[e:person_belong_company]-(b:person where b.name='张梅') return a, b;4: match(a:person where n.name=张建聪)-[e:friend]->{1,2}(b:software) return b;5: match(a:company where a.name <> '腾讯' and a.scale = 'medium' and a.scale = 'large') return a limit 90;6: match(a:company)<-[e:person_belong_company]-(b:person where b.name='杜科') return a, b;7: match(a:person) return a;"}
{"prompt": "用如下schema的图:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex software ( id int ID, name varchar, lang varchar, stars int, openSource boolean, value int ), Edge person_commits_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_creates_software ( srcId int FROM company SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_employee_person ( srcId int FROM company SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_belong_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_buy_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge software_uses_software ( srcId int FROM software SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下5个查询:1: 请帮我找出全部滴滴的点创造的软件,然后请帮我找出滴滴被属于的person,一起返回;2: 给出和person有关联的person节点,并根据其gender,salary,id分组,返回gender,salary,id,以及height的求和值对195取余的值;3: 返回27个person kate和周宏,共同的朋友;4: 请帮我找出196个和类型是company的点有company_employee_person关系的person,且和这些person有person_knows_person关系的person;5: 找出标签等于software_uses_software,并且满足条件f0不为空的边;", "completion": "查询语句为:1: match(a where a.name = '滴滴')-[e:company_creates_software]->(b:software),(a where a.name = '滴滴')<-[e2:person_belong_company]-(c:person) return a, b, c;2: match(a:person)-[e:person_knows_person]-(b:person) return b.gender, b.salary, b.id, SUM(b.height) % 195 group by b.gender, b.salary, b.id;3: match(a:person where a.name='kate')-[e:friend]->(b)<-[e2:friend]-(c:person where c.name='周宏') return b limit 27;4: match(a:company)-[e:company_employee_person]->(b:person)-[e2:person_knows_person]->(c:person) return c limit 196;5: match(a)-[e:software_uses_software where (e.f0 is not null)]->(b) return e;"}
{"prompt": "使用这个图:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex software ( id int ID, name varchar, lang varchar, stars int, openSource boolean, value int ), Edge person_commits_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_creates_software ( srcId int FROM company SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_employee_person ( srcId int FROM company SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_belong_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_buy_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge software_uses_software ( srcId int FROM software SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));生成9个查询语句:1: 找出所有与公司华为有关系的person的薪资;2: 请帮我找出所有名为Bilibili的,gender为famale或gender不是famale的friend,返回这些friend的gender,和边的weight;3: 查找所有和person点有属于关系的公司节点,且边满足条件f1不是false,目标公司节点满足条件peopleNumber的最小值减527减878乘76等于24;4: 查询和person有关联的公司节点,并根据其名字分组,返回名字,以及id加id的值;5: 查询和person有关联的公司节点,并根据其价值,名字,人数分组,返回价值,名字,人数,以及价值除价值的值;6: 请帮我查找所有源点类型是person,边类型是person_knows_person的边,返回这些边的目标点id对62取余乘974的求和值,和f0减713的个数;7: 帮我查询名为赵若涵的person;8: 找出源点标签为company,边标签为company_creates_software的边,返回这些边的srcId除146的值,和srcId减133的数量;9: 给出以认识关系关联了person李强的person;", "completion": "查询语句为:1: match(a:company where a.name='华为')-[e]-(b:person) return b.salary;2: match(a where a.name='Bilibili')-[e:friend]->(b where b.gender = 'famale' or b.gender <> 'famale') return b.gender,e.weight;3: match(a:person)-[e:person_belong_company where e.f1 <> false]->(b:company where (MIN(b.peopleNumber) - 527 - 878) * 76 = 24) return b;4: match(a:person)-[e:person_belong_company]-(b:company) return b.name, b.id + b.id group by b.name;5: match(a:person)-[e:person_belong_company]-(b:company) return b.value, b.name, b.peopleNumber, b.value / b.value group by b.value, b.name, b.peopleNumber;6: match(a:person)-[e:person_knows_person]->(b) return SUM(e.targetId % 62 * 974), COUNT(e.f0 - 713);7: match(a:person where a.name = '赵若涵') return a;8: match(a:company)-[e:company_creates_software]->(b) return e.srcId / 146, COUNT(e.srcId - 133);9: match(a:person where a.name='李强')<-[e:person_knows_person]-(b:person) return b;"}
{"prompt": "用这个schema:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex software ( id int ID, name varchar, lang varchar, stars int, openSource boolean, value int ), Edge person_commits_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_creates_software ( srcId int FROM company SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_employee_person ( srcId int FROM company SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_belong_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_buy_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge software_uses_software ( srcId int FROM software SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));生成3个查询语句:1: 查询全部与company有关系的person节点,且person节点的id小于等于62,并返回这些点的id加69的值,以及height减height对id取余的数量;2: 给出名为Spark的软件,以及与其有关的公司,并返回Spark的名字和这些公司的规格;3: 查询满足条件规格不是large的节点;", "completion": "查询语句为:1: match(a:company)-[e]->(b:person where b.id <= 62) return b.id + 69, COUNT(b.height - b.height % b.id);2: match(a:software where name = 'Spark')-[e]-(b:company) return a.name, b.scale;3: match(a where a.scale <> 'large') return a;"}
{"prompt": "给定图的schema如下:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex software ( id int ID, name varchar, lang varchar, stars int, openSource boolean, value int ), Edge person_commits_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_creates_software ( srcId int FROM company SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_employee_person ( srcId int FROM company SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_belong_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_buy_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge software_uses_software ( srcId int FROM software SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));生成3个查询语句:1: 查询与person郑若涵有关,且与person李若涵有关系的person节点;2: 查找person陈雪的所有标签为伙伴的边,并根据f0升序排列,返回23个;3: 返回全部名为赵轩的点属于的公司;", "completion": "查询语句为:1: match(a:person where a.name='郑若涵')-[e:person_knows_person]-(b:person)-[e2:person_knows_person]-(c:person where c.name='李若涵') return b;2: match(a:person where a.name = '陈雪')-[e:partner]->(b) return b order by e.f0 asc limit 23;3: match(a where a.name='赵轩')-[e:person_belong_company]->(b:company) return b;"}
{"prompt": "使用这个图:CREATE GRAPH g ( Vertex goods ( id int ID, name varchar, category varchar, price double, sellerNumber double, value int ), Vertex orders ( id int ID, name varchar, price double, value int ), Vertex seller ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex buyer ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge buyer_cancel_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge buyer_consult_seller ( srcId int FROM buyer SOURCE ID, targetId int FROM seller DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge seller_has_goods ( srcId int FROM seller SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_look_goods ( srcId int FROM buyer SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge orders_contain_goods ( srcId int FROM orders SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_creates_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));执行以下6个查询:1: 返回11个买家王思琪和张月,共同的朋友;2: 查找被卖家陈月拥有的商品;3: 查询所有和订单Order_444有2到4跳关系的订单;4: 返回173个id为空的卖家,根据薪资从小到大排列;5: 查询卖家的三角的环,边label为seller_has_goods, 并返回这些点的id;6: 请帮我找出gender的最小值不是97,salary不是7744的节点;", "completion": "查询语句为:1: match(a:buyer where a.name='王思琪')-[e:friend]->(b)<-[e2:friend]-(c:buyer where c.name='张月') return b limit 11;2: match(a:goods)<-[e:seller_has_goods]-(b:seller where b.name='陈月') return a, b;3: match(a:orders where a.name='Order_444')-[e]->{2,4}(b:orders) return b;4: match(a:seller where (a.id is null)) return a order by a.salary asc limit 173;5: match(a:seller)-[e:seller_has_goods]->(b)-[e2:seller_has_goods]-(c)->(a) return a,b.id as b_id,c.id as c_id;6: match(a where MIN(a.gender) <> 97 and a.salary <> 7744) return a;"}
{"prompt": "用如下schema的图:CREATE GRAPH g ( Vertex goods ( id int ID, name varchar, category varchar, price double, sellerNumber double, value int ), Vertex orders ( id int ID, name varchar, price double, value int ), Vertex seller ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex buyer ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge buyer_cancel_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge buyer_consult_seller ( srcId int FROM buyer SOURCE ID, targetId int FROM seller DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge seller_has_goods ( srcId int FROM seller SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_look_goods ( srcId int FROM buyer SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge orders_contain_goods ( srcId int FROM orders SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_creates_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));执行以下4个查询:1: 查询和orders Order_449有1度或2度关系的goods;2: 返回136个订单Order_327和Order_407,共同的伙伴;3: 帮我查询与买家郑宏有关系的卖家, 返回和这些卖家有关联的订单的,价格乘价格的值;4: 请帮我查找满足条件value不等于900或id在39到45之间的节点;", "completion": "查询语句为:1: match(a:orders where a.name='Order_449')-[e]->{1,2}(b:goods) return b;2: match(a:orders where a.name='Order_327')-[e:partner]->(b)<-[e2:partner]-(c:orders where c.name='Order_407') return b limit 136;3: match(a:buyer where a.name= '郑宏')-[e]-(b:seller)-[e2]-(c:orders) return c.price * c.price;4: match(a where a.value <> 900 or (a.id BETWEEN 39 AND 45)) return a;"}
{"prompt": "给定图的schema如下:CREATE GRAPH g ( Vertex goods ( id int ID, name varchar, category varchar, price double, sellerNumber double, value int ), Vertex orders ( id int ID, name varchar, price double, value int ), Vertex seller ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex buyer ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge buyer_cancel_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge buyer_consult_seller ( srcId int FROM buyer SOURCE ID, targetId int FROM seller DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge seller_has_goods ( srcId int FROM seller SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_look_goods ( srcId int FROM buyer SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge orders_contain_goods ( srcId int FROM orders SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_creates_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));执行以下3个查询:1: 找出类型是buyer_creates_orders,以及满足条件timeStamp为2028年12月20日或f0为530或f0为空的边;2: 帮我查询所有源点标签为买家,目标点标签为订单,标签为buyer_creates_orders的边;3: 查询满足条件价值小于3659.95且销量在891.67到1311.73之间的节点;", "completion": "查询语句为:1: match(a)-[e:buyer_creates_orders where e.timeStamp = '2028-12-20' or e.f0 = 530 or (e.f0 is null)]->(b) return e;2: match(a:buyer)-[e:buyer_creates_orders]->(b:orders) return e;3: match(a where a.value < 3659.95 and (a.sellerNumber BETWEEN 891.67 AND 1311.73)) return a;"}
{"prompt": "用这个schema:CREATE GRAPH g ( Vertex goods ( id int ID, name varchar, category varchar, price double, sellerNumber double, value int ), Vertex orders ( id int ID, name varchar, price double, value int ), Vertex seller ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex buyer ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge buyer_cancel_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge buyer_consult_seller ( srcId int FROM buyer SOURCE ID, targetId int FROM seller DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge seller_has_goods ( srcId int FROM seller SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_look_goods ( srcId int FROM buyer SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge orders_contain_goods ( srcId int FROM orders SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_creates_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));生成8个查询语句:1: 给出买家周思思查看的商品,被其他买家查看的数量;2: 返回与名为马雪和孙伟的点共同创造的,label为订单的节点;3: 找出全部buyer的relation,或其relation的relation;4: 帮我查询源点id小于39,边标签为buyer_creates_orders,且timeStamp不是2003年03月13日且timeStamp不等于2029年06月01日,或targetId不为空的边,返回这些边的f0乘900的值;5: 帮我查询名为马建聪和杜科的,标签为seller的点公共的friend节点的名单;6: 给出全部orders以value分组的value, 根据value升序排序;7: 查询25个名为郑雪的点consult的标签等于seller的节点,且其gender不是famale;8: 帮我查询和buyer有关联的seller节点,并根据其id,height分组,返回id,height,以及id乘id的和;", "completion": "查询语句为:1: match(a:buyer where a.name='周思思')-[e:buyer_look_goods]->(b:goods)<-[e2:buyer_look_goods]-(c:buyer) return COUNT(c);2: match(a where a.name = '马雪')-[e:buyer_creates_orders]->(b:orders)<-[e2:buyer_creates_orders]-(c where c.name = '孙伟') return b;3: match(a:buyer)-[e:relation]->{1,2}(b) return b;4: match(a where a.id < 39)-[e:buyer_creates_orders where (e.timeStamp <> '2003-03-13' and e.timeStamp <> '2029-06-01') or (e.targetId is not null)]->(b) return e.f0 * 900;5: match(a:seller where a.name='马建聪')-[e:friend]->(b)<-[e2:friend]-(c:seller where c.name='杜科') return b.name;6: match(a:orders) return a.value group by a.value order by a.value asc;7: match(a where a.name='郑雪')-[e:buyer_consult_seller]->(b:seller where b.gender <> 'famale') return b limit 25;8: match(a:buyer)-[e:buyer_consult_seller]-(b:seller) return b.id, b.height, SUM(b.id * b.id) group by b.id, b.height;"}
{"prompt": "用如下schema的图:CREATE GRAPH g ( Vertex goods ( id int ID, name varchar, category varchar, price double, sellerNumber double, value int ), Vertex orders ( id int ID, name varchar, price double, value int ), Vertex seller ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex buyer ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge buyer_cancel_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge buyer_consult_seller ( srcId int FROM buyer SOURCE ID, targetId int FROM seller DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge seller_has_goods ( srcId int FROM seller SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_look_goods ( srcId int FROM buyer SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge orders_contain_goods ( srcId int FROM orders SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_creates_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));生成4个查询语句:1: 找出label为seller_has_goods,且weight大于等于128.98,srcId小于28,或f1不是true的边;2: 返回41个名字不是赵伟且年龄的最小值不等于9404且名字等于陈思琪的买家,根据年龄从小到大排列;3: 查找标签等于商品,名为椅子的点,返回这些点的销量,id;4: 查询和buyer徐国强之间有buyer_consult_seller关系的seller;", "completion": "查询语句为:1: match(a)-[e:seller_has_goods where (e.weight >= 128.98 and e.srcId < 28) or e.f1 <> true]->(b) return e;2: match(a:buyer where a.name <> '赵伟' and MIN(a.age) <> 9404 and a.name = '陈思琪') return a order by a.age asc limit 41;3: match(a:goods where a.name = '椅子') return a.sellerNumber, a.id;4: match(a:buyer where a.name='徐国强')-[e:buyer_consult_seller]->(b:seller) return b;"}
{"prompt": "给定图的schema如下:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_colleague_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_parent_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_family_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_friend_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_lover_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下4个查询:1: 查询id为143的person有关的person的同事, 再查询和person有关系的恋人;2: 给出标签为person_parent_person,以及f1不等于false或srcId等于114的边;3: 查询和person徐雪之间有person_friend_person关系的person;4: 帮我查询所有与周轩存在person_parent_person关系的person,person与person存在person_lover_person关系的点,返回这些点的身高;", "completion": "查询语句为:1: match(a:person where id = '143')-[e]-(b:person)-[e2:person_colleague_person]->(c), (b:person)-[e3:person_lover_person]->(d) return a, b, c, d;2: match(a)-[e:person_parent_person where e.f1 <> false or e.srcId = 114]->(b) return e;3: match(a:person where a.name='徐雪')-[e:person_friend_person]->(b:person) return b;4: match(a where a.name = '周轩')-[e:person_parent_person]->(b:person)-[e2:person_lover_person]->(c:person) return c.height;"}
{"prompt": "用这个schema:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_colleague_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_parent_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_family_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_friend_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_lover_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下7个查询:1: 查询184个名为黄轩的点relates的标签等于person的节点,且其gender不等于famale或age的最小值大于94;2: 给出label为person的点,并根据id降序排列;3: 给出person马梅关联的person,被其他person关联的数量;4: 给出和person点有relates关系的person节点,且边满足条件srcId乘153大于等于842,目标person节点满足条件id小于14;5: 查询所有源点标签为person,边标签为person_lover_person,且满足条件f0不是743,targetId不是124,或targetId除143大于14的边;6: 找出person韩宏的所有类型是colleague的边,并根据srcId降序排列,返回101个;7: 查询和person王思思有关的person,称为X,再查询和这个X有关联的其他person,以及和X有关联的person;", "completion": "查询语句为:1: match(a where a.name='黄轩')-[e:relates]->(b:person where b.gender <> 'famale' or MIN(b.age) > 94) return b limit 184;2: match(a:person) return a order by a.id desc;3: match(a:person where a.name='马梅')-[e:relates]->(b:person)<-[e2:relates]-(c:person) return COUNT(c);4: match(a:person)-[e:relates where e.srcId * 153 >= 842]->(b:person where b.id < 14) return b;5: match(a:person)-[e:person_lover_person where (e.f0 <> 743 and e.targetId <> 124) or e.targetId / 143 > 14]->(b) return e;6: match(a:person where a.name = '韩宏')-[e:person_colleague_person]->(b) return b order by e.srcId desc limit 101;7: match(a:person where a.name = '王思思')-[e]-(b:person), (b:person)-[e2]-(c:person),(b:person)-[e3]-(d:person) return a, b, c, d;"}
{"prompt": "用如下schema的图:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_colleague_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_parent_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_family_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_friend_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_lover_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下6个查询:1: 帮我查询id等于17且性别不等于famale且薪资大于等于9142的节点;2: 返回所有源点满足条件id的和是188或id小于等于73,目标点满足条件性别不是famale或id大于等于41,且标签等于person_lover_person的边;3: 返回全部与person有关系的person节点,且person节点的身高不为空,并返回这些点的身高对151取余减179的值,以及age的数量加年龄的平均值;4: 请帮我找出194个名为陈若涵的点关联的label为person的节点,且其性别等于male;5: 查找11个名为李伟的点关联的类型为person的节点,且其性别大于等于150,年龄小于等于1210;6: 返回192个person杜国强和杜若涵,共同的friend;", "completion": "查询语句为:1: match(a where a.id = 17 and a.gender <> 'famale' and a.salary >= 9142) return a;2: match(a where SUM(a.id) = 188 or a.id <= 73)-[e:person_lover_person]->(b where b.gender <> 'famale' or b.id >= 41) return e;3: match(a:person)-[e]->(b:person where (b.height is not null)) return b.height % 151 - 179, AVG(COUNT(b.age) + b.age);4: match(a where a.name='陈若涵')-[e:relates]->(b:person where b.gender = 'male') return b limit 194;5: match(a where a.name='李伟')-[e:relates]->(b:person where b.gender >= 150 and b.age <= 1210) return b limit 11;6: match(a:person where a.name='杜国强')-[e:person_friend_person]->(b)<-[e2:person_friend_person]-(c:person where c.name='杜若涵') return b limit 192;"}
{"prompt": "使用这个图:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_colleague_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_parent_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_family_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_friend_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_lover_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));生成3个查询语句:1: 给出person的三角的环,边标签为person_lover_person, 并返回这些点的id;2: 请帮我找出所有person以性别,薪资,身高分组的年龄, 根据年龄从大到小排序;3: 请帮我查找和person李轩有关的person,称为X,再请帮我查找和这个X有关联的其他person,以及和X有关联的person;", "completion": "查询语句为:1: match(a:person)-[e:person_lover_person]->(b)-[e2:person_lover_person]-(c)->(a) return a,b.id as b_id,c.id as c_id;2: match(a:person) return a.age group by a.gender, a.salary, a.height order by a.age desc;3: match(a:person where a.name = '李轩')-[e]-(b:person), (b:person)-[e2]-(c:person),(b:person)-[e3]-(d:person) return a, b, c, d;"}
{"prompt": "给定图的schema如下:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_colleague_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_parent_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_family_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_friend_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_lover_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));生成8个查询语句:1: 请帮我找出全部id为30的person关联的person,和以关联关系关联了这些person的其他person;2: 请帮我查找源点name等于黄建聪或salary加6689乘49乘id加age大于168或salary大于2101,目标点id不为空,且类型是person_parent_person的边;3: 帮我查询person的friend,或其friend的friend;4: 请帮我找出和person点有关联关系的person节点,且边满足条件权重不是124,目标person节点满足条件身高小于185;5: 找出person周轩的全部标签等于同事的边,并根据权重从大到小排列,返回24个;6: 请帮我查找和person Jack有关系的person节点,返回这些点的salary,name;7: 查询label为person,名为马轩的点,返回这些点的身高;8: 给出前182个标签为person_family_person的边;", "completion": "查询语句为:1: match(a:person where a.id = '30')-[e]-(b:person)<-[e2:relates]-(c:person) return b,c;2: match(a where a.name = '黄建聪' or (a.salary + 6689) * 49 * a.id + a.age > 168 or a.salary > 2101)-[e:person_parent_person]->(b where (b.id is not null)) return e;3: match(a:person)-[e:person_friend_person]->{1,2}(b) return b;4: match(a:person)-[e:relates where e.weight <> 124]->(b:person where b.height < 185) return b;5: match(a:person where a.name = '周轩')-[e:person_colleague_person]->(b) return b order by e.weight desc limit 24;6: match(a:person where a.name='Jack')-[e]-(b:person) return b.salary, b.name;7: match(a:person where a.name = '马轩') return a.height;8: match(a)-[e:person_family_person]->(b) return e limit 182;"}
{"prompt": "给定图的schema如下:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_colleague_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_parent_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_family_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_friend_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_lover_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));生成4个查询语句:1: 请帮我查找54个person徐思思和陈科,共同的colleague;2: 查询和person王强有关的person,再查询和王强person_friend_person的其他person,返回它们;3: 帮我查询person杜建国relates的person,被其他person knows的数量;4: 返回id为174的person有关的person的friend, 再返回和person有关系的family;", "completion": "查询语句为:1: match(a:person where a.name='徐思思')-[e:person_colleague_person]->(b)<-[e2:person_colleague_person]-(c:person where c.name='陈科') return b limit 54;2: match(a:person where a.name = '王强')-[e]-(b:person), (a:person)-[e2:person_friend_person]->(c:person) return a, b, c;3: match(a:person where a.name='杜建国')-[e:relates]->(b:person)<-[e2:knows]-(c:person) return COUNT(c);4: match(a:person where id = '174')-[e]-(b:person)-[e2:person_friend_person]->(c), (b:person)-[e3:person_family_person]->(d) return a, b, c, d;"}
{"prompt": "使用这个图:CREATE GRAPH g ( Vertex film ( id int ID, name varchar, category varchar, value int ), Vertex cinema ( id int ID, name varchar, address varchar, size int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex tag ( id int ID, name varchar, value int ), Vertex comment ( id int ID, name varchar, createTime bigint, wordCount int ), Edge film_has_tag ( srcId int FROM film SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_likes_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean ), Edge cinema_releases_film ( srcId int FROM cinema SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_creates_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge comment_belong_film ( srcId int FROM comment SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_watch_film ( srcId int FROM person SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));执行以下4个查询:1: 返回42个与大众影院和横店影院都存在关系的电影节点;2: 返回comment Comment_287 belong的film,返回film has的tag的id乘13除98乘521的最大值 ;3: 查询标签等于comment的点,返回115个;4: 找出和person有关联的film节点,并根据其id,name分组,返回id,name,以及value的最小值乘value的最大值;", "completion": "查询语句为:1: match(a where a.name='大众影院')-[e]->(b:film)<-[e2]-(c where c.name='横店影院') return b limit 42;2: match(a:comment where name = 'Comment_287')-[e:comment_belong_film]->(b:film)-[e2:film_has_tag]->(c:tag) return MAX(c.id * 13 / 98 * 521);3: match(a:comment) return a limit 115;4: match(a:person)-[e:person_watch_film]-(b:film) return b.id, b.name, MAX(MIN(b.value) * b.value) group by b.id, b.name;"}
{"prompt": "用如下schema的图:CREATE GRAPH g ( Vertex film ( id int ID, name varchar, category varchar, value int ), Vertex cinema ( id int ID, name varchar, address varchar, size int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex tag ( id int ID, name varchar, value int ), Vertex comment ( id int ID, name varchar, createTime bigint, wordCount int ), Edge film_has_tag ( srcId int FROM film SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_likes_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean ), Edge cinema_releases_film ( srcId int FROM cinema SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_creates_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge comment_belong_film ( srcId int FROM comment SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_watch_film ( srcId int FROM person SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));执行以下8个查询:1: 帮我查询被电影少年足球拥有的标签;2: 给出comment Comment_143的标签等于friend的边,并根据f0从大到小排列,返回57个;3: 查询与评论Comment_379有关,且与标签科幻有关系的电影节点;4: 帮我查询76个与悬疑和其他都存在关系的标签节点;5: 请帮我找出157个value为空或name不等于古代或name是悬疑的tag,根据name升序排列;6: 查询label为tag的全部点,并根据name从小到大排列;7: 查找cinema横店影院的所有标签为relation的边,并根据f0降序排列,返回170个;8: 给出与名为郑科和杜思思的点共同likes的,label为comment的节点;", "completion": "查询语句为:1: match(a:tag)<-[e:film_has_tag]-(b:film where b.name='少年足球') return a, b;2: match(a:comment where a.name = 'Comment_143')-[e:friend]->(b) return b order by e.f0 desc limit 57;3: match(a:comment where a.name='Comment_379')-[e:comment_belong_film]-(b:film)-[e2:film_has_tag]-(c:tag where c.name='科幻') return b;4: match(a where a.name='悬疑')-[e]->(b:tag)<-[e2]-(c where c.name='其他') return b limit 76;5: match(a:tag where (a.value is null) or a.name <> '古代' or a.name = '悬疑') return a order by a.name asc limit 157;6: match(a:tag) return a order by a.name asc;7: match(a:cinema where a.name = '横店影院')-[e:relation]->(b) return b order by e.f0 desc limit 170;8: match(a where a.name = '郑科')-[e:person_likes_comment]->(b:comment)<-[e2:person_likes_comment]-(c where c.name = '杜思思') return b;"}
{"prompt": "给定图的schema如下:CREATE GRAPH g ( Vertex film ( id int ID, name varchar, category varchar, value int ), Vertex cinema ( id int ID, name varchar, address varchar, size int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex tag ( id int ID, name varchar, value int ), Vertex comment ( id int ID, name varchar, createTime bigint, wordCount int ), Edge film_has_tag ( srcId int FROM film SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_likes_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean ), Edge cinema_releases_film ( srcId int FROM cinema SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_creates_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge comment_belong_film ( srcId int FROM comment SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_watch_film ( srcId int FROM person SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));执行以下8个查询:1: 请帮我找出标签为person的所有点,并根据height升序排列;2: 返回id为163的点的名字;3: 给出全部和电影院大众影院有2度关系的person;4: 找出被film西虹市首富has的tag;5: 返回类型为film_has_tag,以及f1不是false或f1不是true的边;6: 找出名为绿巨人的film;7: 请帮我找出所有comment以createTime分组的name, 根据name降序排序;8: 请帮我找出全部与film建国大业有关系的cinema的address;", "completion": "查询语句为:1: match(a:person) return a order by a.height asc;2: match(a where a.id = '163') return a.name;3: match(a:cinema where a.name='大众影院')-[e]->{2,2}(b:person) return b;4: match(a:tag)<-[e:film_has_tag]-(b:film where b.name='西虹市首富') return a, b;5: match(a)-[e:film_has_tag where e.f1 <> false or e.f1 <> true]->(b) return e;6: match(a:film where a.name = '绿巨人') return a;7: match(a:comment) return a.name group by a.createTime order by a.name desc;8: match(a:film where a.name='建国大业')-[e]-(b:cinema) return b.address;"}
{"prompt": "使用这个图:CREATE GRAPH g ( Vertex film ( id int ID, name varchar, category varchar, value int ), Vertex cinema ( id int ID, name varchar, address varchar, size int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex tag ( id int ID, name varchar, value int ), Vertex comment ( id int ID, name varchar, createTime bigint, wordCount int ), Edge film_has_tag ( srcId int FROM film SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_likes_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean ), Edge cinema_releases_film ( srcId int FROM cinema SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_creates_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge comment_belong_film ( srcId int FROM comment SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_watch_film ( srcId int FROM person SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));生成4个查询语句:1: 返回所有源点label为电影,目标点label为标签,label为film_has_tag的边;2: 给出名为悬疑的标签,以及与其有关的person,并返回悬疑的id和这些person的年龄;3: 找出person徐雪喜欢的评论,被其他person喜欢的数量;4: 给出cinema的2度以内的环;", "completion": "查询语句为:1: match(a:film)-[e:film_has_tag]->(b:tag) return e;2: match(a:tag where name = '悬疑')-[e]-(b:person) return a.id, b.age;3: match(a:person where a.name='徐雪')-[e:person_likes_comment]->(b:comment)<-[e2:person_likes_comment]-(c:person) return COUNT(c);4: match(a:cinema)->{0,1}(b)->(a) return a.id, b.id as b_id;"}
{"prompt": "用如下schema的图:CREATE GRAPH g ( Vertex film ( id int ID, name varchar, category varchar, value int ), Vertex cinema ( id int ID, name varchar, address varchar, size int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex tag ( id int ID, name varchar, value int ), Vertex comment ( id int ID, name varchar, createTime bigint, wordCount int ), Edge film_has_tag ( srcId int FROM film SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_likes_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean ), Edge cinema_releases_film ( srcId int FROM cinema SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_creates_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge comment_belong_film ( srcId int FROM comment SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_watch_film ( srcId int FROM person SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));生成9个查询语句:1: 帮我查询所有标签为评论的点;2: 找出源点类型是person,目标点类型是评论,类型是person_creates_comment的边;3: 请帮我找出id为132的评论有关的电影院的伙伴, 再请帮我找出和电影院有关系的相关者;4: 帮我查询person吴雪的全部类型为friend的边,并根据targetId升序排列,返回36个;5: 帮我查询与person周建国和杜若涵都存在person_watch_film关系的点;6: 找出名为陈思思和韩建聪的,类型为person的点公共的relation节点的名单;7: 查找和comment Comment_420有comment_belong_film关系的film,再查找以comment_belong_film关系关联了 Comment_420的film;8: 给出id为118的点的height,salary,age;9: 找出源点地址不是东区,目标点价值为空或id小于等于64,且名字不等于神探狄仁杰,且类型是cinema_releases_film的边;", "completion": "查询语句为:1: match(a:comment) return a;2: match(a:person)-[e:person_creates_comment]->(b:comment) return e;3: match(a:comment where id = '132')-[e]-(b:cinema)-[e2:partner]->(c), (b:cinema)-[e3:relation]->(d) return a, b, c, d;4: match(a:person where a.name = '吴雪')-[e:friend]->(b) return b order by e.targetId asc limit 36;5: match(a:person where a.name='周建国')-[e:person_watch_film]->(b)<-[e2:person_watch_film]-(c:person where c.name='杜若涵') return b;6: match(a:person where a.name='陈思思')-[e:relation]->(b)<-[e2:relation]-(c:person where c.name='韩建聪') return b.name;7: match(a:comment where a.name = 'Comment_420')-[e:comment_belong_film]->(b:film),(a:comment where a.name = 'Comment_420')<-[e2:comment_belong_film]-(c:film)return a, b, c;8: match(a where a.id = '118') return a.height, a.salary, a.age;9: match(a where a.address <> '东区')-[e:cinema_releases_film]->(b where ((b.value is null) or b.id <= 64) and b.name <> '神探狄仁杰') return e;"}
{"prompt": "使用这个图:CREATE GRAPH g ( Vertex film ( id int ID, name varchar, category varchar, value int ), Vertex cinema ( id int ID, name varchar, address varchar, size int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex tag ( id int ID, name varchar, value int ), Vertex comment ( id int ID, name varchar, createTime bigint, wordCount int ), Edge film_has_tag ( srcId int FROM film SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_likes_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean ), Edge cinema_releases_film ( srcId int FROM cinema SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_creates_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge comment_belong_film ( srcId int FROM comment SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_watch_film ( srcId int FROM person SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));生成3个查询语句:1: 请帮我查找全部源点标签等于person,目标点标签等于film,标签等于person_watch_film的边;2: 给出全部和person点有likes关系的comment节点,且边满足条件f1不等于true,目标comment节点id大于等于96;3: 给出前1个label为film_has_tag的边;", "completion": "查询语句为:1: match(a:person)-[e:person_watch_film]->(b:film) return e;2: match(a:person)-[e:person_likes_comment where e.f1 <> true]->(b:comment where b.id >= 96) return b;3: match(a)-[e:film_has_tag]->(b) return e limit 1;"}
{"prompt": "给定图的schema如下:CREATE GRAPH g ( Vertex university ( id int ID, name varchar, level int, value int ), Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex city ( id int ID, name varchar, area int, peopleNumber int, value int ), Vertex country ( id int ID, name varchar, area int, peopleNumber int, value int ), Edge company_cooperate_university ( srcId int FROM company SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_belong_city ( srcId int FROM university SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_cooperate_company ( srcId int FROM university SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge country_contain_city ( srcId int FROM country SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_university ( srcId int FROM city SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_belong_country ( srcId int FROM city SOURCE ID, targetId int FROM country DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_company ( srcId int FROM city SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_belong_city ( srcId int FROM company SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下3个查询:1: 请帮我查找和国家有关联的城市节点,并根据其价值,人数,名字分组,返回价值,人数,名字,以及价值除673的个数;2: 返回所有源点label为城市,目标点label为国家,label为city_belong_country的边;3: 找出城市纽约的全部类型是朋友的边,并根据目标点id降序排列,返回153个;", "completion": "查询语句为:1: match(a:country)-[e:country_contain_city]-(b:city) return b.value, b.peopleNumber, b.name, COUNT(b.value / 673) group by b.value, b.peopleNumber, b.name;2: match(a:city)-[e:city_belong_country]->(b:country) return e;3: match(a:city where a.name = '纽约')-[e:friend]->(b) return b order by e.targetId desc limit 153;"}
{"prompt": "用这个schema:CREATE GRAPH g ( Vertex university ( id int ID, name varchar, level int, value int ), Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex city ( id int ID, name varchar, area int, peopleNumber int, value int ), Vertex country ( id int ID, name varchar, area int, peopleNumber int, value int ), Edge company_cooperate_university ( srcId int FROM company SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_belong_city ( srcId int FROM university SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_cooperate_company ( srcId int FROM university SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge country_contain_city ( srcId int FROM country SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_university ( srcId int FROM city SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_belong_country ( srcId int FROM city SOURCE ID, targetId int FROM country DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_company ( srcId int FROM city SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_belong_city ( srcId int FROM company SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下3个查询:1: 给出全部和名为广州的city有friend关系,或有friend的friend关系的university;2: 返回所有与city有关系的company节点,且company节点的name不是华为,并返回这些点的peopleNumber的求和值减884的数量,以及id的求和值乘38的值;3: 查找类型是大学的点,返回82个;", "completion": "查询语句为:1: match(a:city where n.name=广州)-[e:friend]->{1,2}(b:university) return b;2: match(a:city)-[e]->(b:company where b.name <> '华为') return COUNT(SUM(b.peopleNumber) - 884), SUM(b.id) * 38;3: match(a:university) return a limit 82;"}
{"prompt": "用这个schema:CREATE GRAPH g ( Vertex university ( id int ID, name varchar, level int, value int ), Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex city ( id int ID, name varchar, area int, peopleNumber int, value int ), Vertex country ( id int ID, name varchar, area int, peopleNumber int, value int ), Edge company_cooperate_university ( srcId int FROM company SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_belong_city ( srcId int FROM university SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_cooperate_company ( srcId int FROM university SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge country_contain_city ( srcId int FROM country SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_university ( srcId int FROM city SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_belong_country ( srcId int FROM city SOURCE ID, targetId int FROM country DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_company ( srcId int FROM city SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_belong_city ( srcId int FROM company SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下3个查询:1: 帮我查询id为168的公司关联的国家,和以属于关系关联了这些国家的其他城市;2: 请帮我查找全部和university重庆大学有关系的country节点,返回这些点的id,peopleNumber,name;3: 请帮我找出id为50的点的规格,名字;", "completion": "查询语句为:1: match(a:company where a.id = '168')-[e]-(b:country)<-[e2:city_belong_country]-(c:city) return b,c;2: match(a:university where a.name='重庆大学')-[e]-(b:country) return b.id, b.peopleNumber, b.name;3: match(a where a.id = '50') return a.scale, a.name;"}
{"prompt": "给定图的schema如下:CREATE GRAPH g ( Vertex university ( id int ID, name varchar, level int, value int ), Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex city ( id int ID, name varchar, area int, peopleNumber int, value int ), Vertex country ( id int ID, name varchar, area int, peopleNumber int, value int ), Edge company_cooperate_university ( srcId int FROM company SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_belong_city ( srcId int FROM university SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_cooperate_company ( srcId int FROM university SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge country_contain_city ( srcId int FROM country SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_university ( srcId int FROM city SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_belong_country ( srcId int FROM city SOURCE ID, targetId int FROM country DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_company ( srcId int FROM city SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_belong_city ( srcId int FROM company SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ));生成4个查询语句:1: 返回被城市杭州包含的公司;2: 给出类型为company的全部点,并根据id升序排列;3: 查找被城市东京属于的国家;4: 请帮我查找与城市北京和纽约都存在city_belong_country关系的点;", "completion": "查询语句为:1: match(a:company)<-[e:city_contain_company]-(b:city where b.name='杭州') return a, b;2: match(a:company) return a order by a.id asc;3: match(a:country)<-[e:city_belong_country]-(b:city where b.name='东京') return a, b;4: match(a:city where a.name='北京')-[e:city_belong_country]->(b)<-[e2:city_belong_country]-(c:city where c.name='纽约') return b;"}
{"prompt": "给定图的schema如下:CREATE GRAPH g ( Vertex university ( id int ID, name varchar, level int, value int ), Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex city ( id int ID, name varchar, area int, peopleNumber int, value int ), Vertex country ( id int ID, name varchar, area int, peopleNumber int, value int ), Edge company_cooperate_university ( srcId int FROM company SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_belong_city ( srcId int FROM university SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_cooperate_company ( srcId int FROM university SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge country_contain_city ( srcId int FROM country SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_university ( srcId int FROM city SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_belong_country ( srcId int FROM city SOURCE ID, targetId int FROM country DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_company ( srcId int FROM city SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_belong_city ( srcId int FROM company SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ));生成3个查询语句:1: 查询前143个id小于等于52或名字不是四川大学,且价值在223到437之间的大学;2: 给出和city巴黎有city_contain_university关系的university,再给出以city_contain_company关系关联了巴黎的company;3: 给出城市深圳的全部标签为伙伴的边,并根据权重升序排列,返回117个;", "completion": "查询语句为:1: match(a:university where (a.id <= 52 or a.name <> '四川大学') and (a.value BETWEEN 223 AND 437)) return a limit 143;2: match(a:city where a.name = '巴黎')-[e:city_contain_university]->(b:university),(a:city where a.name = '巴黎')<-[e2:city_contain_company]-(c:company)return a, b, c;3: match(a:city where a.name = '深圳')-[e:partner]->(b) return b order by e.weight asc limit 117;"}
{"prompt": "使用这个图:CREATE GRAPH g ( Vertex university ( id int ID, name varchar, level int, value int ), Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex city ( id int ID, name varchar, area int, peopleNumber int, value int ), Vertex country ( id int ID, name varchar, area int, peopleNumber int, value int ), Edge company_cooperate_university ( srcId int FROM company SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_belong_city ( srcId int FROM university SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_cooperate_company ( srcId int FROM university SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge country_contain_city ( srcId int FROM country SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_university ( srcId int FROM city SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_belong_country ( srcId int FROM city SOURCE ID, targetId int FROM country DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_company ( srcId int FROM city SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_belong_city ( srcId int FROM company SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ));生成6个查询语句:1: 帮我查询名为重庆的点包含的公司,并对这些点的名字进行求和;2: 找出全部名为美国的,name等于武汉或area大于82370的partner,返回这些partner的area,和边的f0,srcId;3: 请帮我查找全部国家以面积分组的id, 根据id降序排序;4: 查询类型为大学的点,返回141个;5: 查询city belong的country,返回其源点的id乘id的值,以及目标点的peopleNumber减54397对874取余的最小值;6: 查询以合作关系关联了公司滴滴的大学;", "completion": "查询语句为:1: match(a where a.name='重庆')-[e:city_contain_company]->(b:company) return SUM(b.name);2: match(a where a.name='美国')-[e:partner]->(b where b.name = '武汉' or b.area > 82370) return b.area,e.f0, e.srcId;3: match(a:country) return a.id group by a.area order by a.id desc;4: match(a:university) return a limit 141;5: match(a:city)-[e:city_belong_country]->(b:country) return a.id * a.id, MIN(b.peopleNumber - 54397 % 874);6: match(a:company where a.name='滴滴')<-[e:university_cooperate_company]-(b:university) return b;"}
{"prompt": "给定图的schema如下:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_pay_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_likes_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下6个查询:1: 查找全部和person赵若涵之间有person_likes_person关系的person;2: 返回源点标签等于person,边标签等于person_pay_person的边,返回这些边的srcId的最大值减91的个数,和targetId减targetId的值;3: 找出所有和person韩雪有2到5跳关系的person;4: 找出person以id分组的id, 根据id升序排序;5: 请帮我查找名为Bob的点likes的所有person,并对这些点的age进行求和;6: 找出person以height分组的name, 根据name从大到小排序;", "completion": "查询语句为:1: match(a:person where a.name='赵若涵')-[e:person_likes_person]->(b:person) return b;2: match(a:person)-[e:person_pay_person]->(b) return COUNT(MAX(e.srcId) - 91), e.targetId - e.targetId;3: match(a:person where a.name='韩雪')-[e]->{2,5}(b:person) return b;4: match(a:person) return a.id group by a.id order by a.id asc;5: match(a where a.name='Bob')-[e:person_likes_person]->(b:person) return SUM(b.age);6: match(a:person) return a.name group by a.height order by a.name desc;"}
{"prompt": "用这个schema:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_pay_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_likes_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下8个查询:1: 帮我查询person赵建国的全部伙伴,的targetId的平均值对51取余的值;2: 查询person徐建国的类型为伙伴的边,并根据目标点id升序排列,返回75个;3: 请帮我查找和person有关联的person节点,并根据其年龄分组,返回年龄,以及年龄除78的值;4: 请帮我找出和person王梅有person_pay_person关系的person,再请帮我找出以person_pay_person关系关联了王梅的person;5: 帮我查询和person有关联的person节点,并根据其salary分组,返回salary,以及age加14的求和值;6: 找出所有名为周国强的点的,名字等于吴建国且身高大于190的朋友,返回这些朋友的名字,和边的f0,目标点id;7: 查询height小于182或id大于38的节点;8: 返回person的1跳的环;", "completion": "查询语句为:1: match(a:person where a.name= '赵建国')-[e:partner]->(b) return AVG(e.targetId) % 51;2: match(a:person where a.name = '徐建国')-[e:partner]->(b) return b order by e.targetId asc limit 75;3: match(a:person)-[e:person_knows_person]-(b:person) return b.age, b.age / 78 group by b.age;4: match(a:person where a.name = '王梅')-[e:person_pay_person]->(b:person),(a:person where a.name = '王梅')<-[e2:person_pay_person]-(c:person)return a, b, c;5: match(a:person)-[e:person_likes_person]-(b:person) return b.salary, SUM(b.age + 14) group by b.salary;6: match(a where a.name='周国强')-[e:friend]->(b where b.name = '吴建国' and b.height > 190) return b.name,e.f0, e.targetId;7: match(a where a.height < 182 or a.id > 38) return a;8: match(a:person)->{0,0}(b)->(a) return a.id, b.id as b_id;"}
{"prompt": "使用这个图:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_pay_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_likes_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));执行以下8个查询:1: 找出和person有关联的person节点,并根据其id分组,返回id,以及年龄乘年龄的值;2: 给出id为188的person有关的person的伙伴, 再给出和person有关系的伙伴;3: 帮我查询全部韩建聪的点knows的person,然后帮我查询韩建聪被pay的person,一起返回;4: 找出与person吴雪有关系的person, 返回和这些person有关联的person的,id除32除薪资的数量;5: 找出id为179的点的gender;6: 返回被person赵雪knows的person;7: 给出马雪的点knows的person,然后给出马雪被knows的person,一起返回;8: 找出被person赵思思认识的person;", "completion": "查询语句为:1: match(a:person)-[e:person_pay_person]-(b:person) return b.id, b.age * b.age group by b.id;2: match(a:person where id = '188')-[e]-(b:person)-[e2:partner]->(c), (b:person)-[e3:partner]->(d) return a, b, c, d;3: match(a where a.name = '韩建聪')-[e:person_knows_person]->(b:person),(a where a.name = '韩建聪')<-[e2:person_pay_person]-(c:person) return a, b, c;4: match(a:person where a.name= '吴雪')-[e]-(b:person)-[e2]-(c:person) return COUNT(c.id / 32 / c.salary);5: match(a where a.id = '179') return a.gender;6: match(a:person)<-[e:person_knows_person]-(b:person where b.name='赵雪') return a, b;7: match(a where a.name = '马雪')-[e:person_knows_person]->(b:person),(a where a.name = '马雪')<-[e2:person_knows_person]-(c:person) return a, b, c;8: match(a:person)<-[e:person_knows_person]-(b:person where b.name='赵思思') return a, b;"}
{"prompt": "用这个schema:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_pay_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_likes_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));生成3个查询语句:1: 帮我查询和person孙科有person_likes_person关系的person,以及和person张梅有person_likes_person关系的person,将它们都返回;2: 查询与名为赵梅和吴月的点共同pay的,标签为person的节点;3: 查询全部和名为杜雪的person有朋友关系,或有朋友的朋友关系的person;", "completion": "查询语句为:1: match(a:person where a.name = '孙科')-[e:person_likes_person]->(b:person),(c:person where c.name = '张梅')-[e2:person_likes_person]->(d:person)return a, b, c, d;2: match(a where a.name = '赵梅')-[e:person_pay_person]->(b:person)<-[e2:person_pay_person]-(c where c.name = '吴月') return b;3: match(a:person where n.name=杜雪)-[e:friend]->{1,2}(b:person) return b;"}
{"prompt": "用如下schema的图:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_pay_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_likes_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));生成9个查询语句:1: 帮我查询标签为person,名为黄建国的点,返回这些点的name,id;2: 请帮我找出所有和person韩伟之间有person_pay_person关系的person;3: 给出标签为person的所有点,并根据name从大到小排列;4: 找出label为person的点,并根据id升序排列;5: 找出前128个类型是person_knows_person的边;6: 请帮我找出全部person的相关者,或其相关者的相关者;7: 查找所有徐强的点pay的person,然后查找徐强被pay的person,一起返回;8: 返回与名为孙强和郑宏的点共同喜欢的,标签为person的节点;9: 给出person孙宏pay的person,被其他person knows的数量;", "completion": "查询语句为:1: match(a:person where a.name = '黄建国') return a.name, a.id;2: match(a:person where a.name='韩伟')-[e:person_pay_person]->(b:person) return b;3: match(a:person) return a order by a.name desc;4: match(a:person) return a order by a.id asc;5: match(a)-[e:person_knows_person]->(b) return e limit 128;6: match(a:person)-[e:relation]->{1,2}(b) return b;7: match(a where a.name = '徐强')-[e:person_pay_person]->(b:person),(a where a.name = '徐强')<-[e2:person_pay_person]-(c:person) return a, b, c;8: match(a where a.name = '孙强')-[e:person_likes_person]->(b:person)<-[e2:person_likes_person]-(c where c.name = '郑宏') return b;9: match(a:person where a.name='孙宏')-[e:person_pay_person]->(b:person)<-[e2:person_knows_person]-(c:person) return COUNT(c);"}
{"prompt": "使用这个图:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_pay_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_likes_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));生成6个查询语句:1: 返回与person吴梅有person_pay_person关系的2度的环;2: 请帮我找出130个gender不是famale,age大于77的person,根据id降序排列;3: 帮我查询与person何科和杜思思都存在person_pay_person关系的点;4: 请帮我找出全部名为徐建国的,身高等于156且年龄在33到95之间的朋友,返回这些朋友的年龄,和边的权重;5: 请帮我查找标签为person,名为郑伟的点,返回这些点的id,salary,age;6: 请帮我找出标签为person_knows_person,以及满足条件weight小于等于110.10或weight等于175.66或srcId为空的边;", "completion": "查询语句为:1: match(a:person where name = '吴梅')-[e:person_pay_person]->{1,1}(b)->(a) return a.id, b.id as b_id;2: match(a:person where a.gender <> 'famale' and a.age > 77) return a order by a.id desc limit 130;3: match(a:person where a.name='何科')-[e:person_pay_person]->(b)<-[e2:person_pay_person]-(c:person where c.name='杜思思') return b;4: match(a where a.name='徐建国')-[e:friend]->(b where b.height = 156 and (b.age BETWEEN 33 AND 95)) return b.age,e.weight;5: match(a:person where a.name = '郑伟') return a.id, a.salary, a.age;6: match(a)-[e:person_knows_person where e.weight <= 110.10 or e.weight = 175.66 or (e.srcId is null)]->(b) return e;"}
