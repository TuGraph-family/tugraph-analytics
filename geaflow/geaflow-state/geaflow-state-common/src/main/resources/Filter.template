package org.apache.geaflow.state.pushdown.filter.inner;

import edge.graph.model.org.apache.geaflow.EdgeDirection;
import edge.graph.model.org.apache.geaflow.IEdge;
import vertex.graph.model.org.apache.geaflow.IVertex;
import graph.model.org.apache.geaflow.IGraphElementWithTimeField;
import graph.model.org.apache.geaflow.IGraphElementWithLabelField;
import data.org.apache.geaflow.state.DataType;
import data.org.apache.geaflow.state.OneDegreeGraph;
import filter.pushdown.org.apache.geaflow.state.FilterType;
import filter.pushdown.org.apache.geaflow.state.IFilter;
import filter.pushdown.org.apache.geaflow.state.AndFilter;
import filter.pushdown.org.apache.geaflow.state.OrFilter;
import inner.filter.pushdown.org.apache.geaflow.state.GeneratedQueryFilter;
import java.util.List;
import java.util.Set;

public class %s extends BaseGraphFilter implements GeneratedQueryFilter {

    private Object[] var;

    public void initVariables(Object[] var){
        this.var = var;
    }

    @Override
    public IGraphFilter clone() {
        return new %s();
    }

    @Override
    public boolean filter(Object value) {
        throw new UnsupportedOperationException();
    }

    @Override
    public boolean filterVertex(IVertex vertex) {
        %s
        return %s;
    }

    @Override
    public boolean filterEdge(IEdge edge) {
        %s
        return %s;
    }


    @Override
    public boolean filterOneDegreeGraph(OneDegreeGraph oneDegreeGraph) {
        return %s;
    }

    @Override
    public DataType dateType() {
        return DataType.OTHER;
    }

    @Override
    public AndFilter and(IFilter filter) {
        throw new UnsupportedOperationException();
    }

    @Override
    public OrFilter or(IFilter filter) {
        throw new UnsupportedOperationException();
    }

    @Override
    public FilterType getFilterType() {
        return FilterType.GENERATED;
    }

}
